{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "Swagger API",
    "contact": {}
  },
  "host": "scylla-manager.magic.host",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/cache_service/row_cache_save_period": {
      "get": {
        "description": "get row cache save period in seconds",
        "summary": "get_row_cache_save_period_in_seconds",
        "operationId": "CacheServiceRowCacheSavePeriodGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "set row cache save period in seconds",
        "summary": "set_row_cache_save_period_in_seconds",
        "operationId": "CacheServiceRowCacheSavePeriodPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "row cache save period in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/key_cache_save_period": {
      "get": {
        "description": "get key cache save period in seconds",
        "summary": "get_key_cache_save_period_in_seconds",
        "operationId": "CacheServiceKeyCacheSavePeriodGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "set key cache save period in seconds",
        "summary": "set_key_cache_save_period_in_seconds",
        "operationId": "CacheServiceKeyCacheSavePeriodPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "key cache save period in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/counter_cache_save_period": {
      "get": {
        "description": "get counter cache save period in seconds",
        "summary": "get_counter_cache_save_period_in_seconds",
        "operationId": "CacheServiceCounterCacheSavePeriodGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "set counter cache save period in seconds",
        "summary": "set_counter_cache_save_period_in_seconds",
        "operationId": "CacheServiceCounterCacheSavePeriodPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ccspis",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "counter cache save period in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/row_cache_keys_to_save": {
      "get": {
        "description": "get row cache keys to save",
        "summary": "get_row_cache_keys_to_save",
        "operationId": "CacheServiceRowCacheKeysToSaveGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "set row cache keys to save",
        "summary": "set_row_cache_keys_to_save",
        "operationId": "CacheServiceRowCacheKeysToSavePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rckts",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "row cache keys to save"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/key_cache_keys_to_save": {
      "get": {
        "description": "get key cache keys to save",
        "summary": "get_key_cache_keys_to_save",
        "operationId": "CacheServiceKeyCacheKeysToSaveGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "set key cache keys to save",
        "summary": "set_key_cache_keys_to_save",
        "operationId": "CacheServiceKeyCacheKeysToSavePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kckts",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "key cache keys to save"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/counter_cache_keys_to_save": {
      "get": {
        "description": "get counter cache keys to save",
        "summary": "get_counter_cache_keys_to_save",
        "operationId": "CacheServiceCounterCacheKeysToSaveGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "set counter cache keys to save",
        "summary": "set_counter_cache_keys_to_save",
        "operationId": "CacheServiceCounterCacheKeysToSavePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cckts",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "counter cache keys to save"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/invalidate_key_cache": {
      "post": {
        "description": "invalidate the key cache; for use after invalidating row cache",
        "summary": "invalidate_key_cache",
        "operationId": "CacheServiceInvalidateKeyCachePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/invalidate_counter_cache": {
      "post": {
        "description": "invalidate counter cache",
        "summary": "invalidate_counter_cache",
        "operationId": "CacheServiceInvalidateCounterCachePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/row_cache_capacity": {
      "post": {
        "description": "set row cache capacity in mb",
        "summary": "set_row_cache_capacity_in_mb",
        "operationId": "CacheServiceRowCacheCapacityPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "capacity",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "row cache capacity in mb"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/key_cache_capacity": {
      "post": {
        "description": "set key cache capacity in mb",
        "summary": "set_key_cache_capacity_in_mb",
        "operationId": "CacheServiceKeyCacheCapacityPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "capacity",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "key cache capacity in mb"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/counter_cache_capacity": {
      "post": {
        "description": "set counter cache capacity in mb",
        "summary": "set_counter_cache_capacity_in_mb",
        "operationId": "CacheServiceCounterCacheCapacityPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "capacity",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "counter cache capacity in mb"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/save_caches": {
      "post": {
        "description": "save row and key caches",
        "summary": "save_caches",
        "operationId": "CacheServiceSaveCachesPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/capacity": {
      "get": {
        "description": "Get key capacity",
        "summary": "get_key_capacity",
        "operationId": "CacheServiceMetricsKeyCapacityGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/hits": {
      "get": {
        "description": "Get key hits",
        "summary": "get_key_hits",
        "operationId": "CacheServiceMetricsKeyHitsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/requests": {
      "get": {
        "description": "Get key requests",
        "summary": "get_key_requests",
        "operationId": "CacheServiceMetricsKeyRequestsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/hit_rate": {
      "get": {
        "description": "Get key hit rate",
        "summary": "get_key_hit_rate",
        "operationId": "CacheServiceMetricsKeyHitRateGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/hits_moving_avrage": {
      "get": {
        "description": "Get key hits moving avrage",
        "summary": "get_key_hits_moving_avrage",
        "operationId": "CacheServiceMetricsKeyHitsMovingAvrageGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/requests_moving_avrage": {
      "get": {
        "description": "Get key requests moving avrage",
        "summary": "get_key_requests_moving_avrage",
        "operationId": "CacheServiceMetricsKeyRequestsMovingAvrageGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/size": {
      "get": {
        "description": "Get key cache waited size",
        "summary": "get_key_size",
        "operationId": "CacheServiceMetricsKeySizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/key/entries": {
      "get": {
        "description": "Get key entries",
        "summary": "get_key_entries",
        "operationId": "CacheServiceMetricsKeyEntriesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/capacity": {
      "get": {
        "description": "Get row capacity",
        "summary": "get_row_capacity",
        "operationId": "CacheServiceMetricsRowCapacityGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/hits": {
      "get": {
        "description": "Get row hits",
        "summary": "get_row_hits",
        "operationId": "CacheServiceMetricsRowHitsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/requests": {
      "get": {
        "description": "Get row requests",
        "summary": "get_row_requests",
        "operationId": "CacheServiceMetricsRowRequestsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/hit_rate": {
      "get": {
        "description": "Get row hit rate",
        "summary": "get_row_hit_rate",
        "operationId": "CacheServiceMetricsRowHitRateGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/hits_moving_avrage": {
      "get": {
        "description": "Get row hits moving avrage",
        "summary": "get_row_hits_moving_avrage",
        "operationId": "CacheServiceMetricsRowHitsMovingAvrageGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/requests_moving_avrage": {
      "get": {
        "description": "Get row requests moving avrage",
        "summary": "get_row_requests_moving_avrage",
        "operationId": "CacheServiceMetricsRowRequestsMovingAvrageGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/size": {
      "get": {
        "description": "Get row cache waited size",
        "summary": "get_row_size",
        "operationId": "CacheServiceMetricsRowSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/row/entries": {
      "get": {
        "description": "Get row entries",
        "summary": "get_row_entries",
        "operationId": "CacheServiceMetricsRowEntriesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/capacity": {
      "get": {
        "description": "Get counter capacity",
        "summary": "get_counter_capacity",
        "operationId": "CacheServiceMetricsCounterCapacityGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/hits": {
      "get": {
        "description": "Get counter hits",
        "summary": "get_counter_hits",
        "operationId": "CacheServiceMetricsCounterHitsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/requests": {
      "get": {
        "description": "Get counter requests",
        "summary": "get_counter_requests",
        "operationId": "CacheServiceMetricsCounterRequestsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/hit_rate": {
      "get": {
        "description": "Get counter hit rate",
        "summary": "get_counter_hit_rate",
        "operationId": "CacheServiceMetricsCounterHitRateGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/hits_moving_avrage": {
      "get": {
        "description": "Get counter hits moving avrage",
        "summary": "get_counter_hits_moving_avrage",
        "operationId": "CacheServiceMetricsCounterHitsMovingAvrageGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/requests_moving_avrage": {
      "get": {
        "description": "Get counter requests moving avrage",
        "summary": "get_counter_requests_moving_avrage",
        "operationId": "CacheServiceMetricsCounterRequestsMovingAvrageGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/size": {
      "get": {
        "description": "Get counter cache waited size",
        "summary": "get_counter_size",
        "operationId": "CacheServiceMetricsCounterSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/cache_service/metrics/counter/entries": {
      "get": {
        "description": "Get counter entries",
        "summary": "get_counter_entries",
        "operationId": "CacheServiceMetricsCounterEntriesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/collectd/{pluginid}": {
      "get": {
        "description": "Get a collectd value",
        "summary": "get_collectd",
        "operationId": "CollectdByPluginidGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pluginid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The plugin ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The plugin type"
          },
          {
            "name": "instance",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The plugin instance"
          },
          {
            "name": "type_instance",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The plugin type instance"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/collectd_value"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Start reporting on one or more collectd metric",
        "summary": "enable_collectd",
        "operationId": "CollectdByPluginidPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pluginid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The plugin ID, describe the component the metric belongs to. Examples are cache, thrift, etc'. Regex are supported.The plugin ID, describe the component the metric belong to. Examples are: cache, thrift etc'. regex are supported"
          },
          {
            "name": "instance",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The plugin instance typically #CPU indicating per CPU metric. Regex are supported. Omit for all"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The plugin type, the type of the information. Examples are total_operations, bytes, total_operations, etc'. Regex are supported. Omit for all"
          },
          {
            "name": "type_instance",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The plugin type instance, the specific metric. Exampls are total_writes, total_size, zones, etc'. Regex are supported, Omit for all"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "set to true to enable all, anything else or omit to disable"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/collectd/": {
      "get": {
        "description": "Get a list of all collectd metrics and their status",
        "summary": "get_collectd_items",
        "operationId": "CollectdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/collectd_metric_status"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Enable or disable all collectd metrics",
        "summary": "enable_all_collectd",
        "operationId": "CollectdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "set to true to enable all, anything else or omit to disable"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/": {
      "get": {
        "description": "Get a list of all column family info",
        "summary": "get_column_family",
        "operationId": "ColumnFamilyGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/column_family_info"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/name": {
      "get": {
        "description": "Get a list of all column family names",
        "summary": "get_column_family_name",
        "operationId": "ColumnFamilyNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/name/keyspace": {
      "get": {
        "description": "Get a list of the key space names",
        "summary": "get_column_family_name_keyspace",
        "operationId": "ColumnFamilyNameKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/major_compaction/{name}": {
      "post": {
        "description": "Force a major compaction of this column family",
        "summary": "force_major_compaction",
        "operationId": "ColumnFamilyMajorCompactionByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "split_output",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "true if the output of the major compaction should be split in several sstables"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/minimum_compaction/{name}": {
      "post": {
        "description": "Sets the minimum number of sstables in queue before compaction kicks off",
        "summary": "set_minimum_compaction_threshold",
        "operationId": "ColumnFamilyMinimumCompactionByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The minimum number of sstables in queue before compaction kicks off"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "get the minimum number of sstables in queue before compaction kicks off",
        "summary": "get_minimum_compaction_threshold",
        "operationId": "ColumnFamilyMinimumCompactionByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/maximum_compaction/{name}": {
      "post": {
        "description": "Sets the maximum number of sstables in queue before compaction kicks off",
        "summary": "set_maximum_compaction_threshold",
        "operationId": "ColumnFamilyMaximumCompactionByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of sstables in queue before compaction kicks off"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "get the maximum number of sstables in queue before compaction kicks off",
        "summary": "get_maximum_compaction_threshold",
        "operationId": "ColumnFamilyMaximumCompactionByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/compaction/{name}": {
      "post": {
        "description": "Sets the minumum and maximum number of sstables in queue before compaction kicks off",
        "summary": "set_compaction_threshold",
        "operationId": "ColumnFamilyCompactionByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "maximum",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of sstables in queue before compaction kicks off"
          },
          {
            "name": "minimum",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The minimum number of sstables in queue before compaction kicks off"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/compaction_strategy/{name}": {
      "post": {
        "description": "Sets the compaction strategy by class name",
        "summary": "set_compaction_strategy_class",
        "operationId": "ColumnFamilyCompactionStrategyByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "class_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The class name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "Gets the compaction strategy class name",
        "summary": "get_compaction_strategy_class",
        "operationId": "ColumnFamilyCompactionStrategyByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/compression_parameters/{name}": {
      "get": {
        "description": "get the compression parameters",
        "summary": "get_compression_parameters",
        "operationId": "ColumnFamilyCompressionParametersByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Sets the compression parameters",
        "summary": "set_compression_parameters",
        "operationId": "ColumnFamilyCompressionParametersByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "opts",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The options to set"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/crc_check_chance/{name}": {
      "post": {
        "description": "Set new crc check chance",
        "summary": "set_crc_check_chance",
        "operationId": "ColumnFamilyCrcCheckChanceByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "check_chance",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "CRC check chance"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/autocompaction/{name}": {
      "get": {
        "description": "check if the auto_compaction property is enabled for a given table",
        "summary": "is_auto_compaction_enabled",
        "operationId": "ColumnFamilyAutocompactionByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The table name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Enable table auto compaction",
        "summary": "enable_auto_compaction",
        "operationId": "ColumnFamilyAutocompactionByNamePost",
        "deprecated": false,
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The table name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "delete": {
        "description": "Disable table auto compaction",
        "summary": "disable_auto_compaction",
        "operationId": "ColumnFamilyAutocompactionByNameDelete",
        "deprecated": false,
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The table name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/estimate_keys/{name}": {
      "get": {
        "description": "Get the estimate keys",
        "summary": "estimate_keys",
        "operationId": "ColumnFamilyEstimateKeysByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/built_indexes/{name}": {
      "get": {
        "description": "Returns a list of the names of the built column indexes for current store",
        "summary": "get_built_indexes",
        "operationId": "ColumnFamilyBuiltIndexesByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/sstables/by_key/{name}": {
      "get": {
        "description": "Returns a list of sstable filenames that contain the given partition key on this node",
        "summary": "get_sstables_for_key",
        "operationId": "ColumnFamilySstablesByKeyByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The partition key. In a composite-key scenario, use ':' to separate the columns in the key."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/load/sstable/{name}": {
      "post": {
        "description": "Scan through Keyspace/ColumnFamily's data directory determine which SSTables should be loaded and load them",
        "summary": "load_new_sstables",
        "operationId": "ColumnFamilyLoadSstableByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/sstables/unleveled/{name}": {
      "get": {
        "description": "the number of SSTables in L0.  Always return 0 if Leveled compaction is not enabled.",
        "summary": "get_unleveled_sstables",
        "operationId": "ColumnFamilySstablesUnleveledByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/sstables/per_level/{name}": {
      "get": {
        "description": "sstable count for each level. empty unless leveled compaction is used",
        "summary": "get_sstable_count_per_level",
        "operationId": "ColumnFamilySstablesPerLevelByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/droppable_ratio/{name}": {
      "get": {
        "description": "Get the ratio of droppable tombstones to real columns (and non-droppable tombstones)",
        "summary": "get_droppable_tombstone_ratio",
        "operationId": "ColumnFamilyDroppableRatioByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_columns_count/{name}": {
      "get": {
        "description": "get memtable columns count",
        "summary": "get_memtable_columns_count",
        "operationId": "ColumnFamilyMetricsMemtableColumnsCountByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_columns_count/": {
      "get": {
        "description": "get all memtable columns count",
        "summary": "get_all_memtable_columns_count",
        "operationId": "ColumnFamilyMetricsMemtableColumnsCountGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_on_heap_size/{name}": {
      "get": {
        "description": "Get the column family active memtable on heap size",
        "summary": "get_memtable_on_heap_size",
        "operationId": "ColumnFamilyMetricsMemtableOnHeapSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_on_heap_size": {
      "get": {
        "description": "Get all active memtable of all column family on heap size",
        "summary": "get_all_memtable_on_heap_size",
        "operationId": "ColumnFamilyMetricsMemtableOnHeapSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_off_heap_size/{name}": {
      "get": {
        "description": "Get the column family active memtable off heap size",
        "summary": "get_memtable_off_heap_size",
        "operationId": "ColumnFamilyMetricsMemtableOffHeapSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_off_heap_size": {
      "get": {
        "description": "Get all active memtable of all column family off heap size",
        "summary": "get_all_memtable_off_heap_size",
        "operationId": "ColumnFamilyMetricsMemtableOffHeapSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_live_data_size/{name}": {
      "get": {
        "description": "Get the column family active memtable live data size",
        "summary": "get_memtable_live_data_size",
        "operationId": "ColumnFamilyMetricsMemtableLiveDataSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_live_data_size": {
      "get": {
        "description": "Get all active memtable of all column family live data size",
        "summary": "get_all_memtable_live_data_size",
        "operationId": "ColumnFamilyMetricsMemtableLiveDataSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/all_memtables_on_heap_size/{name}": {
      "get": {
        "description": "Get all of the column family active and not memtables on heap size",
        "summary": "get_cf_all_memtables_on_heap_size",
        "operationId": "ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/all_memtables_on_heap_size": {
      "get": {
        "description": "Get all memtables active and not of all column family on heap size",
        "summary": "get_all_cf_all_memtables_on_heap_size",
        "operationId": "ColumnFamilyMetricsAllMemtablesOnHeapSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/all_memtables_off_heap_size/{name}": {
      "get": {
        "description": "Get all of the column family active and not memtables off heap size",
        "summary": "get_cf_all_memtables_off_heap_size",
        "operationId": "ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/all_memtables_off_heap_size": {
      "get": {
        "description": "Get all memtables active and not of all column family off heap size",
        "summary": "get_all_cf_all_memtables_off_heap_size",
        "operationId": "ColumnFamilyMetricsAllMemtablesOffHeapSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/all_memtables_live_data_size/{name}": {
      "get": {
        "description": "Get all of the column family active and not memtables live data size",
        "summary": "get_cf_all_memtables_live_data_size",
        "operationId": "ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/all_memtables_live_data_size": {
      "get": {
        "description": "Get all memtables active and not of all column family live data size",
        "summary": "get_all_cf_all_memtables_live_data_size",
        "operationId": "ColumnFamilyMetricsAllMemtablesLiveDataSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_switch_count/{name}": {
      "get": {
        "description": "Get memtable switch count",
        "summary": "get_memtable_switch_count",
        "operationId": "ColumnFamilyMetricsMemtableSwitchCountByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/memtable_switch_count": {
      "get": {
        "description": "Get all memtable switch count",
        "summary": "get_all_memtable_switch_count",
        "operationId": "ColumnFamilyMetricsMemtableSwitchCountGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/estimated_row_size_histogram/{name}": {
      "get": {
        "description": "Get estimated row size histogram",
        "summary": "get_estimated_row_size_histogram",
        "operationId": "ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/estimated_row_count/{name}": {
      "get": {
        "description": "Get estimated row count",
        "summary": "get_estimated_row_count",
        "operationId": "ColumnFamilyMetricsEstimatedRowCountByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/estimated_column_count_histogram/{name}": {
      "get": {
        "description": "Get estimated column count histogram",
        "summary": "get_estimated_column_count_histogram",
        "operationId": "ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/compression_ratio/{name}": {
      "get": {
        "description": "Get compression ratio",
        "summary": "get_compression_ratio",
        "operationId": "ColumnFamilyMetricsCompressionRatioByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/compression_ratio": {
      "get": {
        "description": "Get all compression ratio",
        "summary": "get_all_compression_ratio",
        "operationId": "ColumnFamilyMetricsCompressionRatioGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency/{name}": {
      "get": {
        "description": "Get read latency",
        "summary": "get_read_latency",
        "operationId": "ColumnFamilyMetricsReadLatencyByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read/{name}": {
      "get": {
        "description": "Get number of reads",
        "summary": "get_read",
        "operationId": "ColumnFamilyMetricsReadByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read/": {
      "get": {
        "description": "Get number of reads from all column family, per shard",
        "summary": "get_all_read",
        "operationId": "ColumnFamilyMetricsReadGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency/histogram/{name}": {
      "get": {
        "description": "Get read latency histogram",
        "summary": "get_read_latency_histogram_depricated",
        "operationId": "ColumnFamilyMetricsReadLatencyHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency/histogram/": {
      "get": {
        "description": "Get read latency histogram from all column family",
        "summary": "get_all_read_latency_histogram_depricated",
        "operationId": "ColumnFamilyMetricsReadLatencyHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/histogram"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency/moving_average_histogram/{name}": {
      "get": {
        "description": "Get read latency moving avrage histogram",
        "summary": "get_read_latency_histogram",
        "operationId": "ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency/moving_average_histogram/": {
      "get": {
        "description": "Get read latency moving avrage histogram from all column family",
        "summary": "get_all_read_latency_histogram",
        "operationId": "ColumnFamilyMetricsReadLatencyMovingAverageHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rate_moving_average_and_histogram"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency": {
      "get": {
        "description": "Get all read latency",
        "summary": "get_all_read_latency",
        "operationId": "ColumnFamilyMetricsReadLatencyGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/range_latency/{name}": {
      "get": {
        "description": "Get range latency",
        "summary": "get_range_latency",
        "operationId": "ColumnFamilyMetricsRangeLatencyByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/range_latency": {
      "get": {
        "description": "Get all range latency",
        "summary": "get_all_range_latency",
        "operationId": "ColumnFamilyMetricsRangeLatencyGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency/{name}": {
      "get": {
        "description": "Get write latency",
        "summary": "get_write_latency",
        "operationId": "ColumnFamilyMetricsWriteLatencyByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write/{name}": {
      "get": {
        "description": "Get number of writes",
        "summary": "get_write",
        "operationId": "ColumnFamilyMetricsWriteByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write/": {
      "get": {
        "description": "Get number of writes from all column family, per shard",
        "summary": "get_all_write",
        "operationId": "ColumnFamilyMetricsWriteGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency/histogram/{name}": {
      "get": {
        "description": "Get write latency histogram",
        "summary": "get_write_latency_histogram_depricated",
        "operationId": "ColumnFamilyMetricsWriteLatencyHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency/histogram/": {
      "get": {
        "description": "Get write latency histogram of all column family",
        "summary": "get_all_write_latency_histogram_depricated",
        "operationId": "ColumnFamilyMetricsWriteLatencyHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/histogram"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency/moving_average_histogram/{name}": {
      "get": {
        "description": "Get write latency moving average histogram",
        "summary": "get_write_latency_histogram",
        "operationId": "ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency/moving_average_histogram/": {
      "get": {
        "description": "Get write latency moving average histogram of all column family",
        "summary": "get_all_write_latency_histogram",
        "operationId": "ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rate_moving_average_and_histogram"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency": {
      "get": {
        "description": "Get all write latency",
        "summary": "get_all_write_latency",
        "operationId": "ColumnFamilyMetricsWriteLatencyGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/pending_flushes/{name}": {
      "get": {
        "description": "Get pending flushes",
        "summary": "get_pending_flushes",
        "operationId": "ColumnFamilyMetricsPendingFlushesByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/pending_flushes": {
      "get": {
        "description": "Get all pending flushes",
        "summary": "get_all_pending_flushes",
        "operationId": "ColumnFamilyMetricsPendingFlushesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/pending_compactions/{name}": {
      "get": {
        "description": "Get pending compactions",
        "summary": "get_pending_compactions",
        "operationId": "ColumnFamilyMetricsPendingCompactionsByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/pending_compactions": {
      "get": {
        "description": "Get all pending compactions",
        "summary": "get_all_pending_compactions",
        "operationId": "ColumnFamilyMetricsPendingCompactionsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/live_ss_table_count/{name}": {
      "get": {
        "description": "Get live ss table count",
        "summary": "get_live_ss_table_count",
        "operationId": "ColumnFamilyMetricsLiveSsTableCountByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/live_ss_table_count": {
      "get": {
        "description": "Get all live ss table count",
        "summary": "get_all_live_ss_table_count",
        "operationId": "ColumnFamilyMetricsLiveSsTableCountGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/live_disk_space_used/{name}": {
      "get": {
        "description": "Get live disk space used",
        "summary": "get_live_disk_space_used",
        "operationId": "ColumnFamilyMetricsLiveDiskSpaceUsedByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/live_disk_space_used": {
      "get": {
        "description": "Get all live disk space used",
        "summary": "get_all_live_disk_space_used",
        "operationId": "ColumnFamilyMetricsLiveDiskSpaceUsedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/total_disk_space_used/{name}": {
      "get": {
        "description": "Get total disk space used",
        "summary": "get_total_disk_space_used",
        "operationId": "ColumnFamilyMetricsTotalDiskSpaceUsedByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/total_disk_space_used": {
      "get": {
        "description": "Get all total disk space used",
        "summary": "get_all_total_disk_space_used",
        "operationId": "ColumnFamilyMetricsTotalDiskSpaceUsedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/min_row_size/{name}": {
      "get": {
        "description": "Get min row size",
        "summary": "get_min_row_size",
        "operationId": "ColumnFamilyMetricsMinRowSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/min_row_size": {
      "get": {
        "description": "Get all min row size",
        "summary": "get_all_min_row_size",
        "operationId": "ColumnFamilyMetricsMinRowSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/max_row_size/{name}": {
      "get": {
        "description": "Get max row size",
        "summary": "get_max_row_size",
        "operationId": "ColumnFamilyMetricsMaxRowSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/max_row_size": {
      "get": {
        "description": "Get all max row size",
        "summary": "get_all_max_row_size",
        "operationId": "ColumnFamilyMetricsMaxRowSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/mean_row_size/{name}": {
      "get": {
        "description": "Get mean row size",
        "summary": "get_mean_row_size",
        "operationId": "ColumnFamilyMetricsMeanRowSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/mean_row_size": {
      "get": {
        "description": "Get all mean row size",
        "summary": "get_all_mean_row_size",
        "operationId": "ColumnFamilyMetricsMeanRowSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_false_positives/{name}": {
      "get": {
        "description": "Get bloom filter false positives",
        "summary": "get_bloom_filter_false_positives",
        "operationId": "ColumnFamilyMetricsBloomFilterFalsePositivesByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_false_positives": {
      "get": {
        "description": "Get all bloom filter false positives",
        "summary": "get_all_bloom_filter_false_positives",
        "operationId": "ColumnFamilyMetricsBloomFilterFalsePositivesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/recent_bloom_filter_false_positives/{name}": {
      "get": {
        "description": "Get recent bloom filter false positives",
        "summary": "get_recent_bloom_filter_false_positives",
        "operationId": "ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/recent_bloom_filter_false_positives": {
      "get": {
        "description": "Get all recent bloom filter false positives",
        "summary": "get_all_recent_bloom_filter_false_positives",
        "operationId": "ColumnFamilyMetricsRecentBloomFilterFalsePositivesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_false_ratio/{name}": {
      "get": {
        "description": "Get bloom filter false ratio",
        "summary": "get_bloom_filter_false_ratio",
        "operationId": "ColumnFamilyMetricsBloomFilterFalseRatioByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_false_ratio": {
      "get": {
        "description": "Get all bloom filter false ratio",
        "summary": "get_all_bloom_filter_false_ratio",
        "operationId": "ColumnFamilyMetricsBloomFilterFalseRatioGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/recent_bloom_filter_false_ratio/{name}": {
      "get": {
        "description": "Get recent bloom filter false ratio",
        "summary": "get_recent_bloom_filter_false_ratio",
        "operationId": "ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/recent_bloom_filter_false_ratio": {
      "get": {
        "description": "Get all recent bloom filter false ratio",
        "summary": "get_all_recent_bloom_filter_false_ratio",
        "operationId": "ColumnFamilyMetricsRecentBloomFilterFalseRatioGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_disk_space_used/{name}": {
      "get": {
        "description": "Get bloom filter disk space used",
        "summary": "get_bloom_filter_disk_space_used",
        "operationId": "ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_disk_space_used": {
      "get": {
        "description": "Get all bloom filter disk space used",
        "summary": "get_all_bloom_filter_disk_space_used",
        "operationId": "ColumnFamilyMetricsBloomFilterDiskSpaceUsedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_off_heap_memory_used/{name}": {
      "get": {
        "description": "Get bloom filter off heap memory used",
        "summary": "get_bloom_filter_off_heap_memory_used",
        "operationId": "ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/bloom_filter_off_heap_memory_used": {
      "get": {
        "description": "Get all bloom filter off heap memory used",
        "summary": "get_all_bloom_filter_off_heap_memory_used",
        "operationId": "ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/index_summary_off_heap_memory_used/{name}": {
      "get": {
        "description": "Get index summary off heap memory used",
        "summary": "get_index_summary_off_heap_memory_used",
        "operationId": "ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/index_summary_off_heap_memory_used": {
      "get": {
        "description": "Get all index summary off heap memory used",
        "summary": "get_all_index_summary_off_heap_memory_used",
        "operationId": "ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/compression_metadata_off_heap_memory_used/{name}": {
      "get": {
        "description": "Get compression metadata off heap memory used",
        "summary": "get_compression_metadata_off_heap_memory_used",
        "operationId": "ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/compression_metadata_off_heap_memory_used": {
      "get": {
        "description": "Get all compression metadata off heap memory used",
        "summary": "get_all_compression_metadata_off_heap_memory_used",
        "operationId": "ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/speculative_retries/{name}": {
      "get": {
        "description": "Get speculative retries",
        "summary": "get_speculative_retries",
        "operationId": "ColumnFamilyMetricsSpeculativeRetriesByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/speculative_retries": {
      "get": {
        "description": "Get all speculative retries",
        "summary": "get_all_speculative_retries",
        "operationId": "ColumnFamilyMetricsSpeculativeRetriesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/key_cache_hit_rate/{name}": {
      "get": {
        "description": "Get key cache hit rate",
        "summary": "get_key_cache_hit_rate",
        "operationId": "ColumnFamilyMetricsKeyCacheHitRateByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/snapshots_size/{name}": {
      "get": {
        "description": "Get true snapshots size",
        "summary": "get_true_snapshots_size",
        "operationId": "ColumnFamilyMetricsSnapshotsSizeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/true_snapshots_size": {
      "get": {
        "description": "Get all true snapshots size",
        "summary": "get_all_true_snapshots_size",
        "operationId": "ColumnFamilyMetricsTrueSnapshotsSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/row_cache_hit_out_of_range/{name}": {
      "get": {
        "description": "Get row cache hit out of range",
        "summary": "get_row_cache_hit_out_of_range",
        "operationId": "ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/row_cache_hit_out_of_range": {
      "get": {
        "description": "Get all row cache hit out of range",
        "summary": "get_all_row_cache_hit_out_of_range",
        "operationId": "ColumnFamilyMetricsRowCacheHitOutOfRangeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/row_cache_hit/{name}": {
      "get": {
        "description": "Get row cache hit",
        "summary": "get_row_cache_hit",
        "operationId": "ColumnFamilyMetricsRowCacheHitByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/row_cache_hit": {
      "get": {
        "description": "Get all row cache hit",
        "summary": "get_all_row_cache_hit",
        "operationId": "ColumnFamilyMetricsRowCacheHitGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/row_cache_miss/{name}": {
      "get": {
        "description": "Get row cache miss",
        "summary": "get_row_cache_miss",
        "operationId": "ColumnFamilyMetricsRowCacheMissByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/row_cache_miss": {
      "get": {
        "description": "Get all row cache miss",
        "summary": "get_all_row_cache_miss",
        "operationId": "ColumnFamilyMetricsRowCacheMissGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_prepare/{name}": {
      "get": {
        "description": "Get cas prepare",
        "summary": "get_cas_prepare",
        "operationId": "ColumnFamilyMetricsCasPrepareByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_propose/{name}": {
      "get": {
        "description": "Get cas propose",
        "summary": "get_cas_propose",
        "operationId": "ColumnFamilyMetricsCasProposeByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_commit/{name}": {
      "get": {
        "description": "Get cas commit",
        "summary": "get_cas_commit",
        "operationId": "ColumnFamilyMetricsCasCommitByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/sstables_per_read_histogram/{name}": {
      "get": {
        "description": "Get sstables per read histogram",
        "summary": "get_sstables_per_read_histogram",
        "operationId": "ColumnFamilyMetricsSstablesPerReadHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/tombstone_scanned_histogram/{name}": {
      "get": {
        "description": "Get tombstone scanned histogram",
        "summary": "get_tombstone_scanned_histogram",
        "operationId": "ColumnFamilyMetricsTombstoneScannedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/live_scanned_histogram/{name}": {
      "get": {
        "description": "Get live scanned histogram",
        "summary": "get_live_scanned_histogram",
        "operationId": "ColumnFamilyMetricsLiveScannedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/col_update_time_delta_histogram/{name}": {
      "get": {
        "description": "Get col update time delta histogram",
        "summary": "get_col_update_time_delta_histogram",
        "operationId": "ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/coordinator/read": {
      "get": {
        "description": "Get coordinator read latency",
        "summary": "get_coordinator_read_latency",
        "operationId": "ColumnFamilyMetricsCoordinatorReadGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/coordinator/scan": {
      "get": {
        "description": "Get coordinator scan latency",
        "summary": "get_coordinator_scan_latency",
        "operationId": "ColumnFamilyMetricsCoordinatorScanGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/waiting_on_free_memtable": {
      "get": {
        "description": "Get waiting on free memtable space",
        "summary": "get_waiting_on_free_memtable_space",
        "operationId": "ColumnFamilyMetricsWaitingOnFreeMemtableGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency/estimated_recent_histogram/{name}": {
      "get": {
        "description": "Get read latency",
        "summary": "get_read_latency_estimated_recent_histogram",
        "operationId": "ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/read_latency/estimated_histogram/{name}": {
      "get": {
        "description": "Get read latency",
        "summary": "get_read_latency_estimated_histogram",
        "operationId": "ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/range_latency/estimated_recent_histogram/{name}": {
      "get": {
        "description": "Get range latency",
        "summary": "get_range_latency_estimated_recent_histogram",
        "operationId": "ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/range_latency/estimated_histogram/{name}": {
      "get": {
        "description": "Get range latency",
        "summary": "get_range_latency_estimated_histogram",
        "operationId": "ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency/estimated_recent_histogram/{name}": {
      "get": {
        "description": "Get write latency",
        "summary": "get_write_latency_estimated_recent_histogram",
        "operationId": "ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/write_latency/estimated_histogram/{name}": {
      "get": {
        "description": "Get write latency",
        "summary": "get_write_latency_estimated_histogram",
        "operationId": "ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_prepare/estimated_recent_histogram/{name}": {
      "get": {
        "description": "Get cas prepare",
        "summary": "get_cas_prepare_estimated_recent_histogram",
        "operationId": "ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_prepare/estimated_histogram/{name}": {
      "get": {
        "description": "Get cas prepare",
        "summary": "get_cas_prepare_estimated_histogram",
        "operationId": "ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_propose/estimated_recent_histogram/{name}": {
      "get": {
        "description": "Get cas propose",
        "summary": "get_cas_propose_estimated_recent_histogram",
        "operationId": "ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_propose/estimated_histogram/{name}": {
      "get": {
        "description": "Get cas propose",
        "summary": "get_cas_propose_estimated_histogram",
        "operationId": "ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_commit/estimated_recent_histogram/{name}": {
      "get": {
        "description": "Get cas commit",
        "summary": "get_cas_commit_estimated_recent_histogram",
        "operationId": "ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/column_family/metrics/cas_commit/estimated_histogram/{name}": {
      "get": {
        "description": "Get cas commit",
        "summary": "get_cas_commit_estimated_histogram",
        "operationId": "ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The column family name in keyspace:name format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commitlog/recover/{path}": {
      "post": {
        "description": "Recover a single file",
        "summary": "commitlog_recover",
        "operationId": "CommitlogRecoverByPathPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Full path of file or directory"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commitlog/segments/active": {
      "get": {
        "description": "file names (not full paths) of active commit log segments (segments containing unflushed data)",
        "summary": "get_active_segment_names",
        "operationId": "CommitlogSegmentsActiveGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commitlog/segments/archiving": {
      "get": {
        "description": "Returns files which are pending for archival attempt. Does NOT include failed archive attempts",
        "summary": "get_archiving_segment_names",
        "operationId": "CommitlogSegmentsArchivingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commitlog/metrics/completed_tasks": {
      "get": {
        "description": "Get completed tasks",
        "summary": "get_completed_tasks",
        "operationId": "CommitlogMetricsCompletedTasksGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commitlog/metrics/pending_tasks": {
      "get": {
        "description": "Get pending tasks",
        "summary": "get_pending_tasks",
        "operationId": "CommitlogMetricsPendingTasksGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commitlog/metrics/total_commit_log_size": {
      "get": {
        "description": "Get total commit log size",
        "summary": "get_total_commit_log_size",
        "operationId": "CommitlogMetricsTotalCommitLogSizeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commit_log/metrics/waiting_on_segment_allocation": {
      "get": {
        "description": "Get waiting on segment allocation",
        "summary": "get_waiting_on_segment_allocation",
        "operationId": "CommitLogMetricsWaitingOnSegmentAllocationGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/commit_log/metrics/waiting_on_commit": {
      "get": {
        "description": "Get waiting on commit",
        "summary": "get_waiting_on_commit",
        "operationId": "CommitLogMetricsWaitingOnCommitGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/compactions": {
      "get": {
        "description": "get List of running compactions",
        "summary": "get_compactions",
        "operationId": "CompactionManagerCompactionsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/summary"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/compaction_history": {
      "get": {
        "description": "get List of the compaction history",
        "summary": "get_compaction_history",
        "operationId": "CompactionManagerCompactionHistoryGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/history"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/compaction_info": {
      "get": {
        "description": "get a list of all active compaction info",
        "summary": "get_compaction_info",
        "operationId": "CompactionManagerCompactionInfoGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/compaction_info"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/force_user_defined_compaction": {
      "post": {
        "description": "Triggers the compaction of user specified sstables. You can specify files from various keyspaces and columnfamilies. If you do so, user defined compaction is performed several times to the groups of files in the same keyspace/columnfamily. must contain keyspace and columnfamily name in path(for 2.1+) or file name itself.",
        "summary": "force_user_defined_compaction",
        "operationId": "CompactionManagerForceUserDefinedCompactionPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data_files",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "a comma separated list of sstable file to compact. must contain keyspace and columnfamily name in path(for 2.1+) or file name itself"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/stop_compaction": {
      "post": {
        "description": "Stop all running compaction-like tasks having the provided type",
        "summary": "stop_compaction",
        "operationId": "CompactionManagerStopCompactionPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "the type of compaction to stop. Can be one of: - COMPACTION - VALIDATION - CLEANUP - SCRUB - INDEX_BUILD"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/metrics/pending_tasks": {
      "get": {
        "description": "Get pending tasks",
        "summary": "get_pending_tasks1",
        "operationId": "CompactionManagerMetricsPendingTasksGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/metrics/completed_tasks": {
      "get": {
        "description": "Get completed tasks",
        "summary": "get_completed_tasks1",
        "operationId": "CompactionManagerMetricsCompletedTasksGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/metrics/total_compactions_completed": {
      "get": {
        "description": "Get total compactions completed",
        "summary": "get_total_compactions_completed",
        "operationId": "CompactionManagerMetricsTotalCompactionsCompletedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/compaction_manager/metrics/bytes_compacted": {
      "get": {
        "description": "Get bytes compacted",
        "summary": "get_bytes_compacted",
        "operationId": "CompactionManagerMetricsBytesCompactedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/snitch/datacenter": {
      "get": {
        "description": "Provides the Datacenter name depending on the respective snitch used, given the hostname/ip",
        "summary": "get_datacenter",
        "operationId": "SnitchDatacenterGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The host name. If absent, the local server broadcast/listen address is used"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/snitch/rack": {
      "get": {
        "description": "Provides the Rack name depending on the respective snitch used, given the host name/ip",
        "summary": "get_rack",
        "operationId": "SnitchRackGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The host name. If absent, the local server broadcast/listen address is used"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/snitch/name": {
      "get": {
        "description": "Provides the snitch name of the cluster",
        "summary": "get_snitch_name",
        "operationId": "SnitchNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/failure_detector/phi": {
      "get": {
        "description": "Get the phi convict threshold",
        "summary": "get_phi_convict_threshold",
        "operationId": "FailureDetectorPhiGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set the phi convict threshold",
        "summary": "set_phi_convict_threshold",
        "operationId": "FailureDetectorPhiPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phi",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The new phi value"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/failure_detector/endpoint_phi_values": {
      "get": {
        "description": "Get end point phi values",
        "summary": "get_endpoint_phi_values",
        "operationId": "FailureDetectorEndpointPhiValuesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/failure_detector/endpoints/": {
      "get": {
        "description": "Get all endpoint states",
        "summary": "get_all_endpoint_states",
        "operationId": "FailureDetectorEndpointsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/endpoint_state"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/failure_detector/endpoints/states/{addr}": {
      "get": {
        "description": "Get endpoint states",
        "summary": "get_endpoint_state",
        "operationId": "FailureDetectorEndpointsStatesByAddrGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The endpoint address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/failure_detector/count/endpoint/down": {
      "get": {
        "description": "Get count down endpoint",
        "summary": "get_down_endpoint_count",
        "operationId": "FailureDetectorCountEndpointDownGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/failure_detector/count/endpoint/up": {
      "get": {
        "description": "Get count up endpoint",
        "summary": "get_up_endpoint_count",
        "operationId": "FailureDetectorCountEndpointUpGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/failure_detector/simple_states": {
      "get": {
        "description": "Get simple_states",
        "summary": "get_simple_states",
        "operationId": "FailureDetectorSimpleStatesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/gossiper/endpoint/down/": {
      "get": {
        "description": "Get the addreses of the down endpoints",
        "summary": "get_down_endpoint",
        "operationId": "GossiperEndpointDownGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/gossiper/endpoint/live/": {
      "get": {
        "description": "Get the addreses of live endpoints",
        "summary": "get_live_endpoint",
        "operationId": "GossiperEndpointLiveGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/gossiper/downtime/{addr}": {
      "get": {
        "description": "Get the downtime of an end point",
        "summary": "get_endpoint_downtime",
        "operationId": "GossiperDowntimeByAddrGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The endpoint address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/gossiper/generation_number/{addr}": {
      "get": {
        "description": "Returns files which are pending for archival attempt. Does NOT include failed archive attempts",
        "summary": "get_current_generation_number",
        "operationId": "GossiperGenerationNumberByAddrGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The endpoint address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/gossiper/heart_beat_version/{addr}": {
      "get": {
        "description": "Get heart beat version for a node",
        "summary": "get_current_heart_beat_version",
        "operationId": "GossiperHeartBeatVersionByAddrGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The endpoint address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/gossiper/assassinate/{addr}": {
      "post": {
        "description": "Assassinate an end point",
        "summary": "assassinate_endpoint",
        "operationId": "GossiperAssassinateByAddrPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The endpoint address"
          },
          {
            "name": "unsafe",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to True to perform an unsafe assassination"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/hinted_handoff/hints": {
      "get": {
        "description": "List all the endpoints that this node has hints for.",
        "summary": "list_endpoints_pending_hints",
        "operationId": "HintedHandoffHintsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "delete": {
        "description": "Truncate all the hints",
        "summary": "truncate_all_hints",
        "operationId": "HintedHandoffHintsDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional String rep. of endpoint address to delete hints for"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/hinted_handoff/schedule": {
      "post": {
        "description": "force hint delivery to an endpoint",
        "summary": "schedule_hint_delivery",
        "operationId": "HintedHandoffSchedulePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "String rep. of endpoint address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/hinted_handoff/pause": {
      "post": {
        "description": "pause hints delivery",
        "summary": "pause_hints_delivery",
        "operationId": "HintedHandoffPausePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pause",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "pause status"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/hinted_handoff/metrics/create_hint/{addr}": {
      "get": {
        "description": "Get create hint count",
        "summary": "get_create_hint_count",
        "operationId": "HintedHandoffMetricsCreateHintByAddrGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The peer address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/hinted_handoff/metrics/not_stored_hints/{addr}": {
      "get": {
        "description": "Get not stored hints count",
        "summary": "get_not_stored_hints_count",
        "operationId": "HintedHandoffMetricsNotStoredHintsByAddrGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The peer address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/lsa/compact": {
      "post": {
        "description": "Force compaction of all regions",
        "summary": "lsa_compact",
        "operationId": "LsaCompactPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/timeout": {
      "get": {
        "description": "Get the number of timeout messages",
        "summary": "get_timeout_messages",
        "operationId": "MessagingServiceMessagesTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/dropped_by_ver": {
      "get": {
        "description": "Get the number of dropped messages per verb",
        "summary": "get_dropped_messages_by_ver",
        "operationId": "MessagingServiceMessagesDroppedByVerGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/verb_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/dropped": {
      "get": {
        "description": "Get the number of messages that were dropped before sending",
        "summary": "get_dropped_messages",
        "operationId": "MessagingServiceMessagesDroppedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/replied": {
      "get": {
        "description": "Get the number of replied messages",
        "summary": "get_completed_messages",
        "operationId": "MessagingServiceMessagesRepliedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/sent": {
      "get": {
        "description": "Get the number of sent messages",
        "summary": "get_sent_messages",
        "operationId": "MessagingServiceMessagesSentGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/pending": {
      "get": {
        "description": "Get the number of pending messages",
        "summary": "get_pending_messages",
        "operationId": "MessagingServiceMessagesPendingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/exception": {
      "get": {
        "description": "Get the number of messages return with an exception",
        "summary": "get_exception_messages",
        "operationId": "MessagingServiceMessagesExceptionGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/respond_pending": {
      "get": {
        "description": "Get the number of messages waiting for respond",
        "summary": "get_respond_pending_messages",
        "operationId": "MessagingServiceMessagesRespondPendingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/messages/respond_completed": {
      "get": {
        "description": "Get the number of completed respond messages",
        "summary": "get_respond_completed_messages",
        "operationId": "MessagingServiceMessagesRespondCompletedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message_counter"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/messaging_service/version": {
      "get": {
        "description": "Get the version number",
        "summary": "get_version",
        "operationId": "MessagingServiceVersionGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addr",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/total_hints": {
      "get": {
        "description": "Get total hints",
        "summary": "get_total_hints",
        "operationId": "StorageProxyTotalHintsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/hinted_handoff_enabled": {
      "get": {
        "description": "Return true if hinted handoff enabled",
        "summary": "get_hinted_handoff_enabled",
        "operationId": "StorageProxyHintedHandoffEnabledGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set hinted handoff status",
        "summary": "set_hinted_handoff_enabled",
        "operationId": "StorageProxyHintedHandoffEnabledPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enable",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "Set to true to enable hinted handoff"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/hinted_handoff_enabled_by_dc": {
      "get": {
        "description": "Get the hinted handoff enabled by dc",
        "summary": "get_hinted_handoff_enabled_by_dc",
        "operationId": "StorageProxyHintedHandoffEnabledByDcGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper_list"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set the hinted handoff enabled by dc",
        "summary": "set_hinted_handoff_enabled_by_dc_list",
        "operationId": "StorageProxyHintedHandoffEnabledByDcPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dcs",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The dcs to enable in the CSV format"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/max_hint_window": {
      "get": {
        "description": "Get the max hint window",
        "summary": "get_max_hint_window",
        "operationId": "StorageProxyMaxHintWindowGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set the max hint window",
        "summary": "set_max_hint_window",
        "operationId": "StorageProxyMaxHintWindowPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ms",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "max hint window in ms"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/max_hints_in_progress": {
      "get": {
        "description": "Get max hints in progress",
        "summary": "get_max_hints_in_progress",
        "operationId": "StorageProxyMaxHintsInProgressGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set max hints in progress",
        "summary": "set_max_hints_in_progress",
        "operationId": "StorageProxyMaxHintsInProgressPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "qs",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "max hints in progress"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/hints_in_progress": {
      "get": {
        "description": "get hints in progress",
        "summary": "get_hints_in_progress",
        "operationId": "StorageProxyHintsInProgressGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/rpc_timeout": {
      "get": {
        "description": "Get the RPC timeout in seconds",
        "summary": "get_rpc_timeout",
        "operationId": "StorageProxyRpcTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set the RPC timeout",
        "summary": "set_rpc_timeout",
        "operationId": "StorageProxyRpcTimeoutPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Timeout in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/read_rpc_timeout": {
      "get": {
        "description": "Get the read RPC timeout in seconds",
        "summary": "get_read_rpc_timeout",
        "operationId": "StorageProxyReadRpcTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set the read RPC timeout",
        "summary": "set_read_rpc_timeout",
        "operationId": "StorageProxyReadRpcTimeoutPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The timeout in second"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/write_rpc_timeout": {
      "get": {
        "description": "Get the write RPC timeout in seconds",
        "summary": "get_write_rpc_timeout",
        "operationId": "StorageProxyWriteRpcTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set the write RPC timeout",
        "summary": "set_write_rpc_timeout",
        "operationId": "StorageProxyWriteRpcTimeoutPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "timeout in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/counter_write_rpc_timeout": {
      "get": {
        "description": "Get counter write rpc timeout in seconds",
        "summary": "get_counter_write_rpc_timeout",
        "operationId": "StorageProxyCounterWriteRpcTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set counter write rpc timeout",
        "summary": "set_counter_write_rpc_timeout",
        "operationId": "StorageProxyCounterWriteRpcTimeoutPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "timeout in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/cas_contention_timeout": {
      "get": {
        "description": "Get CAS contention timeout in seconds",
        "summary": "get_cas_contention_timeout",
        "operationId": "StorageProxyCasContentionTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set CAS contention timeout",
        "summary": "set_cas_contention_timeout",
        "operationId": "StorageProxyCasContentionTimeoutPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "timeout in second"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/range_rpc_timeout": {
      "get": {
        "description": "Get range rpc timeout in seconds",
        "summary": "get_range_rpc_timeout",
        "operationId": "StorageProxyRangeRpcTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set range rpc timeout",
        "summary": "set_range_rpc_timeout",
        "operationId": "StorageProxyRangeRpcTimeoutPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "timeout in second"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/truncate_rpc_timeout": {
      "get": {
        "description": "Get truncate rpc timeout in seconds",
        "summary": "get_truncate_rpc_timeout",
        "operationId": "StorageProxyTruncateRpcTimeoutGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set truncate rpc timeout",
        "summary": "set_truncate_rpc_timeout",
        "operationId": "StorageProxyTruncateRpcTimeoutPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "timeout in second"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/reload_trigger_classes": {
      "post": {
        "description": "Reload trigger classes",
        "summary": "reload_trigger_classes",
        "operationId": "StorageProxyReloadTriggerClassesPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/read_repair_attempted": {
      "get": {
        "description": "Get read repair attempted",
        "summary": "get_read_repair_attempted",
        "operationId": "StorageProxyReadRepairAttemptedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/read_repair_repaired_blocking": {
      "get": {
        "description": "Get read repair repaired blocking",
        "summary": "get_read_repair_repaired_blocking",
        "operationId": "StorageProxyReadRepairRepairedBlockingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/read_repair_repaired_background": {
      "get": {
        "description": "Get read repair repaired background",
        "summary": "get_read_repair_repaired_background",
        "operationId": "StorageProxyReadRepairRepairedBackgroundGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/schema_versions": {
      "get": {
        "description": "Get a map of the schema versions",
        "summary": "get_schema_versions",
        "operationId": "StorageProxySchemaVersionsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper_list"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_read/timeouts": {
      "get": {
        "description": "Get CAS read timeout",
        "summary": "get_cas_read_timeouts",
        "operationId": "StorageProxyMetricsCasReadTimeoutsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_read/unavailables": {
      "get": {
        "description": "Get CAS read unavailables",
        "summary": "get_cas_read_unavailables",
        "operationId": "StorageProxyMetricsCasReadUnavailablesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_write/timeouts": {
      "get": {
        "description": "Get CAS write timeout",
        "summary": "get_cas_write_timeouts",
        "operationId": "StorageProxyMetricsCasWriteTimeoutsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_write/unavailables": {
      "get": {
        "description": "Get CAS write unavailables",
        "summary": "get_cas_write_unavailables",
        "operationId": "StorageProxyMetricsCasWriteUnavailablesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_write/unfinished_commit": {
      "get": {
        "description": "Get cas write metrics",
        "summary": "get_cas_write_metrics_unfinished_commit",
        "operationId": "StorageProxyMetricsCasWriteUnfinishedCommitGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_write/contention": {
      "get": {
        "description": "Get cas write metrics",
        "summary": "get_cas_write_metrics_contention",
        "operationId": "StorageProxyMetricsCasWriteContentionGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_write/condition_not_met": {
      "get": {
        "description": "Get cas write metrics",
        "summary": "get_cas_write_metrics_condition_not_met",
        "operationId": "StorageProxyMetricsCasWriteConditionNotMetGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_read/unfinished_commit": {
      "get": {
        "description": "Get cas read metrics",
        "summary": "get_cas_read_metrics_unfinished_commit",
        "operationId": "StorageProxyMetricsCasReadUnfinishedCommitGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_read/contention": {
      "get": {
        "description": "Get cas read metrics",
        "summary": "get_cas_read_metrics_contention",
        "operationId": "StorageProxyMetricsCasReadContentionGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/cas_read/condition_not_met": {
      "get": {
        "description": "Get cas read metrics",
        "summary": "get_cas_read_metrics_condition_not_met",
        "operationId": "StorageProxyMetricsCasReadConditionNotMetGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read/timeouts": {
      "get": {
        "description": "Get read metrics",
        "summary": "get_read_metrics_timeouts",
        "operationId": "StorageProxyMetricsReadTimeoutsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read/unavailables": {
      "get": {
        "description": "Get read metrics",
        "summary": "get_read_metrics_unavailables",
        "operationId": "StorageProxyMetricsReadUnavailablesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read/timeouts_rates": {
      "get": {
        "description": "Get read metrics rates",
        "summary": "get_read_metrics_timeouts_rates",
        "operationId": "StorageProxyMetricsReadTimeoutsRatesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read/unavailables_rates": {
      "get": {
        "description": "Get read metrics rates",
        "summary": "get_read_metrics_unavailables_rates",
        "operationId": "StorageProxyMetricsReadUnavailablesRatesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read/histogram": {
      "get": {
        "description": "Get read metrics",
        "summary": "get_read_metrics_latency_histogram_depricated",
        "operationId": "StorageProxyMetricsReadHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range/histogram": {
      "get": {
        "description": "Get range metrics",
        "summary": "get_range_metrics_latency_histogram_depricated",
        "operationId": "StorageProxyMetricsRangeHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read/moving_average_histogram": {
      "get": {
        "description": "Get read metrics",
        "summary": "get_read_metrics_latency_histogram",
        "operationId": "StorageProxyMetricsReadMovingAverageHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range/moving_average_histogram": {
      "get": {
        "description": "Get range metrics rate and histogram",
        "summary": "get_range_metrics_latency_histogram",
        "operationId": "StorageProxyMetricsRangeMovingAverageHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range/timeouts": {
      "get": {
        "description": "Get range metrics",
        "summary": "get_range_metrics_timeouts",
        "operationId": "StorageProxyMetricsRangeTimeoutsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range/unavailables": {
      "get": {
        "description": "Get range metrics",
        "summary": "get_range_metrics_unavailables",
        "operationId": "StorageProxyMetricsRangeUnavailablesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range/timeouts_rates": {
      "get": {
        "description": "Get range metrics rates",
        "summary": "get_range_metrics_timeouts_rates",
        "operationId": "StorageProxyMetricsRangeTimeoutsRatesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range/unavailables_rates": {
      "get": {
        "description": "Get range metrics rates",
        "summary": "get_range_metrics_unavailables_rates",
        "operationId": "StorageProxyMetricsRangeUnavailablesRatesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write/timeouts": {
      "get": {
        "description": "Get write metrics",
        "summary": "get_write_metrics_timeouts",
        "operationId": "StorageProxyMetricsWriteTimeoutsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write/unavailables": {
      "get": {
        "description": "Get write metrics",
        "summary": "get_write_metrics_unavailables",
        "operationId": "StorageProxyMetricsWriteUnavailablesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write/timeouts_rates": {
      "get": {
        "description": "Get write metrics rates",
        "summary": "get_write_metrics_timeouts_rates",
        "operationId": "StorageProxyMetricsWriteTimeoutsRatesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write/unavailables_rates": {
      "get": {
        "description": "Get write metrics rates",
        "summary": "get_write_metrics_unavailables_rates",
        "operationId": "StorageProxyMetricsWriteUnavailablesRatesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rate_moving_average"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write/histogram": {
      "get": {
        "description": "Get write metrics",
        "summary": "get_write_metrics_latency_histogram_depricated",
        "operationId": "StorageProxyMetricsWriteHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write/moving_average_histogram": {
      "get": {
        "description": "Get write metrics",
        "summary": "get_write_metrics_latency_histogram",
        "operationId": "StorageProxyMetricsWriteMovingAverageHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read/estimated_histogram/": {
      "get": {
        "description": "Get read estimated latency",
        "summary": "get_read_estimated_histogram",
        "operationId": "StorageProxyMetricsReadEstimatedHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/read": {
      "get": {
        "description": "Get read latency",
        "summary": "get_read_latency",
        "operationId": "StorageProxyMetricsReadGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write/estimated_histogram/": {
      "get": {
        "description": "Get write estimated latency",
        "summary": "get_write_estimated_histogram",
        "operationId": "StorageProxyMetricsWriteEstimatedHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/write": {
      "get": {
        "description": "Get write latency",
        "summary": "get_write_latency",
        "operationId": "StorageProxyMetricsWriteGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range/estimated_histogram/": {
      "get": {
        "description": "Get range estimated latency",
        "summary": "get_range_estimated_histogram",
        "operationId": "StorageProxyMetricsRangeEstimatedHistogramGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_proxy/metrics/range": {
      "get": {
        "description": "Get range latency",
        "summary": "get_range_latency",
        "operationId": "StorageProxyMetricsRangeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/hostid/local": {
      "get": {
        "description": "Returns the local host id",
        "summary": "local_hostid",
        "operationId": "StorageServiceHostidLocalGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/tokens": {
      "get": {
        "description": "Returns a list of the tokens for this node",
        "summary": "get_tokens",
        "operationId": "StorageServiceTokensGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/tokens/{endpoint}": {
      "get": {
        "description": "Returns a list of the tokens for or a specified node",
        "summary": "get_node_tokens",
        "operationId": "StorageServiceTokensByEndpointGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The endpoint"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/commitlog": {
      "get": {
        "description": "Returns the location of the commit log files",
        "summary": "get_commitlog",
        "operationId": "StorageServiceCommitlogGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/tokens_endpoint": {
      "get": {
        "description": "Returns a list of the tokens endpoint mapping",
        "summary": "get_token_endpoint",
        "operationId": "StorageServiceTokensEndpointGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/nodes/leaving": {
      "get": {
        "description": "Retrieve the list of nodes currently leaving the ring",
        "summary": "get_leaving_nodes",
        "operationId": "StorageServiceNodesLeavingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/nodes/moving": {
      "get": {
        "description": "Retrieve the list of nodes currently moving in the ring",
        "summary": "get_moving_nodes",
        "operationId": "StorageServiceNodesMovingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/nodes/joining": {
      "get": {
        "description": "Retrieve the list of nodes currently bootstrapping into the ring",
        "summary": "get_joining_nodes",
        "operationId": "StorageServiceNodesJoiningGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/release_version": {
      "get": {
        "description": "Fetch a string representation of the Cassandra version.",
        "summary": "get_release_version",
        "operationId": "StorageServiceReleaseVersionGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/scylla_release_version": {
      "get": {
        "description": "Fetch a string representation of the Scylla version.",
        "summary": "get_scylla_release_version",
        "operationId": "StorageServiceScyllaReleaseVersionGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/schema_version": {
      "get": {
        "description": "Fetch a string representation of the current Schema version.",
        "summary": "get_schema_version",
        "operationId": "StorageServiceSchemaVersionGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/data_file/locations": {
      "get": {
        "description": "Get the list of all data file locations from conf",
        "summary": "get_all_data_file_locations",
        "operationId": "StorageServiceDataFileLocationsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/saved_caches/location": {
      "get": {
        "description": "Get location of the saved caches dir",
        "summary": "get_saved_caches_location",
        "operationId": "StorageServiceSavedCachesLocationGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/range_to_endpoint_map/{keyspace}": {
      "get": {
        "description": "Retrieve a map of range to end points that describe the ring topology of a Cassandra cluster.",
        "summary": "get_range_to_endpoint_map",
        "operationId": "StorageServiceRangeToEndpointMapByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to query about"
          },
          {
            "name": "rpc",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to true, return the rpc address"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/maplist_mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/pending_range/{keyspace}": {
      "get": {
        "description": "Retrieve a map of pending ranges to endpoints that describe the ring topology",
        "summary": "get_pending_range_to_endpoint_map",
        "operationId": "StorageServicePendingRangeByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to query about"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/maplist_mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/describe_ring/{keyspace}": {
      "get": {
        "description": "The TokenRange for a given keyspace",
        "summary": "describe_ring",
        "operationId": "StorageServiceDescribeRingByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to fetch information about"
          },
          {
            "name": "table",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The name of table to fetch information about"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/token_range"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/ownership/{keyspace}": {
      "get": {
        "description": "Effective ownership is % of the data each node owns given the keyspace",
        "summary": "get_effective_ownership",
        "operationId": "StorageServiceOwnershipByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to fetch information about"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/ownership/": {
      "get": {
        "description": "The mapping from token -> % of cluster owned by that token",
        "summary": "get_ownership",
        "operationId": "StorageServiceOwnershipGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/host_id": {
      "get": {
        "description": "Retrieve the mapping of endpoint to host ID",
        "summary": "get_host_id_map",
        "operationId": "StorageServiceHostIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/load": {
      "get": {
        "description": "get load value",
        "summary": "get_load",
        "operationId": "StorageServiceLoadGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/load_map": {
      "get": {
        "description": "load value. Keys are IP addresses",
        "summary": "get_load_map",
        "operationId": "StorageServiceLoadMapGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/map_string_double"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/generation_number": {
      "get": {
        "description": "Return the generation value for this node.",
        "summary": "get_current_generation_number",
        "operationId": "StorageServiceGenerationNumberGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/natural_endpoints/{keyspace}": {
      "get": {
        "description": "This method returns the N endpoints that are responsible for storing the specified key i.e for replication. the endpoint responsible for this key",
        "summary": "get_natural_endpoints",
        "operationId": "StorageServiceNaturalEndpointsByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to query about"
          },
          {
            "name": "cf",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Column family name"
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "key for which we need to find the endpoint return value - the endpoint responsible for this key"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/snapshots": {
      "get": {
        "description": "Get the details of all the snapshot",
        "summary": "get_snapshot_details",
        "operationId": "StorageServiceSnapshotsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/snapshots"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Takes the snapshot for the given keyspaces. A snapshot name must be specified.",
        "summary": "take_snapshot",
        "operationId": "StorageServiceSnapshotsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "the tag given to the snapshot"
          },
          {
            "name": "kn",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated keyspaces name to snapshot"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "the column family to snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove the snapshot with the given name from the given keyspaces. If no tag is specified all snapshots will be removed",
        "summary": "del_snapshot",
        "operationId": "StorageServiceSnapshotsDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "the tag given to the snapshot"
          },
          {
            "name": "kn",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated keyspaces name to snapshot"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "an optional table name that its snapshot will be deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/snapshots/size/true": {
      "get": {
        "description": "Get the true size taken by all snapshots across all keyspaces.",
        "summary": "true_snapshots_size",
        "operationId": "StorageServiceSnapshotsSizeTrueGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/keyspace_compaction/{keyspace}": {
      "post": {
        "description": "Forces major compaction of a single keyspace",
        "summary": "force_keyspace_compaction",
        "operationId": "StorageServiceKeyspaceCompactionByKeyspacePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to query about"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated column family names"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/keyspace_cleanup/{keyspace}": {
      "post": {
        "description": "Trigger a cleanup of keys on a single keyspace",
        "summary": "force_keyspace_cleanup",
        "operationId": "StorageServiceKeyspaceCleanupByKeyspacePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to query about"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated column family names"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/keyspace_scrub/{keyspace}": {
      "get": {
        "description": "Scrub (deserialize + reserialize at the latest version, skipping bad rows if any) the given keyspace. If columnFamilies array is empty, all CFs are scrubbed. Scrubbed CFs will be snapshotted first, if disableSnapshot is false",
        "summary": "scrub",
        "operationId": "StorageServiceKeyspaceScrubByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to query about"
          },
          {
            "name": "disable_snapshot",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to true, disable snapshot"
          },
          {
            "name": "skip_corrupted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to true, skip corrupted"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated column family names"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/keyspace_upgrade_sstables/{keyspace}": {
      "get": {
        "description": "Rewrite all sstables to the latest version. Unlike scrub, it doesn't skip bad rows and do not snapshot sstables first.",
        "summary": "upgrade_sstables",
        "operationId": "StorageServiceKeyspaceUpgradeSstablesByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace"
          },
          {
            "name": "exclude_current_version",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to true exclude current version"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated column family names"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/keyspace_flush/{keyspace}": {
      "post": {
        "description": "Flush all memtables for the given column families, or all columnfamilies for the given keyspace if none are explicitly listed.",
        "summary": "force_keyspace_flush",
        "operationId": "StorageServiceKeyspaceFlushByKeyspacePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to flush"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated column family names"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/active_repair/": {
      "get": {
        "description": "Return an array with the ids of the currently active repairs",
        "summary": "get_active_repair_async",
        "operationId": "StorageServiceActiveRepairGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/repair_async/{keyspace}": {
      "post": {
        "description": "Invoke repair asynchronously. You can track repair progress by using the get supplying id",
        "summary": "repair_async",
        "operationId": "StorageServiceRepairAsyncByKeyspacePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace to repair"
          },
          {
            "name": "primaryRange",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If the value is the string 'true' with any capitalization, repair only the first range returned by the partitioner."
          },
          {
            "name": "parallelism",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Repair parallelism, can be 0 (sequential), 1 (parallel) or 2 (datacenter-aware)."
          },
          {
            "name": "incremental",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If the value is the string 'true' with any capitalization, perform incremental repair."
          },
          {
            "name": "jobThreads",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "An integer specifying the parallelism on each node."
          },
          {
            "name": "ranges",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "An explicit list of ranges to repair, overriding the default choice. Each range is expressed as token1:token2, and multiple ranges can be given as a comma separated list."
          },
          {
            "name": "startToken",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Token on which to begin repair"
          },
          {
            "name": "endToken",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Token on which to end repair"
          },
          {
            "name": "columnFamilies",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Which column families to repair in the given keyspace. Multiple columns families can be named separated by commas. If this option is missing, all column families in the keyspace are repaired."
          },
          {
            "name": "dataCenters",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Which data centers are to participate in this repair. Multiple data centers can be listed separated by commas."
          },
          {
            "name": "hosts",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Which hosts are to participate in this repair. Multiple hosts can be listed separated by commas."
          },
          {
            "name": "ignore_nodes",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Which hosts are to ignore in this repair. Multiple hosts can be listed separated by commas."
          },
          {
            "name": "trace",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If the value is the string 'true' with any capitalization, enable tracing of the repair."
          },
          {
            "name": "ranges_parallelism",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "An integer specifying the number of ranges to repair in parallel by user request. If this number is bigger than the max_repair_ranges_in_parallel calculated by Scylla core, the smaller one will be used."
          },
          {
            "name": "small_table_optimization",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If the value is the string 'true' with any capitalization, perform small table optimization. When this option is enabled, user can send the repair request to any of the nodes in the cluster. There is no need to send repair requests to multiple nodes. All token ranges for the table will be repaired automatically."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "Track already running repair progress",
        "summary": "repair_async_status",
        "operationId": "StorageServiceRepairAsyncByKeyspaceGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace repair is running on"
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The repair ID to check for status"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/repair_async_statusResponse"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/repair_status": {
      "get": {
        "description": "Query the repair status and return when the repair is finished or timeout",
        "summary": "storage_service_repair_status",
        "operationId": "StorageServiceRepairStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The repair ID to check for status"
          },
          {
            "name": "timeout",
            "description": "Seconds to wait before the query returns even if the repair is not finished. The value -1 or not providing this parameter means no timeout",
            "required": false,
            "type": "integer",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Repair status value",
            "schema": {
              "$ref": "#/definitions/repair_async_statusResponse"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/storage_service/force_terminate": {
      "post": {
        "description": "Force terminate all repair sessions",
        "summary": "force_terminate_all_repair_sessions",
        "operationId": "StorageServiceForceTerminatePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/force_terminate_repair": {
      "post": {
        "description": "Force terminate all repair sessions",
        "summary": "force_terminate_all_repair_sessions_new",
        "operationId": "StorageServiceForceTerminateRepairPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/decommission": {
      "post": {
        "description": "transfer this node's data to other machines and remove it from service.",
        "summary": "decommission",
        "operationId": "StorageServiceDecommissionPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/move": {
      "post": {
        "description": "This node will unload its data onto its neighbors, and bootstrap to the new token.",
        "summary": "move",
        "operationId": "StorageServiceMovePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "token to move this node to"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/remove_node": {
      "post": {
        "description": "Removes token (and all data associated with enpoint that had it) from the ring",
        "summary": "remove_node",
        "operationId": "StorageServiceRemoveNodePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Remove the node with host_id from the cluster"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/removal_status": {
      "get": {
        "description": "Get the status of a token removal.",
        "summary": "get_removal_status",
        "operationId": "StorageServiceRemovalStatusGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/force_remove_completion": {
      "post": {
        "description": "Force a remove operation to finish.",
        "summary": "force_remove_completion",
        "operationId": "StorageServiceForceRemoveCompletionPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/logging_level": {
      "post": {
        "description": "set the logging level at runtime<br> <br> If both classQualifer and level are empty/null, it will reload the configuration to reset.<br> If classQualifer is not empty but level is empty/null, it will set the level to null for the defined classQualifer<br> If level cannot be parsed, then the level will be defaulted to DEBUG<br> <br> The logback configuration should have < jmxConfigurator /> set",
        "summary": "set_logging_level",
        "operationId": "StorageServiceLoggingLevelPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "class_qualifier",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The logger's classQualifer"
          },
          {
            "name": "level",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The log level"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "get the runtime logging levels",
        "summary": "get_logging_levels",
        "operationId": "StorageServiceLoggingLevelGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/operation_mode": {
      "get": {
        "description": "Get the operational mode (leaving, joining, normal, decommissioned, client)",
        "summary": "get_operation_mode",
        "operationId": "StorageServiceOperationModeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/is_starting": {
      "get": {
        "description": "Returns whether the storage service is starting or not",
        "summary": "is_starting",
        "operationId": "StorageServiceIsStartingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/drain": {
      "get": {
        "description": "Get the progress of a drain operation",
        "summary": "get_drain_progress",
        "operationId": "StorageServiceDrainGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "makes node unavailable for writes, flushes memtables and replays commitlog",
        "summary": "drain",
        "operationId": "StorageServiceDrainPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/truncate/{keyspace}": {
      "post": {
        "description": "Truncates (deletes) the given columnFamily from the provided keyspace. Calling truncate results in actual deletion of all data in the cluster under the given columnFamily and it will fail unless all hosts are up. All data in the given column family will be deleted, but its definition will not be affected.",
        "summary": "truncate",
        "operationId": "StorageServiceTruncateByKeyspacePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Column family name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/keyspaces": {
      "get": {
        "description": "Get the keyspaces",
        "summary": "get_keyspaces",
        "operationId": "StorageServiceKeyspacesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "user",
              "non_local_strategy"
            ],
            "type": "string",
            "description": "Which keyspaces to return"
          },
          {
            "name": "replication",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "vnodes",
              "tablets"
            ],
            "type": "string",
            "description": "Filter keyspaces for the replication used: vnodes or tablets (default: all)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/update_snitch": {
      "post": {
        "description": "Change endpointsnitch class and dynamic-ness (and dynamic attributes) at runtime",
        "summary": "update_snitch",
        "operationId": "StorageServiceUpdateSnitchPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ep_snitch_class_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The canonical path name for a class implementing IEndpointSnitch"
          },
          {
            "name": "dynamic",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "When true dynamicsnitch is used"
          },
          {
            "name": "dynamic_update_interval",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "integer, in ms (default 100)"
          },
          {
            "name": "dynamic_reset_interval",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "integer, in ms (default 600,000)"
          },
          {
            "name": "dynamic_badness_threshold",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Dynamic badness threshold, (default 0.0)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/gossiping": {
      "delete": {
        "description": "allows a user to forcibly 'kill' a sick node",
        "summary": "stop_gossiping",
        "operationId": "StorageServiceGossipingDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "allows a user to recover a forcibly 'killed' node",
        "summary": "start_gossiping",
        "operationId": "StorageServiceGossipingPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "allows a user to see whether gossip is running or not",
        "summary": "is_gossip_running",
        "operationId": "StorageServiceGossipingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/stop_daemon": {
      "post": {
        "description": "allows a user to forcibly completely stop cassandra",
        "summary": "stop_daemon",
        "operationId": "StorageServiceStopDaemonPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/is_initialized": {
      "get": {
        "description": "Determine if gossip is enable",
        "summary": "is_initialized",
        "operationId": "StorageServiceIsInitializedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/rpc_server": {
      "delete": {
        "description": "Allows a user to disable thrift",
        "summary": "stop_rpc_server",
        "operationId": "StorageServiceRpcServerDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "allows a user to reenable thrift",
        "summary": "start_rpc_server",
        "operationId": "StorageServiceRpcServerPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "Determine if thrift is running",
        "summary": "is_rpc_server_running",
        "operationId": "StorageServiceRpcServerGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/native_transport": {
      "post": {
        "description": "Start native transport",
        "summary": "start_native_transport",
        "operationId": "StorageServiceNativeTransportPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "delete": {
        "description": "Stop native transport",
        "summary": "stop_native_transport",
        "operationId": "StorageServiceNativeTransportDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "Is native transport running",
        "summary": "is_native_transport_running",
        "operationId": "StorageServiceNativeTransportGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/join_ring": {
      "post": {
        "description": "Allows a node that have been started without joining the ring to join it",
        "summary": "join_ring",
        "operationId": "StorageServiceJoinRingPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "summary": "is_joined",
        "operationId": "StorageServiceJoinRingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/stream_throughput": {
      "post": {
        "description": "set stream throughput mb per sec",
        "summary": "set_stream_throughput_mb_per_sec",
        "operationId": "StorageServiceStreamThroughputPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Stream throughput"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "Get stream throughput mb per sec",
        "summary": "get_stream_throughput_mb_per_sec",
        "operationId": "StorageServiceStreamThroughputGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/compaction_throughput": {
      "get": {
        "description": "get compaction throughput mb per sec",
        "summary": "get_compaction_throughput_mb_per_sec",
        "operationId": "StorageServiceCompactionThroughputGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set compaction throughput mb per sec",
        "summary": "set_compaction_throughput_mb_per_sec",
        "operationId": "StorageServiceCompactionThroughputPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "compaction throughput"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/incremental_backups": {
      "get": {
        "description": "Check if incremental backup is enabled",
        "summary": "is_incremental_backups_enabled",
        "operationId": "StorageServiceIncrementalBackupsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "summary": "set_incremental_backups_enabled",
        "operationId": "StorageServiceIncrementalBackupsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "Set to true for incremental backup enabled"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/rebuild": {
      "post": {
        "description": "Initiate a process of streaming data for which we are responsible from other nodes. It is similar to bootstrap except meant to be used on a node which is already in the cluster (typically containing no data) as an alternative to running repair.",
        "summary": "rebuild",
        "operationId": "StorageServiceRebuildPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source_dc",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of DC from which to select sources for streaming or none to pick any node"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/bulk_load/{path}": {
      "post": {
        "description": "Starts a bulk load and blocks until it completes",
        "summary": "bulk_load",
        "operationId": "StorageServiceBulkLoadByPathPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Path to directory to load from"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/bulk_load_async/{path}": {
      "get": {
        "description": "Starts a bulk load asynchronously and returns the String representation of the planID for the new streaming session.",
        "summary": "bulk_load_async",
        "operationId": "StorageServiceBulkLoadAsyncByPathGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Path to directory to load from"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/reschedule_failed_deletions": {
      "post": {
        "description": "Reschedule failed deletions",
        "summary": "reschedule_failed_deletions",
        "operationId": "StorageServiceRescheduleFailedDeletionsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/sstables/{keyspace}": {
      "post": {
        "description": "Load new SSTables to the given keyspace/columnFamily",
        "summary": "load_new_ss_tables",
        "operationId": "StorageServiceSstablesByKeyspacePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace"
          },
          {
            "name": "cf",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Column family name"
          },
          {
            "name": "load_and_stream",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Load the sstables and stream to all replica nodes that owns the data"
          },
          {
            "name": "primary_replica_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Load the sstables and stream to primary replica node that owns the data. Repair is needed after the load and stream process"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/sample_key_range": {
      "get": {
        "description": "Return a List of Tokens representing a sample of keys across all ColumnFamilyStores.",
        "summary": "sample_key_range",
        "operationId": "StorageServiceSampleKeyRangeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/relocal_schema": {
      "post": {
        "description": "Reset local schema",
        "summary": "reset_local_schema",
        "operationId": "StorageServiceRelocalSchemaPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/trace_probability": {
      "post": {
        "description": "Enables/Disables tracing for the whole system. Only thrift requests can start tracing currently",
        "summary": "set_trace_probability",
        "operationId": "StorageServiceTraceProbabilityPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "probability",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "[0,1] will enable tracing on a partial number of requests with the provided probability. 0 will disable tracing and 1 will enable tracing for all requests (which mich severely cripple the system)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "Returns the configured tracing probability.",
        "summary": "get_trace_probability",
        "operationId": "StorageServiceTraceProbabilityGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/slow_query": {
      "post": {
        "description": "Set slow query parameter",
        "summary": "set_slow_query",
        "operationId": "StorageServiceSlowQueryPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "set it to true to enable, anything else to disable"
          },
          {
            "name": "ttl",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "TTL in seconds"
          },
          {
            "name": "threshold",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Slow query record threshold in microseconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "get": {
        "description": "Returns the slow query record configuration.",
        "summary": "get_slow_query_info",
        "operationId": "StorageServiceSlowQueryGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/slow_query_info"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/auto_compaction/{keyspace}": {
      "post": {
        "description": "Enable auto compaction",
        "summary": "enable_auto_compaction",
        "operationId": "StorageServiceAutoCompactionByKeyspacePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated column family names"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "delete": {
        "description": "Disable auto compaction",
        "summary": "disable_auto_compaction",
        "operationId": "StorageServiceAutoCompactionByKeyspaceDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace"
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma seperated column family names"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/deliver_hints": {
      "post": {
        "summary": "deliver_hints",
        "operationId": "StorageServiceDeliverHintsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The host name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/cluster_name": {
      "get": {
        "description": "Returns the name of the cluster",
        "summary": "get_cluster_name",
        "operationId": "StorageServiceClusterNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/partitioner_name": {
      "get": {
        "description": "Returns the cluster partitioner",
        "summary": "get_partitioner_name",
        "operationId": "StorageServicePartitionerNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/tombstone_warn_threshold": {
      "get": {
        "description": "Returns the threshold for warning of queries with many tombstones",
        "summary": "get_tombstone_warn_threshold",
        "operationId": "StorageServiceTombstoneWarnThresholdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Sets the threshold for warning queries with many tombstones",
        "summary": "set_tombstone_warn_threshold",
        "operationId": "StorageServiceTombstoneWarnThresholdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "debug_threshold",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "tombstone debug threshold"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/tombstone_failure_threshold": {
      "get": {
        "summary": "get_tombstone_failure_threshold",
        "operationId": "StorageServiceTombstoneFailureThresholdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "summary": "set_tombstone_failure_threshold",
        "operationId": "StorageServiceTombstoneFailureThresholdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tombstone_debug_threshold",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "tombstone debug threshold"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/batch_size_failure_threshold": {
      "get": {
        "description": "Returns the threshold for rejecting queries due to a large batch size",
        "summary": "get_batch_size_failure_threshold",
        "operationId": "StorageServiceBatchSizeFailureThresholdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Sets the threshold for rejecting queries due to a large batch size",
        "summary": "set_batch_size_failure_threshold",
        "operationId": "StorageServiceBatchSizeFailureThresholdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "threshold",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "batch size debug threshold"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/hinted_handoff": {
      "post": {
        "description": "Sets the hinted handoff throttle in kb per second, per delivery thread",
        "summary": "set_hinted_handoff_throttle_in_kb",
        "operationId": "StorageServiceHintedHandoffPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "throttle",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "throttle in kb"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/metrics/load": {
      "get": {
        "description": "Get load",
        "summary": "get_metrics_load",
        "operationId": "StorageServiceMetricsLoadGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/metrics/exceptions": {
      "get": {
        "description": "Get exceptions",
        "summary": "get_exceptions",
        "operationId": "StorageServiceMetricsExceptionsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/metrics/hints_in_progress": {
      "get": {
        "description": "Get total hints in progress",
        "summary": "get_total_hints_in_progress",
        "operationId": "StorageServiceMetricsHintsInProgressGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/metrics/total_hints": {
      "get": {
        "description": "Get total hints",
        "summary": "get_total_hints1",
        "operationId": "StorageServiceMetricsTotalHintsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/view_build_statuses/{keyspace}/{view}": {
      "get": {
        "description": "Gets the progress of a materialized view build",
        "summary": "view_build_statuses",
        "operationId": "StorageServiceViewBuildStatusesByKeyspaceAndViewGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyspace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The keyspace"
          },
          {
            "name": "view",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "View name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mapper"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/storage_service/tablets/balancing": {
      "post": {
        "description": "Controls tablet load-balancing",
        "summary": "tablet_balancing_enable",
        "operationId": "StorageServiceTabletsBalancingPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "When set to false, tablet load balancing is disabled"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/stream_manager/": {
      "get": {
        "description": "Returns the current state of all ongoing streams.",
        "summary": "get_current_streams",
        "operationId": "StreamManagerGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/stream_state"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/stream_manager/metrics/outbound": {
      "get": {
        "description": "Get number of active outbound streams",
        "summary": "get_all_active_streams_outbound",
        "operationId": "StreamManagerMetricsOutboundGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/stream_manager/metrics/incoming/{peer}": {
      "get": {
        "description": "Get total incoming bytes",
        "summary": "get_total_incoming_bytes",
        "operationId": "StreamManagerMetricsIncomingByPeerGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "peer",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The stream peer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/stream_manager/metrics/incoming": {
      "get": {
        "description": "Get all total incoming bytes",
        "summary": "get_all_total_incoming_bytes",
        "operationId": "StreamManagerMetricsIncomingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/stream_manager/metrics/outgoing/{peer}": {
      "get": {
        "description": "Get total outgoing bytes",
        "summary": "get_total_outgoing_bytes",
        "operationId": "StreamManagerMetricsOutgoingByPeerGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "peer",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The stream peer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/stream_manager/metrics/outgoing": {
      "get": {
        "description": "Get all total outgoing bytes",
        "summary": "get_all_total_outgoing_bytes",
        "operationId": "StreamManagerMetricsOutgoingGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/system/logger": {
      "get": {
        "description": "Get all logger names",
        "summary": "get_all_logger_names",
        "operationId": "SystemLoggerGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set all logger level",
        "summary": "set_all_logger_level",
        "operationId": "SystemLoggerPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "required": true,
            "enum": [
              "error",
              "warn",
              "info",
              "debug",
              "trace"
            ],
            "type": "string",
            "description": "The new log level"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    },
    "/system/logger/{name}": {
      "get": {
        "description": "Get logger level",
        "summary": "get_logger_level",
        "operationId": "SystemLoggerByNameGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The logger to query about"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Set logger level",
        "summary": "set_logger_level",
        "operationId": "SystemLoggerByNamePost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The logger to query about"
          },
          {
            "name": "level",
            "in": "query",
            "required": true,
            "enum": [
              "error",
              "warn",
              "info",
              "debug",
              "trace"
            ],
            "type": "string",
            "description": "The new log level"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "default": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": []
      }
    }
  },
  "definitions": {
    "type_instance_id": {
      "title": "type_instance_id",
      "description": "A type instance ID",
      "type": "object",
      "properties": {
        "plugin": {
          "description": "The plugin ID",
          "type": "string"
        },
        "plugin_instance": {
          "description": "The plugin instance",
          "type": "string"
        },
        "type": {
          "description": "The plugin type",
          "type": "string"
        },
        "type_instance": {
          "description": "The plugin type instance",
          "type": "string"
        }
      }
    },
    "collectd_value": {
      "title": "collectd_value",
      "description": "Holds a collectd value",
      "type": "object",
      "properties": {
        "values": {
          "description": "An array of values",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "collectd_metric_status": {
      "title": "collectd_metric_status",
      "description": "Holds a collectd id and an enable flag",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/type_instance_id"
        },
        "enable": {
          "description": "Is the metric enabled",
          "type": "boolean"
        }
      }
    },
    "mapper": {
      "title": "mapper",
      "description": "A key value mapping",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key",
          "type": "string"
        },
        "value": {
          "description": "The value",
          "type": "string"
        }
      }
    },
    "column_family_info": {
      "title": "column_family_info",
      "description": "Information about column family",
      "type": "object",
      "properties": {
        "ks": {
          "description": "The Keyspace",
          "type": "string"
        },
        "cf": {
          "description": "The column family",
          "type": "string"
        },
        "type": {
          "description": "The column family type",
          "type": "string"
        }
      }
    },
    "row_merged": {
      "title": "row_merged",
      "description": "A row merged information",
      "type": "object",
      "properties": {
        "key": {
          "description": "The number of sstable",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "The number or row compacted",
          "type": "object"
        }
      }
    },
    "compaction_info": {
      "title": "compaction_info",
      "description": "A key value mapping",
      "type": "object",
      "properties": {
        "operation_type": {
          "description": "The operation type",
          "type": "string"
        },
        "completed": {
          "description": "The current completed",
          "type": "object"
        },
        "total": {
          "description": "The total to compact",
          "type": "object"
        },
        "unit": {
          "description": "The compacted unit",
          "type": "string"
        }
      }
    },
    "summary": {
      "title": "summary",
      "description": "A compaction summary object",
      "type": "object",
      "properties": {
        "id": {
          "description": "The UUID",
          "type": "string"
        },
        "ks": {
          "description": "The keyspace name",
          "type": "string"
        },
        "cf": {
          "description": "The column family name",
          "type": "string"
        },
        "completed": {
          "description": "The number of units completed",
          "type": "object"
        },
        "total": {
          "description": "The total number of units",
          "type": "object"
        },
        "task_type": {
          "description": "The task compaction type",
          "type": "string"
        },
        "unit": {
          "description": "The units being used",
          "type": "string"
        }
      }
    },
    "history": {
      "title": "history",
      "description": "Compaction history information",
      "type": "object",
      "properties": {
        "id": {
          "description": "The UUID",
          "type": "string"
        },
        "cf": {
          "description": "The column family name",
          "type": "string"
        },
        "ks": {
          "description": "The keyspace name",
          "type": "string"
        },
        "compacted_at": {
          "description": "The time of compaction",
          "type": "object"
        },
        "bytes_in": {
          "description": "Bytes in",
          "type": "object"
        },
        "bytes_out": {
          "description": "Bytes out",
          "type": "object"
        },
        "rows_merged": {
          "description": "The merged rows",
          "type": "array",
          "items": {
            "$ref": "#/definitions/row_merged"
          }
        }
      }
    },
    "endpoint_state": {
      "title": "endpoint_state",
      "description": "Holds an endpoint state",
      "type": "object",
      "properties": {
        "addrs": {
          "description": "The endpoint address",
          "type": "string"
        },
        "generation": {
          "description": "The heart beat generation",
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "description": "The heart beat version",
          "type": "integer",
          "format": "int32"
        },
        "update_time": {
          "description": "The update timestamp",
          "type": "object"
        },
        "is_alive": {
          "description": "Is the endpoint alive",
          "type": "boolean"
        },
        "application_state": {
          "description": "Is the endpoint alive",
          "type": "array",
          "items": {
            "$ref": "#/definitions/version_value"
          }
        }
      }
    },
    "version_value": {
      "title": "version_value",
      "description": "Holds a version value for an application state",
      "type": "object",
      "properties": {
        "application_state": {
          "description": "The application state enum index",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "The version value",
          "type": "string"
        },
        "version": {
          "description": "The application state version",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "endpoint_phi_value": {
      "title": "endpoint_phi_value",
      "description": "Holds phi value for a single end point",
      "type": "object",
      "properties": {
        "phi": {
          "description": "Phi value",
          "type": "object"
        },
        "endpoint": {
          "description": "end point address",
          "type": "string"
        }
      }
    },
    "message_counter": {
      "title": "message_counter",
      "description": "Holds command counters",
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "verb_counter": {
      "title": "verb_counter",
      "description": "Holds verb counters",
      "type": "object",
      "properties": {
        "count": {
          "type": "object"
        },
        "verb": {
          "$ref": "#/definitions/Verb"
        }
      }
    },
    "mapper_list": {
      "title": "mapper_list",
      "description": "Holds a key value which is a list",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key",
          "type": "string"
        },
        "value": {
          "description": "The value",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "map_string_double": {
      "title": "map_string_double",
      "description": "A key value mapping between a string and a double",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key",
          "type": "string"
        },
        "value": {
          "description": "The value",
          "type": "object"
        }
      }
    },
    "maplist_mapper": {
      "title": "maplist_mapper",
      "description": "A key value mapping, where key and value are list",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "description": "The value",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "snapshot": {
      "title": "snapshot",
      "description": "Snapshot detail",
      "type": "object",
      "properties": {
        "ks": {
          "description": "The key space snapshot key",
          "type": "string"
        },
        "cf": {
          "description": "The column family",
          "type": "string"
        },
        "total": {
          "description": "The total snapshot size",
          "type": "object"
        },
        "live": {
          "description": "The live snapshot size",
          "type": "object"
        }
      }
    },
    "snapshots": {
      "title": "snapshots",
      "description": "List of Snapshot detail",
      "type": "object",
      "properties": {
        "key": {
          "description": "The snapshot key",
          "type": "string"
        },
        "value": {
          "description": "The column family",
          "type": "array",
          "items": {
            "$ref": "#/definitions/snapshot"
          }
        }
      }
    },
    "slow_query_info": {
      "title": "slow_query_info",
      "description": "Slow query triggering information",
      "type": "object",
      "properties": {
        "enable": {
          "description": "Is slow query logging enable or disable",
          "type": "boolean"
        },
        "ttl": {
          "description": "The slow query TTL in seconds",
          "type": "object"
        },
        "threshold": {
          "description": "The slow query logging threshold in microseconds. Queries that takes longer, will be logged",
          "type": "object"
        }
      }
    },
    "endpoint_detail": {
      "title": "endpoint_detail",
      "description": "Endpoint detail",
      "type": "object",
      "properties": {
        "host": {
          "description": "The endpoint host",
          "type": "string"
        },
        "datacenter": {
          "description": "The endpoint datacenter",
          "type": "string"
        },
        "rack": {
          "description": "The endpoint rack",
          "type": "string"
        }
      }
    },
    "token_range": {
      "title": "token_range",
      "description": "Endpoint range information",
      "type": "object",
      "properties": {
        "start_token": {
          "description": "The range start token",
          "type": "string"
        },
        "end_token": {
          "description": "The range start token",
          "type": "string"
        },
        "endpoints": {
          "description": "The endpoints",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rpc_endpoints": {
          "description": "The rpc endpoints",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "endpoint_details": {
          "description": "The endpoint details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/endpoint_detail"
          }
        }
      }
    },
    "stream_state": {
      "title": "stream_state",
      "description": "Current snapshot of streaming progress",
      "type": "object",
      "properties": {
        "plan_id": {
          "description": "Plan UUID",
          "type": "string"
        },
        "description": {
          "description": "The stream description",
          "type": "string"
        },
        "sessions": {
          "description": "The sessions info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream_info"
          }
        }
      }
    },
    "stream_info": {
      "title": "stream_info",
      "description": "Stream session info",
      "type": "object",
      "properties": {
        "peer": {
          "description": "The peer",
          "type": "string"
        },
        "session_index": {
          "description": "The session index",
          "type": "integer",
          "format": "int32"
        },
        "connecting": {
          "type": "string"
        },
        "receiving_summaries": {
          "description": "Receiving summaries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream_summary"
          }
        },
        "sending_summaries": {
          "description": "Sending summaries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream_summary"
          }
        },
        "state": {
          "$ref": "#/definitions/State"
        },
        "receiving_files": {
          "description": "Receiving files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/progress_info_mapper"
          }
        },
        "sending_files": {
          "description": "Sending files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/progress_info_mapper"
          }
        }
      }
    },
    "stream_summary": {
      "title": "stream_summary",
      "description": "Stream summary info",
      "type": "object",
      "properties": {
        "cf_id": {
          "description": "The ID",
          "type": "string"
        },
        "files": {
          "description": "Number of files to transfer. Can be 0 if nothing to transfer for some streaming request.",
          "type": "integer",
          "format": "int32"
        },
        "total_size": {
          "type": "object"
        }
      }
    },
    "progress_info_mapper": {
      "title": "progress_info_mapper",
      "description": "A mapping between file and its progress info",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/progress_info"
        }
      }
    },
    "progress_info": {
      "title": "progress_info",
      "description": "File transfer progress",
      "type": "object",
      "properties": {
        "peer": {
          "description": "The peer address",
          "type": "string"
        },
        "session_index": {
          "description": "The session index",
          "type": "integer",
          "format": "int32"
        },
        "file_name": {
          "description": "The file name",
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/Direction"
        },
        "current_bytes": {
          "description": "The current bytes",
          "type": "object"
        },
        "total_bytes": {
          "description": "The total bytes",
          "type": "object"
        }
      }
    },
    "histogram": {
      "title": "histogram",
      "description": "A histogram values",
      "type": "object",
      "properties": {
        "count": {
          "description": "Total count so far",
          "type": "object"
        },
        "sum": {
          "description": "Total sum so far",
          "type": "object"
        },
        "min": {
          "description": "The min so far",
          "type": "object"
        },
        "max": {
          "description": "The max so far",
          "type": "object"
        },
        "variance": {
          "description": "The variance",
          "type": "object"
        },
        "mean": {
          "description": "The mean",
          "type": "object"
        },
        "sample": {
          "description": "A sample containing the last n elements",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "estimated_histogram": {
      "title": "estimated_histogram",
      "description": "An estimated histogram values",
      "type": "object",
      "properties": {
        "buckets": {
          "description": "The histogram buckets",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "bucket_offsets": {
          "description": "The series of values to which the counts in `buckets` correspond",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "rate_moving_average": {
      "title": "rate_moving_average",
      "description": "A meter metric which measures mean throughput and one, five, and fifteen-minute exponentially-weighted moving average throughputs",
      "type": "object",
      "properties": {
        "rates": {
          "description": "One, five and fifteen mintues rates",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "mean_rate": {
          "description": "The mean rate from startup",
          "type": "object"
        },
        "count": {
          "description": "Total number of events from startup",
          "type": "object"
        }
      }
    },
    "rate_moving_average_and_histogram": {
      "title": "rate_moving_average_and_histogram",
      "description": "A timer metric which aggregates timing durations and provides duration statistics, plus throughput statistics",
      "type": "object",
      "properties": {
        "meter": {
          "$ref": "#/definitions/rate_moving_average"
        },
        "hist": {
          "$ref": "#/definitions/histogram"
        }
      }
    },
    "Direction": {
      "title": "Direction",
      "description": "The file name",
      "example": "OUT",
      "type": "string",
      "enum": [
        "OUT",
        "IN"
      ]
    },
    "level": {
      "title": "level",
      "example": "error",
      "type": "string",
      "enum": [
        "error",
        "warn",
        "info",
        "debug",
        "trace"
      ]
    },
    "repair_async_statusResponse": {
      "title": "repair_async_statusResponse",
      "example": "RUNNING",
      "type": "string",
      "enum": [
        "RUNNING",
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "State": {
      "title": "State",
      "description": "Current session state",
      "example": "INITIALIZED",
      "type": "string",
      "enum": [
        "INITIALIZED",
        "PREPARING",
        "STREAMING",
        "WAIT_COMPLETE",
        "COMPLETE",
        "FAILED"
      ]
    },
    "type": {
      "title": "type",
      "example": "all",
      "type": "string",
      "enum": [
        "all",
        "user",
        "non_local_strategy"
      ]
    },
    "Verb": {
      "title": "Verb",
      "example": "CLIENT_ID",
      "type": "string",
      "enum": [
        "CLIENT_ID",
        "MUTATION",
        "MUTATION_DONE",
        "READ_DATA",
        "READ_MUTATION_DATA",
        "READ_DIGEST",
        "GOSSIP_ECHO",
        "GOSSIP_DIGEST_SYN",
        "GOSSIP_DIGEST_ACK2",
        "GOSSIP_SHUTDOWN",
        "DEFINITIONS_UPDATE",
        "TRUNCATE",
        "REPLICATION_FINISHED",
        "MIGRATION_REQUEST",
        "PREPARE_MESSAGE",
        "PREPARE_DONE_MESSAGE",
        "STREAM_MUTATION",
        "STREAM_MUTATION_DONE",
        "COMPLETE_MESSAGE",
        "REPAIR_CHECKSUM_RANGE",
        "GET_SCHEMA_VERSION"
      ]
    },
    "ErrorModel": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "code": {
          "type": "integer"
        }
      }
    }
  },
  "tags": []
}
