// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskStatus task_status
//
// # A task status object
//
// swagger:model task_status
type TaskStatus struct {

	// Task identities of children of this task
	ChildrenIds []*TaskIdentity `json:"children_ids"`

	// The end time of the task (unspecified when the task is not completed)
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// Task-specific entity description
	Entity string `json:"entity,omitempty"`

	// Error string, if the task failed
	Error string `json:"error,omitempty"`

	// The uuid of the task
	ID string `json:"id,omitempty"`

	// Boolean flag indicating whether the task can be aborted
	IsAbortable bool `json:"is_abortable,omitempty"`

	// The keyspace the task is working on (if applicable)
	Keyspace string `json:"keyspace,omitempty"`

	// The kind of a task
	// Enum: [node cluster]
	Kind string `json:"kind,omitempty"`

	// The uuid of the parent task
	ParentID string `json:"parent_id,omitempty"`

	// The number of units completed so far
	ProgressCompleted float64 `json:"progress_completed,omitempty"`

	// The total number of units to complete for the task
	ProgressTotal float64 `json:"progress_total,omitempty"`

	// A description of the progress units
	ProgressUnits string `json:"progress_units,omitempty"`

	// The scope of the task
	Scope string `json:"scope,omitempty"`

	// The running sequence number of the task
	SequenceNumber int64 `json:"sequence_number,omitempty"`

	// The number of a shard the task is running on
	Shard int64 `json:"shard,omitempty"`

	// The start time of the task
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// The state of the task
	// Enum: [created running done failed]
	State string `json:"state,omitempty"`

	// The table the task is working on (if applicable)
	Table string `json:"table,omitempty"`

	// The description of the task
	Type string `json:"type,omitempty"`
}

// Validate validates this task status
func (m *TaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildrenIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskStatus) validateChildrenIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ChildrenIds) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildrenIds); i++ {
		if swag.IsZero(m.ChildrenIds[i]) { // not required
			continue
		}

		if m.ChildrenIds[i] != nil {
			if err := m.ChildrenIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children_ids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskStatus) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var taskStatusTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["node","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStatusTypeKindPropEnum = append(taskStatusTypeKindPropEnum, v)
	}
}

const (

	// TaskStatusKindNode captures enum value "node"
	TaskStatusKindNode string = "node"

	// TaskStatusKindCluster captures enum value "cluster"
	TaskStatusKindCluster string = "cluster"
)

// prop value enum
func (m *TaskStatus) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskStatusTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskStatus) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *TaskStatus) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var taskStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","running","done","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStatusTypeStatePropEnum = append(taskStatusTypeStatePropEnum, v)
	}
}

const (

	// TaskStatusStateCreated captures enum value "created"
	TaskStatusStateCreated string = "created"

	// TaskStatusStateRunning captures enum value "running"
	TaskStatusStateRunning string = "running"

	// TaskStatusStateDone captures enum value "done"
	TaskStatusStateDone string = "done"

	// TaskStatusStateFailed captures enum value "failed"
	TaskStatusStateFailed string = "failed"
)

// prop value enum
func (m *TaskStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskStatus) UnmarshalBinary(b []byte) error {
	var res TaskStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
