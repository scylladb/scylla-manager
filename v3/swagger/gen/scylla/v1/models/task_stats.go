// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskStats task_stats
//
// # A task statistics object
//
// swagger:model task_stats
type TaskStats struct {

	// Task-specific entity description
	Entity string `json:"entity,omitempty"`

	// The keyspace the task is working on (if applicable)
	Keyspace string `json:"keyspace,omitempty"`

	// The kind of a task
	// Enum: [node cluster]
	Kind string `json:"kind,omitempty"`

	// The scope of the task
	Scope string `json:"scope,omitempty"`

	// The running sequence number of the task
	SequenceNumber int64 `json:"sequence_number,omitempty"`

	// The state of a task
	// Enum: [created running done failed]
	State string `json:"state,omitempty"`

	// The table the task is working on (if applicable)
	Table string `json:"table,omitempty"`

	// The uuid of a task
	TaskID string `json:"task_id,omitempty"`

	// The description of the task
	Type string `json:"type,omitempty"`
}

// Validate validates this task stats
func (m *TaskStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskStatsTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["node","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStatsTypeKindPropEnum = append(taskStatsTypeKindPropEnum, v)
	}
}

const (

	// TaskStatsKindNode captures enum value "node"
	TaskStatsKindNode string = "node"

	// TaskStatsKindCluster captures enum value "cluster"
	TaskStatsKindCluster string = "cluster"
)

// prop value enum
func (m *TaskStats) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskStatsTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskStats) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

var taskStatsTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","running","done","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStatsTypeStatePropEnum = append(taskStatsTypeStatePropEnum, v)
	}
}

const (

	// TaskStatsStateCreated captures enum value "created"
	TaskStatsStateCreated string = "created"

	// TaskStatsStateRunning captures enum value "running"
	TaskStatsStateRunning string = "running"

	// TaskStatsStateDone captures enum value "done"
	TaskStatsStateDone string = "done"

	// TaskStatsStateFailed captures enum value "failed"
	TaskStatsStateFailed string = "failed"
)

// prop value enum
func (m *TaskStats) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskStatsTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskStats) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskStats) UnmarshalBinary(b []byte) error {
	var res TaskStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
