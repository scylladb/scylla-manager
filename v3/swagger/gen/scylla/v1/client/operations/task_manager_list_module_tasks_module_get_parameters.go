// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTaskManagerListModuleTasksModuleGetParams creates a new TaskManagerListModuleTasksModuleGetParams object
// with the default values initialized.
func NewTaskManagerListModuleTasksModuleGetParams() *TaskManagerListModuleTasksModuleGetParams {
	var ()
	return &TaskManagerListModuleTasksModuleGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTaskManagerListModuleTasksModuleGetParamsWithTimeout creates a new TaskManagerListModuleTasksModuleGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTaskManagerListModuleTasksModuleGetParamsWithTimeout(timeout time.Duration) *TaskManagerListModuleTasksModuleGetParams {
	var ()
	return &TaskManagerListModuleTasksModuleGetParams{

		timeout: timeout,
	}
}

// NewTaskManagerListModuleTasksModuleGetParamsWithContext creates a new TaskManagerListModuleTasksModuleGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewTaskManagerListModuleTasksModuleGetParamsWithContext(ctx context.Context) *TaskManagerListModuleTasksModuleGetParams {
	var ()
	return &TaskManagerListModuleTasksModuleGetParams{

		Context: ctx,
	}
}

// NewTaskManagerListModuleTasksModuleGetParamsWithHTTPClient creates a new TaskManagerListModuleTasksModuleGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTaskManagerListModuleTasksModuleGetParamsWithHTTPClient(client *http.Client) *TaskManagerListModuleTasksModuleGetParams {
	var ()
	return &TaskManagerListModuleTasksModuleGetParams{
		HTTPClient: client,
	}
}

/*
TaskManagerListModuleTasksModuleGetParams contains all the parameters to send to the API endpoint
for the task manager list module tasks module get operation typically these are written to a http.Request
*/
type TaskManagerListModuleTasksModuleGetParams struct {

	/*Internal
	  Boolean flag indicating whether internal tasks should be shown (false by default)

	*/
	Internal *bool
	/*Keyspace
	  The keyspace to query about

	*/
	Keyspace *string
	/*Module
	  The module to query about

	*/
	Module string
	/*Table
	  The table to query about

	*/
	Table *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) WithTimeout(timeout time.Duration) *TaskManagerListModuleTasksModuleGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) WithContext(ctx context.Context) *TaskManagerListModuleTasksModuleGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) WithHTTPClient(client *http.Client) *TaskManagerListModuleTasksModuleGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInternal adds the internal to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) WithInternal(internal *bool) *TaskManagerListModuleTasksModuleGetParams {
	o.SetInternal(internal)
	return o
}

// SetInternal adds the internal to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) SetInternal(internal *bool) {
	o.Internal = internal
}

// WithKeyspace adds the keyspace to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) WithKeyspace(keyspace *string) *TaskManagerListModuleTasksModuleGetParams {
	o.SetKeyspace(keyspace)
	return o
}

// SetKeyspace adds the keyspace to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) SetKeyspace(keyspace *string) {
	o.Keyspace = keyspace
}

// WithModule adds the module to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) WithModule(module string) *TaskManagerListModuleTasksModuleGetParams {
	o.SetModule(module)
	return o
}

// SetModule adds the module to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) SetModule(module string) {
	o.Module = module
}

// WithTable adds the table to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) WithTable(table *string) *TaskManagerListModuleTasksModuleGetParams {
	o.SetTable(table)
	return o
}

// SetTable adds the table to the task manager list module tasks module get params
func (o *TaskManagerListModuleTasksModuleGetParams) SetTable(table *string) {
	o.Table = table
}

// WriteToRequest writes these params to a swagger request
func (o *TaskManagerListModuleTasksModuleGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Internal != nil {

		// query param internal
		var qrInternal bool
		if o.Internal != nil {
			qrInternal = *o.Internal
		}
		qInternal := swag.FormatBool(qrInternal)
		if qInternal != "" {
			if err := r.SetQueryParam("internal", qInternal); err != nil {
				return err
			}
		}

	}

	if o.Keyspace != nil {

		// query param keyspace
		var qrKeyspace string
		if o.Keyspace != nil {
			qrKeyspace = *o.Keyspace
		}
		qKeyspace := qrKeyspace
		if qKeyspace != "" {
			if err := r.SetQueryParam("keyspace", qKeyspace); err != nil {
				return err
			}
		}

	}

	// path param module
	if err := r.SetPathParam("module", o.Module); err != nil {
		return err
	}

	if o.Table != nil {

		// query param table
		var qrTable string
		if o.Table != nil {
			qrTable = *o.Table
		}
		qTable := qrTable
		if qTable != "" {
			if err := r.SetQueryParam("table", qTable); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
