// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRaftReadBarrierPostParams creates a new RaftReadBarrierPostParams object
// with the default values initialized.
func NewRaftReadBarrierPostParams() *RaftReadBarrierPostParams {
	var ()
	return &RaftReadBarrierPostParams{

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewRaftReadBarrierPostParamsWithTimeout creates a new RaftReadBarrierPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRaftReadBarrierPostParamsWithTimeout(timeout time.Duration) *RaftReadBarrierPostParams {
	var ()
	return &RaftReadBarrierPostParams{

		requestTimeout: timeout,
	}
}

// NewRaftReadBarrierPostParamsWithContext creates a new RaftReadBarrierPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewRaftReadBarrierPostParamsWithContext(ctx context.Context) *RaftReadBarrierPostParams {
	var ()
	return &RaftReadBarrierPostParams{

		Context: ctx,
	}
}

// NewRaftReadBarrierPostParamsWithHTTPClient creates a new RaftReadBarrierPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRaftReadBarrierPostParamsWithHTTPClient(client *http.Client) *RaftReadBarrierPostParams {
	var ()
	return &RaftReadBarrierPostParams{
		HTTPClient: client,
	}
}

/*
RaftReadBarrierPostParams contains all the parameters to send to the API endpoint
for the raft read barrier post operation typically these are written to a http.Request
*/
type RaftReadBarrierPostParams struct {

	/*GroupID
	  The ID of the group. When absent, group0 is used.

	*/
	GroupID *string
	/*Timeout
	  Timeout in seconds after which the endpoint returns a failure. If not provided, 60s is used.

	*/
	Timeout *int64

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the raft read barrier post params
func (o *RaftReadBarrierPostParams) WithRequestTimeout(timeout time.Duration) *RaftReadBarrierPostParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the raft read barrier post params
func (o *RaftReadBarrierPostParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the raft read barrier post params
func (o *RaftReadBarrierPostParams) WithContext(ctx context.Context) *RaftReadBarrierPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the raft read barrier post params
func (o *RaftReadBarrierPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the raft read barrier post params
func (o *RaftReadBarrierPostParams) WithHTTPClient(client *http.Client) *RaftReadBarrierPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the raft read barrier post params
func (o *RaftReadBarrierPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupID adds the groupID to the raft read barrier post params
func (o *RaftReadBarrierPostParams) WithGroupID(groupID *string) *RaftReadBarrierPostParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the raft read barrier post params
func (o *RaftReadBarrierPostParams) SetGroupID(groupID *string) {
	o.GroupID = groupID
}

// WithTimeout adds the timeout to the raft read barrier post params
func (o *RaftReadBarrierPostParams) WithTimeout(timeout *int64) *RaftReadBarrierPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the raft read barrier post params
func (o *RaftReadBarrierPostParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *RaftReadBarrierPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.GroupID != nil {

		// query param group_id
		var qrGroupID string
		if o.GroupID != nil {
			qrGroupID = *o.GroupID
		}
		qGroupID := qrGroupID
		if qGroupID != "" {
			if err := r.SetQueryParam("group_id", qGroupID); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
