// Copyright (C) 2017 ScyllaDB

//go:build ignore

package main

import (
	"bytes"
	"cmp"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"slices"
	"strings"

	"github.com/rclone/rclone/fs"
	"github.com/stoewer/go-strcase"

	// Import rclone backeds to run the init code that puts options into the
	// fs.Resistry.
	_ "github.com/rclone/rclone/backend/azureblob"
	_ "github.com/rclone/rclone/backend/googlecloudstorage"
	_ "github.com/rclone/rclone/backend/local"
	_ "github.com/rclone/rclone/backend/s3"
)

var rclonePkgName = map[string]string{
	"azureblob":            "Azure",
	"google cloud storage": "GCS",
	"local":                "Local",
	"s3":                   "S3",
}

func main() {
	b := &bytes.Buffer{}
	writeHeader(b)
	sortedRegistry := slices.Clone(fs.Registry)
	slices.SortFunc(sortedRegistry, func(a, b *fs.RegInfo) int { return cmp.Compare(a.Name, b.Name) })
	for _, r := range sortedRegistry {
		// Ignore crypt that is a transitive dependency.
		if r.Name == "crypt" {
			continue
		}
		writeOptionsStruct(b, r)
	}
	f, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal("format source failed", err)
	}
	if err := os.WriteFile("options_gen.go", f, 0); err != nil {
		log.Fatal("write failed", err)
	}
}

var header = `// Code generated by generate_options.go. DO NOT EDIT.

package rclone`

func writeHeader(w io.Writer) {
	fmt.Fprintln(w, header)
}

var structHeader = `// %s is a clone rclone file system Options designed for inclusion
// in Scylla Manager Agent config, and YAML parsing.
type %s struct {
`

func writeOptionsStruct(w io.Writer, reg *fs.RegInfo) {
	fmt.Fprintf(w, structHeader, structName(reg.Name), structName(reg.Name))
	lastOpt := ""
	for _, o := range reg.Options {
		if o.Name == lastOpt {
			continue
		}
		lastOpt = o.Name
		fmt.Fprint(w, prefix(o.Help, "// "))
		fmt.Fprintln(w, upperCamelCase(o.Name), "string", tag(o.Name))
	}
	fmt.Fprintln(w, "}")
}

func structName(name string) string {
	v, ok := rclonePkgName[name]
	if !ok {
		log.Fatal("add backend", name, "to rclonePkgName")
	}
	return v + "Options"
}

func prefix(text, prefix string) string {
	b := strings.Builder{}
	for _, line := range strings.Split(text, "\n") {
		b.WriteString(prefix)
		b.WriteString(line)
		b.WriteString("\n")
	}
	return b.String()
}

func upperCamelCase(name string) string {
	name = strcase.UpperCamelCase(name)
	if strings.HasSuffix(name, "Id") {
		name = name[:len(name)-2] + "ID"
	}
	return name
}

func tag(name string) string {
	return "`yaml:\"" + name + "\"`"
}
