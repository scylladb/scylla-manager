// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const getRepairRun = `-- name: GetRepairRun :many
SELECT cluster_id, task_id, id, dc, end_time, host, intensity, parallel, prev_id, start_time FROM repair_run
WHERE cluster_id = ? AND task_id = ? AND id = ?
`

type GetRepairRunParams struct {
	ClusterID string
	TaskID    string
	ID        string
}

func (q *Queries) GetRepairRun(ctx context.Context, arg GetRepairRunParams) ([]RepairRun, error) {
	rows, err := q.db.QueryContext(ctx, getRepairRun, arg.ClusterID, arg.TaskID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RepairRun
	for rows.Next() {
		var i RepairRun
		if err := rows.Scan(
			&i.ClusterID,
			&i.TaskID,
			&i.ID,
			&i.Dc,
			&i.EndTime,
			&i.Host,
			&i.Intensity,
			&i.Parallel,
			&i.PrevID,
			&i.StartTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRepairRunProgress = `-- name: GetRepairRunProgress :many
SELECT cluster_id, task_id, run_id, host, keyspace_name, table_name, completed_at, duration, duration_started_at, error, size, started_at, success, token_ranges FROM repair_run_progress
WHERE cluster_id = ? AND task_id = ? AND run_id = ?
`

type GetRepairRunProgressParams struct {
	ClusterID string
	TaskID    string
	RunID     string
}

func (q *Queries) GetRepairRunProgress(ctx context.Context, arg GetRepairRunProgressParams) ([]RepairRunProgress, error) {
	rows, err := q.db.QueryContext(ctx, getRepairRunProgress, arg.ClusterID, arg.TaskID, arg.RunID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RepairRunProgress
	for rows.Next() {
		var i RepairRunProgress
		if err := rows.Scan(
			&i.ClusterID,
			&i.TaskID,
			&i.RunID,
			&i.Host,
			&i.KeyspaceName,
			&i.TableName,
			&i.CompletedAt,
			&i.Duration,
			&i.DurationStartedAt,
			&i.Error,
			&i.Size,
			&i.StartedAt,
			&i.Success,
			&i.TokenRanges,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRepairRunState = `-- name: GetRepairRunState :many
SELECT cluster_id, task_id, run_id, keyspace_name, table_name, success_ranges FROM repair_run_state
WHERE cluster_id = ? AND task_id = ? AND run_id = ?
`

type GetRepairRunStateParams struct {
	ClusterID string
	TaskID    string
	RunID     string
}

func (q *Queries) GetRepairRunState(ctx context.Context, arg GetRepairRunStateParams) ([]RepairRunState, error) {
	rows, err := q.db.QueryContext(ctx, getRepairRunState, arg.ClusterID, arg.TaskID, arg.RunID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RepairRunState
	for rows.Next() {
		var i RepairRunState
		if err := rows.Scan(
			&i.ClusterID,
			&i.TaskID,
			&i.RunID,
			&i.KeyspaceName,
			&i.TableName,
			&i.SuccessRanges,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRepairRun = `-- name: InsertRepairRun :exec
INSERT INTO repair_run (cluster_id, task_id, id, dc, end_time, host, intensity, parallel, prev_id, start_time)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertRepairRunParams struct {
	ClusterID string
	TaskID    string
	ID        string
	Dc        []byte
	EndTime   time.Time
	Host      string
	Intensity sql.NullInt64
	Parallel  sql.NullInt64
	PrevID    string
	StartTime time.Time
}

func (q *Queries) InsertRepairRun(ctx context.Context, arg InsertRepairRunParams) error {
	_, err := q.db.ExecContext(ctx, insertRepairRun,
		arg.ClusterID,
		arg.TaskID,
		arg.ID,
		arg.Dc,
		arg.EndTime,
		arg.Host,
		arg.Intensity,
		arg.Parallel,
		arg.PrevID,
		arg.StartTime,
	)
	return err
}

const insertRepairRunProgress = `-- name: InsertRepairRunProgress :exec
INSERT INTO repair_run_progress (cluster_id, task_id, run_id, host, keyspace_name, table_name, completed_at, duration, duration_started_at, error, size, started_at, success, token_ranges)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertRepairRunProgressParams struct {
	ClusterID         string
	TaskID            string
	RunID             string
	Host              string
	KeyspaceName      string
	TableName         string
	CompletedAt       sql.NullTime
	Duration          int64
	DurationStartedAt sql.NullTime
	Error             int64
	Size              int64
	StartedAt         sql.NullTime
	Success           int64
	TokenRanges       int64
}

func (q *Queries) InsertRepairRunProgress(ctx context.Context, arg InsertRepairRunProgressParams) error {
	_, err := q.db.ExecContext(ctx, insertRepairRunProgress,
		arg.ClusterID,
		arg.TaskID,
		arg.RunID,
		arg.Host,
		arg.KeyspaceName,
		arg.TableName,
		arg.CompletedAt,
		arg.Duration,
		arg.DurationStartedAt,
		arg.Error,
		arg.Size,
		arg.StartedAt,
		arg.Success,
		arg.TokenRanges,
	)
	return err
}

const insertRepairRunState = `-- name: InsertRepairRunState :exec
INSERT INTO repair_run_state (cluster_id, task_id, run_id, keyspace_name, table_name, success_ranges)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertRepairRunStateParams struct {
	ClusterID     string
	TaskID        string
	RunID         string
	KeyspaceName  string
	TableName     string
	SuccessRanges []byte
}

func (q *Queries) InsertRepairRunState(ctx context.Context, arg InsertRepairRunStateParams) error {
	_, err := q.db.ExecContext(ctx, insertRepairRunState,
		arg.ClusterID,
		arg.TaskID,
		arg.RunID,
		arg.KeyspaceName,
		arg.TableName,
		arg.SuccessRanges,
	)
	return err
}
