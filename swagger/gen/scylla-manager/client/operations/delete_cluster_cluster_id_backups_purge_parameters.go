// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteClusterClusterIDBackupsPurgeParams creates a new DeleteClusterClusterIDBackupsPurgeParams object
// with the default values initialized.
func NewDeleteClusterClusterIDBackupsPurgeParams() *DeleteClusterClusterIDBackupsPurgeParams {
	var ()
	return &DeleteClusterClusterIDBackupsPurgeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteClusterClusterIDBackupsPurgeParamsWithTimeout creates a new DeleteClusterClusterIDBackupsPurgeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteClusterClusterIDBackupsPurgeParamsWithTimeout(timeout time.Duration) *DeleteClusterClusterIDBackupsPurgeParams {
	var ()
	return &DeleteClusterClusterIDBackupsPurgeParams{

		timeout: timeout,
	}
}

// NewDeleteClusterClusterIDBackupsPurgeParamsWithContext creates a new DeleteClusterClusterIDBackupsPurgeParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteClusterClusterIDBackupsPurgeParamsWithContext(ctx context.Context) *DeleteClusterClusterIDBackupsPurgeParams {
	var ()
	return &DeleteClusterClusterIDBackupsPurgeParams{

		Context: ctx,
	}
}

// NewDeleteClusterClusterIDBackupsPurgeParamsWithHTTPClient creates a new DeleteClusterClusterIDBackupsPurgeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteClusterClusterIDBackupsPurgeParamsWithHTTPClient(client *http.Client) *DeleteClusterClusterIDBackupsPurgeParams {
	var ()
	return &DeleteClusterClusterIDBackupsPurgeParams{
		HTTPClient: client,
	}
}

/*
DeleteClusterClusterIDBackupsPurgeParams contains all the parameters to send to the API endpoint
for the delete cluster cluster ID backups purge operation typically these are written to a http.Request
*/
type DeleteClusterClusterIDBackupsPurgeParams struct {

	/*ClusterID*/
	ClusterID string
	/*DryRun*/
	DryRun *bool
	/*Locations*/
	Locations []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) WithTimeout(timeout time.Duration) *DeleteClusterClusterIDBackupsPurgeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) WithContext(ctx context.Context) *DeleteClusterClusterIDBackupsPurgeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) WithHTTPClient(client *http.Client) *DeleteClusterClusterIDBackupsPurgeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) WithClusterID(clusterID string) *DeleteClusterClusterIDBackupsPurgeParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithDryRun adds the dryRun to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) WithDryRun(dryRun *bool) *DeleteClusterClusterIDBackupsPurgeParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) SetDryRun(dryRun *bool) {
	o.DryRun = dryRun
}

// WithLocations adds the locations to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) WithLocations(locations []string) *DeleteClusterClusterIDBackupsPurgeParams {
	o.SetLocations(locations)
	return o
}

// SetLocations adds the locations to the delete cluster cluster ID backups purge params
func (o *DeleteClusterClusterIDBackupsPurgeParams) SetLocations(locations []string) {
	o.Locations = locations
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteClusterClusterIDBackupsPurgeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	if o.DryRun != nil {

		// query param dry_run
		var qrDryRun bool
		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := swag.FormatBool(qrDryRun)
		if qDryRun != "" {
			if err := r.SetQueryParam("dry_run", qDryRun); err != nil {
				return err
			}
		}

	}

	valuesLocations := o.Locations

	joinedLocations := swag.JoinByFormat(valuesLocations, "")
	// query array param locations
	if err := r.SetQueryParam("locations", joinedLocations...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
