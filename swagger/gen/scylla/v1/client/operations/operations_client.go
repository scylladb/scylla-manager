// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CacheServiceCounterCacheCapacityPost(params *CacheServiceCounterCacheCapacityPostParams) (*CacheServiceCounterCacheCapacityPostOK, error)

	CacheServiceCounterCacheKeysToSaveGet(params *CacheServiceCounterCacheKeysToSaveGetParams) (*CacheServiceCounterCacheKeysToSaveGetOK, error)

	CacheServiceCounterCacheKeysToSavePost(params *CacheServiceCounterCacheKeysToSavePostParams) (*CacheServiceCounterCacheKeysToSavePostOK, error)

	CacheServiceCounterCacheSavePeriodGet(params *CacheServiceCounterCacheSavePeriodGetParams) (*CacheServiceCounterCacheSavePeriodGetOK, error)

	CacheServiceCounterCacheSavePeriodPost(params *CacheServiceCounterCacheSavePeriodPostParams) (*CacheServiceCounterCacheSavePeriodPostOK, error)

	CacheServiceInvalidateCounterCachePost(params *CacheServiceInvalidateCounterCachePostParams) (*CacheServiceInvalidateCounterCachePostOK, error)

	CacheServiceInvalidateKeyCachePost(params *CacheServiceInvalidateKeyCachePostParams) (*CacheServiceInvalidateKeyCachePostOK, error)

	CacheServiceKeyCacheCapacityPost(params *CacheServiceKeyCacheCapacityPostParams) (*CacheServiceKeyCacheCapacityPostOK, error)

	CacheServiceKeyCacheKeysToSaveGet(params *CacheServiceKeyCacheKeysToSaveGetParams) (*CacheServiceKeyCacheKeysToSaveGetOK, error)

	CacheServiceKeyCacheKeysToSavePost(params *CacheServiceKeyCacheKeysToSavePostParams) (*CacheServiceKeyCacheKeysToSavePostOK, error)

	CacheServiceKeyCacheSavePeriodGet(params *CacheServiceKeyCacheSavePeriodGetParams) (*CacheServiceKeyCacheSavePeriodGetOK, error)

	CacheServiceKeyCacheSavePeriodPost(params *CacheServiceKeyCacheSavePeriodPostParams) (*CacheServiceKeyCacheSavePeriodPostOK, error)

	CacheServiceMetricsCounterCapacityGet(params *CacheServiceMetricsCounterCapacityGetParams) (*CacheServiceMetricsCounterCapacityGetOK, error)

	CacheServiceMetricsCounterEntriesGet(params *CacheServiceMetricsCounterEntriesGetParams) (*CacheServiceMetricsCounterEntriesGetOK, error)

	CacheServiceMetricsCounterHitRateGet(params *CacheServiceMetricsCounterHitRateGetParams) (*CacheServiceMetricsCounterHitRateGetOK, error)

	CacheServiceMetricsCounterHitsGet(params *CacheServiceMetricsCounterHitsGetParams) (*CacheServiceMetricsCounterHitsGetOK, error)

	CacheServiceMetricsCounterHitsMovingAvrageGet(params *CacheServiceMetricsCounterHitsMovingAvrageGetParams) (*CacheServiceMetricsCounterHitsMovingAvrageGetOK, error)

	CacheServiceMetricsCounterRequestsGet(params *CacheServiceMetricsCounterRequestsGetParams) (*CacheServiceMetricsCounterRequestsGetOK, error)

	CacheServiceMetricsCounterRequestsMovingAvrageGet(params *CacheServiceMetricsCounterRequestsMovingAvrageGetParams) (*CacheServiceMetricsCounterRequestsMovingAvrageGetOK, error)

	CacheServiceMetricsCounterSizeGet(params *CacheServiceMetricsCounterSizeGetParams) (*CacheServiceMetricsCounterSizeGetOK, error)

	CacheServiceMetricsKeyCapacityGet(params *CacheServiceMetricsKeyCapacityGetParams) (*CacheServiceMetricsKeyCapacityGetOK, error)

	CacheServiceMetricsKeyEntriesGet(params *CacheServiceMetricsKeyEntriesGetParams) (*CacheServiceMetricsKeyEntriesGetOK, error)

	CacheServiceMetricsKeyHitRateGet(params *CacheServiceMetricsKeyHitRateGetParams) (*CacheServiceMetricsKeyHitRateGetOK, error)

	CacheServiceMetricsKeyHitsGet(params *CacheServiceMetricsKeyHitsGetParams) (*CacheServiceMetricsKeyHitsGetOK, error)

	CacheServiceMetricsKeyHitsMovingAvrageGet(params *CacheServiceMetricsKeyHitsMovingAvrageGetParams) (*CacheServiceMetricsKeyHitsMovingAvrageGetOK, error)

	CacheServiceMetricsKeyRequestsGet(params *CacheServiceMetricsKeyRequestsGetParams) (*CacheServiceMetricsKeyRequestsGetOK, error)

	CacheServiceMetricsKeyRequestsMovingAvrageGet(params *CacheServiceMetricsKeyRequestsMovingAvrageGetParams) (*CacheServiceMetricsKeyRequestsMovingAvrageGetOK, error)

	CacheServiceMetricsKeySizeGet(params *CacheServiceMetricsKeySizeGetParams) (*CacheServiceMetricsKeySizeGetOK, error)

	CacheServiceMetricsRowCapacityGet(params *CacheServiceMetricsRowCapacityGetParams) (*CacheServiceMetricsRowCapacityGetOK, error)

	CacheServiceMetricsRowEntriesGet(params *CacheServiceMetricsRowEntriesGetParams) (*CacheServiceMetricsRowEntriesGetOK, error)

	CacheServiceMetricsRowHitRateGet(params *CacheServiceMetricsRowHitRateGetParams) (*CacheServiceMetricsRowHitRateGetOK, error)

	CacheServiceMetricsRowHitsGet(params *CacheServiceMetricsRowHitsGetParams) (*CacheServiceMetricsRowHitsGetOK, error)

	CacheServiceMetricsRowHitsMovingAvrageGet(params *CacheServiceMetricsRowHitsMovingAvrageGetParams) (*CacheServiceMetricsRowHitsMovingAvrageGetOK, error)

	CacheServiceMetricsRowRequestsGet(params *CacheServiceMetricsRowRequestsGetParams) (*CacheServiceMetricsRowRequestsGetOK, error)

	CacheServiceMetricsRowRequestsMovingAvrageGet(params *CacheServiceMetricsRowRequestsMovingAvrageGetParams) (*CacheServiceMetricsRowRequestsMovingAvrageGetOK, error)

	CacheServiceMetricsRowSizeGet(params *CacheServiceMetricsRowSizeGetParams) (*CacheServiceMetricsRowSizeGetOK, error)

	CacheServiceRowCacheCapacityPost(params *CacheServiceRowCacheCapacityPostParams) (*CacheServiceRowCacheCapacityPostOK, error)

	CacheServiceRowCacheKeysToSaveGet(params *CacheServiceRowCacheKeysToSaveGetParams) (*CacheServiceRowCacheKeysToSaveGetOK, error)

	CacheServiceRowCacheKeysToSavePost(params *CacheServiceRowCacheKeysToSavePostParams) (*CacheServiceRowCacheKeysToSavePostOK, error)

	CacheServiceRowCacheSavePeriodGet(params *CacheServiceRowCacheSavePeriodGetParams) (*CacheServiceRowCacheSavePeriodGetOK, error)

	CacheServiceRowCacheSavePeriodPost(params *CacheServiceRowCacheSavePeriodPostParams) (*CacheServiceRowCacheSavePeriodPostOK, error)

	CacheServiceSaveCachesPost(params *CacheServiceSaveCachesPostParams) (*CacheServiceSaveCachesPostOK, error)

	CollectdByPluginidGet(params *CollectdByPluginidGetParams) (*CollectdByPluginidGetOK, error)

	CollectdByPluginidPost(params *CollectdByPluginidPostParams) (*CollectdByPluginidPostOK, error)

	CollectdGet(params *CollectdGetParams) (*CollectdGetOK, error)

	CollectdPost(params *CollectdPostParams) (*CollectdPostOK, error)

	ColumnFamilyAutocompactionByNameDelete(params *ColumnFamilyAutocompactionByNameDeleteParams) (*ColumnFamilyAutocompactionByNameDeleteOK, error)

	ColumnFamilyAutocompactionByNameGet(params *ColumnFamilyAutocompactionByNameGetParams) (*ColumnFamilyAutocompactionByNameGetOK, error)

	ColumnFamilyAutocompactionByNamePost(params *ColumnFamilyAutocompactionByNamePostParams) (*ColumnFamilyAutocompactionByNamePostOK, error)

	ColumnFamilyBuiltIndexesByNameGet(params *ColumnFamilyBuiltIndexesByNameGetParams) (*ColumnFamilyBuiltIndexesByNameGetOK, error)

	ColumnFamilyCompactionByNamePost(params *ColumnFamilyCompactionByNamePostParams) (*ColumnFamilyCompactionByNamePostOK, error)

	ColumnFamilyCompactionStrategyByNameGet(params *ColumnFamilyCompactionStrategyByNameGetParams) (*ColumnFamilyCompactionStrategyByNameGetOK, error)

	ColumnFamilyCompactionStrategyByNamePost(params *ColumnFamilyCompactionStrategyByNamePostParams) (*ColumnFamilyCompactionStrategyByNamePostOK, error)

	ColumnFamilyCompressionParametersByNameGet(params *ColumnFamilyCompressionParametersByNameGetParams) (*ColumnFamilyCompressionParametersByNameGetOK, error)

	ColumnFamilyCompressionParametersByNamePost(params *ColumnFamilyCompressionParametersByNamePostParams) (*ColumnFamilyCompressionParametersByNamePostOK, error)

	ColumnFamilyCrcCheckChanceByNamePost(params *ColumnFamilyCrcCheckChanceByNamePostParams) (*ColumnFamilyCrcCheckChanceByNamePostOK, error)

	ColumnFamilyDroppableRatioByNameGet(params *ColumnFamilyDroppableRatioByNameGetParams) (*ColumnFamilyDroppableRatioByNameGetOK, error)

	ColumnFamilyEstimateKeysByNameGet(params *ColumnFamilyEstimateKeysByNameGetParams) (*ColumnFamilyEstimateKeysByNameGetOK, error)

	ColumnFamilyGet(params *ColumnFamilyGetParams) (*ColumnFamilyGetOK, error)

	ColumnFamilyLoadSstableByNamePost(params *ColumnFamilyLoadSstableByNamePostParams) (*ColumnFamilyLoadSstableByNamePostOK, error)

	ColumnFamilyMajorCompactionByNamePost(params *ColumnFamilyMajorCompactionByNamePostParams) (*ColumnFamilyMajorCompactionByNamePostOK, error)

	ColumnFamilyMaximumCompactionByNameGet(params *ColumnFamilyMaximumCompactionByNameGetParams) (*ColumnFamilyMaximumCompactionByNameGetOK, error)

	ColumnFamilyMaximumCompactionByNamePost(params *ColumnFamilyMaximumCompactionByNamePostParams) (*ColumnFamilyMaximumCompactionByNamePostOK, error)

	ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGet(params *ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetParams) (*ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetOK, error)

	ColumnFamilyMetricsAllMemtablesLiveDataSizeGet(params *ColumnFamilyMetricsAllMemtablesLiveDataSizeGetParams) (*ColumnFamilyMetricsAllMemtablesLiveDataSizeGetOK, error)

	ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGet(params *ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetParams) (*ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetOK, error)

	ColumnFamilyMetricsAllMemtablesOffHeapSizeGet(params *ColumnFamilyMetricsAllMemtablesOffHeapSizeGetParams) (*ColumnFamilyMetricsAllMemtablesOffHeapSizeGetOK, error)

	ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGet(params *ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetParams) (*ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetOK, error)

	ColumnFamilyMetricsAllMemtablesOnHeapSizeGet(params *ColumnFamilyMetricsAllMemtablesOnHeapSizeGetParams) (*ColumnFamilyMetricsAllMemtablesOnHeapSizeGetOK, error)

	ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGet(params *ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetParams) (*ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetOK, error)

	ColumnFamilyMetricsBloomFilterDiskSpaceUsedGet(params *ColumnFamilyMetricsBloomFilterDiskSpaceUsedGetParams) (*ColumnFamilyMetricsBloomFilterDiskSpaceUsedGetOK, error)

	ColumnFamilyMetricsBloomFilterFalsePositivesByNameGet(params *ColumnFamilyMetricsBloomFilterFalsePositivesByNameGetParams) (*ColumnFamilyMetricsBloomFilterFalsePositivesByNameGetOK, error)

	ColumnFamilyMetricsBloomFilterFalsePositivesGet(params *ColumnFamilyMetricsBloomFilterFalsePositivesGetParams) (*ColumnFamilyMetricsBloomFilterFalsePositivesGetOK, error)

	ColumnFamilyMetricsBloomFilterFalseRatioByNameGet(params *ColumnFamilyMetricsBloomFilterFalseRatioByNameGetParams) (*ColumnFamilyMetricsBloomFilterFalseRatioByNameGetOK, error)

	ColumnFamilyMetricsBloomFilterFalseRatioGet(params *ColumnFamilyMetricsBloomFilterFalseRatioGetParams) (*ColumnFamilyMetricsBloomFilterFalseRatioGetOK, error)

	ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGet(params *ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetParams) (*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetOK, error)

	ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGet(params *ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetParams) (*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetOK, error)

	ColumnFamilyMetricsCasCommitByNameGet(params *ColumnFamilyMetricsCasCommitByNameGetParams) (*ColumnFamilyMetricsCasCommitByNameGetOK, error)

	ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGet(params *ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetOK, error)

	ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetOK, error)

	ColumnFamilyMetricsCasPrepareByNameGet(params *ColumnFamilyMetricsCasPrepareByNameGetParams) (*ColumnFamilyMetricsCasPrepareByNameGetOK, error)

	ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGet(params *ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetOK, error)

	ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetOK, error)

	ColumnFamilyMetricsCasProposeByNameGet(params *ColumnFamilyMetricsCasProposeByNameGetParams) (*ColumnFamilyMetricsCasProposeByNameGetOK, error)

	ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGet(params *ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetOK, error)

	ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetOK, error)

	ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGet(params *ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetParams) (*ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetOK, error)

	ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGet(params *ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetParams) (*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetOK, error)

	ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGet(params *ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetParams) (*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetOK, error)

	ColumnFamilyMetricsCompressionRatioByNameGet(params *ColumnFamilyMetricsCompressionRatioByNameGetParams) (*ColumnFamilyMetricsCompressionRatioByNameGetOK, error)

	ColumnFamilyMetricsCompressionRatioGet(params *ColumnFamilyMetricsCompressionRatioGetParams) (*ColumnFamilyMetricsCompressionRatioGetOK, error)

	ColumnFamilyMetricsCoordinatorReadGet(params *ColumnFamilyMetricsCoordinatorReadGetParams) (*ColumnFamilyMetricsCoordinatorReadGetOK, error)

	ColumnFamilyMetricsCoordinatorScanGet(params *ColumnFamilyMetricsCoordinatorScanGetParams) (*ColumnFamilyMetricsCoordinatorScanGetOK, error)

	ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGet(params *ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetParams) (*ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetOK, error)

	ColumnFamilyMetricsEstimatedRowCountByNameGet(params *ColumnFamilyMetricsEstimatedRowCountByNameGetParams) (*ColumnFamilyMetricsEstimatedRowCountByNameGetOK, error)

	ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGet(params *ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetParams) (*ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetOK, error)

	ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGet(params *ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetParams) (*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetOK, error)

	ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGet(params *ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetParams) (*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetOK, error)

	ColumnFamilyMetricsKeyCacheHitRateByNameGet(params *ColumnFamilyMetricsKeyCacheHitRateByNameGetParams) (*ColumnFamilyMetricsKeyCacheHitRateByNameGetOK, error)

	ColumnFamilyMetricsLiveDiskSpaceUsedByNameGet(params *ColumnFamilyMetricsLiveDiskSpaceUsedByNameGetParams) (*ColumnFamilyMetricsLiveDiskSpaceUsedByNameGetOK, error)

	ColumnFamilyMetricsLiveDiskSpaceUsedGet(params *ColumnFamilyMetricsLiveDiskSpaceUsedGetParams) (*ColumnFamilyMetricsLiveDiskSpaceUsedGetOK, error)

	ColumnFamilyMetricsLiveScannedHistogramByNameGet(params *ColumnFamilyMetricsLiveScannedHistogramByNameGetParams) (*ColumnFamilyMetricsLiveScannedHistogramByNameGetOK, error)

	ColumnFamilyMetricsLiveSsTableCountByNameGet(params *ColumnFamilyMetricsLiveSsTableCountByNameGetParams) (*ColumnFamilyMetricsLiveSsTableCountByNameGetOK, error)

	ColumnFamilyMetricsLiveSsTableCountGet(params *ColumnFamilyMetricsLiveSsTableCountGetParams) (*ColumnFamilyMetricsLiveSsTableCountGetOK, error)

	ColumnFamilyMetricsMaxRowSizeByNameGet(params *ColumnFamilyMetricsMaxRowSizeByNameGetParams) (*ColumnFamilyMetricsMaxRowSizeByNameGetOK, error)

	ColumnFamilyMetricsMaxRowSizeGet(params *ColumnFamilyMetricsMaxRowSizeGetParams) (*ColumnFamilyMetricsMaxRowSizeGetOK, error)

	ColumnFamilyMetricsMeanRowSizeByNameGet(params *ColumnFamilyMetricsMeanRowSizeByNameGetParams) (*ColumnFamilyMetricsMeanRowSizeByNameGetOK, error)

	ColumnFamilyMetricsMeanRowSizeGet(params *ColumnFamilyMetricsMeanRowSizeGetParams) (*ColumnFamilyMetricsMeanRowSizeGetOK, error)

	ColumnFamilyMetricsMemtableColumnsCountByNameGet(params *ColumnFamilyMetricsMemtableColumnsCountByNameGetParams) (*ColumnFamilyMetricsMemtableColumnsCountByNameGetOK, error)

	ColumnFamilyMetricsMemtableColumnsCountGet(params *ColumnFamilyMetricsMemtableColumnsCountGetParams) (*ColumnFamilyMetricsMemtableColumnsCountGetOK, error)

	ColumnFamilyMetricsMemtableLiveDataSizeByNameGet(params *ColumnFamilyMetricsMemtableLiveDataSizeByNameGetParams) (*ColumnFamilyMetricsMemtableLiveDataSizeByNameGetOK, error)

	ColumnFamilyMetricsMemtableLiveDataSizeGet(params *ColumnFamilyMetricsMemtableLiveDataSizeGetParams) (*ColumnFamilyMetricsMemtableLiveDataSizeGetOK, error)

	ColumnFamilyMetricsMemtableOffHeapSizeByNameGet(params *ColumnFamilyMetricsMemtableOffHeapSizeByNameGetParams) (*ColumnFamilyMetricsMemtableOffHeapSizeByNameGetOK, error)

	ColumnFamilyMetricsMemtableOffHeapSizeGet(params *ColumnFamilyMetricsMemtableOffHeapSizeGetParams) (*ColumnFamilyMetricsMemtableOffHeapSizeGetOK, error)

	ColumnFamilyMetricsMemtableOnHeapSizeByNameGet(params *ColumnFamilyMetricsMemtableOnHeapSizeByNameGetParams) (*ColumnFamilyMetricsMemtableOnHeapSizeByNameGetOK, error)

	ColumnFamilyMetricsMemtableOnHeapSizeGet(params *ColumnFamilyMetricsMemtableOnHeapSizeGetParams) (*ColumnFamilyMetricsMemtableOnHeapSizeGetOK, error)

	ColumnFamilyMetricsMemtableSwitchCountByNameGet(params *ColumnFamilyMetricsMemtableSwitchCountByNameGetParams) (*ColumnFamilyMetricsMemtableSwitchCountByNameGetOK, error)

	ColumnFamilyMetricsMemtableSwitchCountGet(params *ColumnFamilyMetricsMemtableSwitchCountGetParams) (*ColumnFamilyMetricsMemtableSwitchCountGetOK, error)

	ColumnFamilyMetricsMinRowSizeByNameGet(params *ColumnFamilyMetricsMinRowSizeByNameGetParams) (*ColumnFamilyMetricsMinRowSizeByNameGetOK, error)

	ColumnFamilyMetricsMinRowSizeGet(params *ColumnFamilyMetricsMinRowSizeGetParams) (*ColumnFamilyMetricsMinRowSizeGetOK, error)

	ColumnFamilyMetricsPendingCompactionsByNameGet(params *ColumnFamilyMetricsPendingCompactionsByNameGetParams) (*ColumnFamilyMetricsPendingCompactionsByNameGetOK, error)

	ColumnFamilyMetricsPendingCompactionsGet(params *ColumnFamilyMetricsPendingCompactionsGetParams) (*ColumnFamilyMetricsPendingCompactionsGetOK, error)

	ColumnFamilyMetricsPendingFlushesByNameGet(params *ColumnFamilyMetricsPendingFlushesByNameGetParams) (*ColumnFamilyMetricsPendingFlushesByNameGetOK, error)

	ColumnFamilyMetricsPendingFlushesGet(params *ColumnFamilyMetricsPendingFlushesGetParams) (*ColumnFamilyMetricsPendingFlushesGetOK, error)

	ColumnFamilyMetricsRangeLatencyByNameGet(params *ColumnFamilyMetricsRangeLatencyByNameGetParams) (*ColumnFamilyMetricsRangeLatencyByNameGetOK, error)

	ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGet(params *ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetOK, error)

	ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetOK, error)

	ColumnFamilyMetricsRangeLatencyGet(params *ColumnFamilyMetricsRangeLatencyGetParams) (*ColumnFamilyMetricsRangeLatencyGetOK, error)

	ColumnFamilyMetricsReadByNameGet(params *ColumnFamilyMetricsReadByNameGetParams) (*ColumnFamilyMetricsReadByNameGetOK, error)

	ColumnFamilyMetricsReadGet(params *ColumnFamilyMetricsReadGetParams) (*ColumnFamilyMetricsReadGetOK, error)

	ColumnFamilyMetricsReadLatencyByNameGet(params *ColumnFamilyMetricsReadLatencyByNameGetParams) (*ColumnFamilyMetricsReadLatencyByNameGetOK, error)

	ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetOK, error)

	ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetOK, error)

	ColumnFamilyMetricsReadLatencyGet(params *ColumnFamilyMetricsReadLatencyGetParams) (*ColumnFamilyMetricsReadLatencyGetOK, error)

	ColumnFamilyMetricsReadLatencyHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyHistogramByNameGetOK, error)

	ColumnFamilyMetricsReadLatencyHistogramGet(params *ColumnFamilyMetricsReadLatencyHistogramGetParams) (*ColumnFamilyMetricsReadLatencyHistogramGetOK, error)

	ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetOK, error)

	ColumnFamilyMetricsReadLatencyMovingAverageHistogramGet(params *ColumnFamilyMetricsReadLatencyMovingAverageHistogramGetParams) (*ColumnFamilyMetricsReadLatencyMovingAverageHistogramGetOK, error)

	ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGet(params *ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetOK, error)

	ColumnFamilyMetricsRecentBloomFilterFalsePositivesGet(params *ColumnFamilyMetricsRecentBloomFilterFalsePositivesGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalsePositivesGetOK, error)

	ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGet(params *ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetOK, error)

	ColumnFamilyMetricsRecentBloomFilterFalseRatioGet(params *ColumnFamilyMetricsRecentBloomFilterFalseRatioGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalseRatioGetOK, error)

	ColumnFamilyMetricsRowCacheHitByNameGet(params *ColumnFamilyMetricsRowCacheHitByNameGetParams) (*ColumnFamilyMetricsRowCacheHitByNameGetOK, error)

	ColumnFamilyMetricsRowCacheHitGet(params *ColumnFamilyMetricsRowCacheHitGetParams) (*ColumnFamilyMetricsRowCacheHitGetOK, error)

	ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGet(params *ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetParams) (*ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetOK, error)

	ColumnFamilyMetricsRowCacheHitOutOfRangeGet(params *ColumnFamilyMetricsRowCacheHitOutOfRangeGetParams) (*ColumnFamilyMetricsRowCacheHitOutOfRangeGetOK, error)

	ColumnFamilyMetricsRowCacheMissByNameGet(params *ColumnFamilyMetricsRowCacheMissByNameGetParams) (*ColumnFamilyMetricsRowCacheMissByNameGetOK, error)

	ColumnFamilyMetricsRowCacheMissGet(params *ColumnFamilyMetricsRowCacheMissGetParams) (*ColumnFamilyMetricsRowCacheMissGetOK, error)

	ColumnFamilyMetricsSnapshotsSizeByNameGet(params *ColumnFamilyMetricsSnapshotsSizeByNameGetParams) (*ColumnFamilyMetricsSnapshotsSizeByNameGetOK, error)

	ColumnFamilyMetricsSpeculativeRetriesByNameGet(params *ColumnFamilyMetricsSpeculativeRetriesByNameGetParams) (*ColumnFamilyMetricsSpeculativeRetriesByNameGetOK, error)

	ColumnFamilyMetricsSpeculativeRetriesGet(params *ColumnFamilyMetricsSpeculativeRetriesGetParams) (*ColumnFamilyMetricsSpeculativeRetriesGetOK, error)

	ColumnFamilyMetricsSstablesPerReadHistogramByNameGet(params *ColumnFamilyMetricsSstablesPerReadHistogramByNameGetParams) (*ColumnFamilyMetricsSstablesPerReadHistogramByNameGetOK, error)

	ColumnFamilyMetricsTombstoneScannedHistogramByNameGet(params *ColumnFamilyMetricsTombstoneScannedHistogramByNameGetParams) (*ColumnFamilyMetricsTombstoneScannedHistogramByNameGetOK, error)

	ColumnFamilyMetricsTotalDiskSpaceUsedByNameGet(params *ColumnFamilyMetricsTotalDiskSpaceUsedByNameGetParams) (*ColumnFamilyMetricsTotalDiskSpaceUsedByNameGetOK, error)

	ColumnFamilyMetricsTotalDiskSpaceUsedGet(params *ColumnFamilyMetricsTotalDiskSpaceUsedGetParams) (*ColumnFamilyMetricsTotalDiskSpaceUsedGetOK, error)

	ColumnFamilyMetricsTrueSnapshotsSizeGet(params *ColumnFamilyMetricsTrueSnapshotsSizeGetParams) (*ColumnFamilyMetricsTrueSnapshotsSizeGetOK, error)

	ColumnFamilyMetricsWaitingOnFreeMemtableGet(params *ColumnFamilyMetricsWaitingOnFreeMemtableGetParams) (*ColumnFamilyMetricsWaitingOnFreeMemtableGetOK, error)

	ColumnFamilyMetricsWriteByNameGet(params *ColumnFamilyMetricsWriteByNameGetParams) (*ColumnFamilyMetricsWriteByNameGetOK, error)

	ColumnFamilyMetricsWriteGet(params *ColumnFamilyMetricsWriteGetParams) (*ColumnFamilyMetricsWriteGetOK, error)

	ColumnFamilyMetricsWriteLatencyByNameGet(params *ColumnFamilyMetricsWriteLatencyByNameGetParams) (*ColumnFamilyMetricsWriteLatencyByNameGetOK, error)

	ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetOK, error)

	ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetOK, error)

	ColumnFamilyMetricsWriteLatencyGet(params *ColumnFamilyMetricsWriteLatencyGetParams) (*ColumnFamilyMetricsWriteLatencyGetOK, error)

	ColumnFamilyMetricsWriteLatencyHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyHistogramByNameGetOK, error)

	ColumnFamilyMetricsWriteLatencyHistogramGet(params *ColumnFamilyMetricsWriteLatencyHistogramGetParams) (*ColumnFamilyMetricsWriteLatencyHistogramGetOK, error)

	ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetOK, error)

	ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGet(params *ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetParams) (*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetOK, error)

	ColumnFamilyMinimumCompactionByNameGet(params *ColumnFamilyMinimumCompactionByNameGetParams) (*ColumnFamilyMinimumCompactionByNameGetOK, error)

	ColumnFamilyMinimumCompactionByNamePost(params *ColumnFamilyMinimumCompactionByNamePostParams) (*ColumnFamilyMinimumCompactionByNamePostOK, error)

	ColumnFamilyNameGet(params *ColumnFamilyNameGetParams) (*ColumnFamilyNameGetOK, error)

	ColumnFamilyNameKeyspaceGet(params *ColumnFamilyNameKeyspaceGetParams) (*ColumnFamilyNameKeyspaceGetOK, error)

	ColumnFamilySstablesByKeyByNameGet(params *ColumnFamilySstablesByKeyByNameGetParams) (*ColumnFamilySstablesByKeyByNameGetOK, error)

	ColumnFamilySstablesPerLevelByNameGet(params *ColumnFamilySstablesPerLevelByNameGetParams) (*ColumnFamilySstablesPerLevelByNameGetOK, error)

	ColumnFamilySstablesUnleveledByNameGet(params *ColumnFamilySstablesUnleveledByNameGetParams) (*ColumnFamilySstablesUnleveledByNameGetOK, error)

	CommitLogMetricsWaitingOnCommitGet(params *CommitLogMetricsWaitingOnCommitGetParams) (*CommitLogMetricsWaitingOnCommitGetOK, error)

	CommitLogMetricsWaitingOnSegmentAllocationGet(params *CommitLogMetricsWaitingOnSegmentAllocationGetParams) (*CommitLogMetricsWaitingOnSegmentAllocationGetOK, error)

	CommitlogMetricsCompletedTasksGet(params *CommitlogMetricsCompletedTasksGetParams) (*CommitlogMetricsCompletedTasksGetOK, error)

	CommitlogMetricsPendingTasksGet(params *CommitlogMetricsPendingTasksGetParams) (*CommitlogMetricsPendingTasksGetOK, error)

	CommitlogMetricsTotalCommitLogSizeGet(params *CommitlogMetricsTotalCommitLogSizeGetParams) (*CommitlogMetricsTotalCommitLogSizeGetOK, error)

	CommitlogRecoverByPathPost(params *CommitlogRecoverByPathPostParams) (*CommitlogRecoverByPathPostOK, error)

	CommitlogSegmentsActiveGet(params *CommitlogSegmentsActiveGetParams) (*CommitlogSegmentsActiveGetOK, error)

	CommitlogSegmentsArchivingGet(params *CommitlogSegmentsArchivingGetParams) (*CommitlogSegmentsArchivingGetOK, error)

	CompactionManagerCompactionHistoryGet(params *CompactionManagerCompactionHistoryGetParams) (*CompactionManagerCompactionHistoryGetOK, error)

	CompactionManagerCompactionInfoGet(params *CompactionManagerCompactionInfoGetParams) (*CompactionManagerCompactionInfoGetOK, error)

	CompactionManagerCompactionsGet(params *CompactionManagerCompactionsGetParams) (*CompactionManagerCompactionsGetOK, error)

	CompactionManagerForceUserDefinedCompactionPost(params *CompactionManagerForceUserDefinedCompactionPostParams) (*CompactionManagerForceUserDefinedCompactionPostOK, error)

	CompactionManagerMetricsBytesCompactedGet(params *CompactionManagerMetricsBytesCompactedGetParams) (*CompactionManagerMetricsBytesCompactedGetOK, error)

	CompactionManagerMetricsCompletedTasksGet(params *CompactionManagerMetricsCompletedTasksGetParams) (*CompactionManagerMetricsCompletedTasksGetOK, error)

	CompactionManagerMetricsPendingTasksGet(params *CompactionManagerMetricsPendingTasksGetParams) (*CompactionManagerMetricsPendingTasksGetOK, error)

	CompactionManagerMetricsTotalCompactionsCompletedGet(params *CompactionManagerMetricsTotalCompactionsCompletedGetParams) (*CompactionManagerMetricsTotalCompactionsCompletedGetOK, error)

	CompactionManagerStopCompactionPost(params *CompactionManagerStopCompactionPostParams) (*CompactionManagerStopCompactionPostOK, error)

	FailureDetectorCountEndpointDownGet(params *FailureDetectorCountEndpointDownGetParams) (*FailureDetectorCountEndpointDownGetOK, error)

	FailureDetectorCountEndpointUpGet(params *FailureDetectorCountEndpointUpGetParams) (*FailureDetectorCountEndpointUpGetOK, error)

	FailureDetectorEndpointPhiValuesGet(params *FailureDetectorEndpointPhiValuesGetParams) (*FailureDetectorEndpointPhiValuesGetOK, error)

	FailureDetectorEndpointsGet(params *FailureDetectorEndpointsGetParams) (*FailureDetectorEndpointsGetOK, error)

	FailureDetectorEndpointsStatesByAddrGet(params *FailureDetectorEndpointsStatesByAddrGetParams) (*FailureDetectorEndpointsStatesByAddrGetOK, error)

	FailureDetectorPhiGet(params *FailureDetectorPhiGetParams) (*FailureDetectorPhiGetOK, error)

	FailureDetectorPhiPost(params *FailureDetectorPhiPostParams) (*FailureDetectorPhiPostOK, error)

	FailureDetectorSimpleStatesGet(params *FailureDetectorSimpleStatesGetParams) (*FailureDetectorSimpleStatesGetOK, error)

	GossiperAssassinateByAddrPost(params *GossiperAssassinateByAddrPostParams) (*GossiperAssassinateByAddrPostOK, error)

	GossiperDowntimeByAddrGet(params *GossiperDowntimeByAddrGetParams) (*GossiperDowntimeByAddrGetOK, error)

	GossiperEndpointDownGet(params *GossiperEndpointDownGetParams) (*GossiperEndpointDownGetOK, error)

	GossiperEndpointLiveGet(params *GossiperEndpointLiveGetParams) (*GossiperEndpointLiveGetOK, error)

	GossiperGenerationNumberByAddrGet(params *GossiperGenerationNumberByAddrGetParams) (*GossiperGenerationNumberByAddrGetOK, error)

	GossiperHeartBeatVersionByAddrGet(params *GossiperHeartBeatVersionByAddrGetParams) (*GossiperHeartBeatVersionByAddrGetOK, error)

	HintedHandoffHintsDelete(params *HintedHandoffHintsDeleteParams) (*HintedHandoffHintsDeleteOK, error)

	HintedHandoffHintsGet(params *HintedHandoffHintsGetParams) (*HintedHandoffHintsGetOK, error)

	HintedHandoffMetricsCreateHintByAddrGet(params *HintedHandoffMetricsCreateHintByAddrGetParams) (*HintedHandoffMetricsCreateHintByAddrGetOK, error)

	HintedHandoffMetricsNotStoredHintsByAddrGet(params *HintedHandoffMetricsNotStoredHintsByAddrGetParams) (*HintedHandoffMetricsNotStoredHintsByAddrGetOK, error)

	HintedHandoffPausePost(params *HintedHandoffPausePostParams) (*HintedHandoffPausePostOK, error)

	HintedHandoffSchedulePost(params *HintedHandoffSchedulePostParams) (*HintedHandoffSchedulePostOK, error)

	LsaCompactPost(params *LsaCompactPostParams) (*LsaCompactPostOK, error)

	MessagingServiceMessagesDroppedByVerGet(params *MessagingServiceMessagesDroppedByVerGetParams) (*MessagingServiceMessagesDroppedByVerGetOK, error)

	MessagingServiceMessagesDroppedGet(params *MessagingServiceMessagesDroppedGetParams) (*MessagingServiceMessagesDroppedGetOK, error)

	MessagingServiceMessagesExceptionGet(params *MessagingServiceMessagesExceptionGetParams) (*MessagingServiceMessagesExceptionGetOK, error)

	MessagingServiceMessagesPendingGet(params *MessagingServiceMessagesPendingGetParams) (*MessagingServiceMessagesPendingGetOK, error)

	MessagingServiceMessagesRepliedGet(params *MessagingServiceMessagesRepliedGetParams) (*MessagingServiceMessagesRepliedGetOK, error)

	MessagingServiceMessagesRespondCompletedGet(params *MessagingServiceMessagesRespondCompletedGetParams) (*MessagingServiceMessagesRespondCompletedGetOK, error)

	MessagingServiceMessagesRespondPendingGet(params *MessagingServiceMessagesRespondPendingGetParams) (*MessagingServiceMessagesRespondPendingGetOK, error)

	MessagingServiceMessagesSentGet(params *MessagingServiceMessagesSentGetParams) (*MessagingServiceMessagesSentGetOK, error)

	MessagingServiceMessagesTimeoutGet(params *MessagingServiceMessagesTimeoutGetParams) (*MessagingServiceMessagesTimeoutGetOK, error)

	MessagingServiceVersionGet(params *MessagingServiceVersionGetParams) (*MessagingServiceVersionGetOK, error)

	SnitchDatacenterGet(params *SnitchDatacenterGetParams) (*SnitchDatacenterGetOK, error)

	SnitchNameGet(params *SnitchNameGetParams) (*SnitchNameGetOK, error)

	SnitchRackGet(params *SnitchRackGetParams) (*SnitchRackGetOK, error)

	StorageProxyCasContentionTimeoutGet(params *StorageProxyCasContentionTimeoutGetParams) (*StorageProxyCasContentionTimeoutGetOK, error)

	StorageProxyCasContentionTimeoutPost(params *StorageProxyCasContentionTimeoutPostParams) (*StorageProxyCasContentionTimeoutPostOK, error)

	StorageProxyCounterWriteRPCTimeoutGet(params *StorageProxyCounterWriteRPCTimeoutGetParams) (*StorageProxyCounterWriteRPCTimeoutGetOK, error)

	StorageProxyCounterWriteRPCTimeoutPost(params *StorageProxyCounterWriteRPCTimeoutPostParams) (*StorageProxyCounterWriteRPCTimeoutPostOK, error)

	StorageProxyHintedHandoffEnabledByDcGet(params *StorageProxyHintedHandoffEnabledByDcGetParams) (*StorageProxyHintedHandoffEnabledByDcGetOK, error)

	StorageProxyHintedHandoffEnabledByDcPost(params *StorageProxyHintedHandoffEnabledByDcPostParams) (*StorageProxyHintedHandoffEnabledByDcPostOK, error)

	StorageProxyHintedHandoffEnabledGet(params *StorageProxyHintedHandoffEnabledGetParams) (*StorageProxyHintedHandoffEnabledGetOK, error)

	StorageProxyHintedHandoffEnabledPost(params *StorageProxyHintedHandoffEnabledPostParams) (*StorageProxyHintedHandoffEnabledPostOK, error)

	StorageProxyHintsInProgressGet(params *StorageProxyHintsInProgressGetParams) (*StorageProxyHintsInProgressGetOK, error)

	StorageProxyMaxHintWindowGet(params *StorageProxyMaxHintWindowGetParams) (*StorageProxyMaxHintWindowGetOK, error)

	StorageProxyMaxHintWindowPost(params *StorageProxyMaxHintWindowPostParams) (*StorageProxyMaxHintWindowPostOK, error)

	StorageProxyMaxHintsInProgressGet(params *StorageProxyMaxHintsInProgressGetParams) (*StorageProxyMaxHintsInProgressGetOK, error)

	StorageProxyMaxHintsInProgressPost(params *StorageProxyMaxHintsInProgressPostParams) (*StorageProxyMaxHintsInProgressPostOK, error)

	StorageProxyMetricsCasReadConditionNotMetGet(params *StorageProxyMetricsCasReadConditionNotMetGetParams) (*StorageProxyMetricsCasReadConditionNotMetGetOK, error)

	StorageProxyMetricsCasReadContentionGet(params *StorageProxyMetricsCasReadContentionGetParams) (*StorageProxyMetricsCasReadContentionGetOK, error)

	StorageProxyMetricsCasReadTimeoutsGet(params *StorageProxyMetricsCasReadTimeoutsGetParams) (*StorageProxyMetricsCasReadTimeoutsGetOK, error)

	StorageProxyMetricsCasReadUnavailablesGet(params *StorageProxyMetricsCasReadUnavailablesGetParams) (*StorageProxyMetricsCasReadUnavailablesGetOK, error)

	StorageProxyMetricsCasReadUnfinishedCommitGet(params *StorageProxyMetricsCasReadUnfinishedCommitGetParams) (*StorageProxyMetricsCasReadUnfinishedCommitGetOK, error)

	StorageProxyMetricsCasWriteConditionNotMetGet(params *StorageProxyMetricsCasWriteConditionNotMetGetParams) (*StorageProxyMetricsCasWriteConditionNotMetGetOK, error)

	StorageProxyMetricsCasWriteContentionGet(params *StorageProxyMetricsCasWriteContentionGetParams) (*StorageProxyMetricsCasWriteContentionGetOK, error)

	StorageProxyMetricsCasWriteTimeoutsGet(params *StorageProxyMetricsCasWriteTimeoutsGetParams) (*StorageProxyMetricsCasWriteTimeoutsGetOK, error)

	StorageProxyMetricsCasWriteUnavailablesGet(params *StorageProxyMetricsCasWriteUnavailablesGetParams) (*StorageProxyMetricsCasWriteUnavailablesGetOK, error)

	StorageProxyMetricsCasWriteUnfinishedCommitGet(params *StorageProxyMetricsCasWriteUnfinishedCommitGetParams) (*StorageProxyMetricsCasWriteUnfinishedCommitGetOK, error)

	StorageProxyMetricsRangeEstimatedHistogramGet(params *StorageProxyMetricsRangeEstimatedHistogramGetParams) (*StorageProxyMetricsRangeEstimatedHistogramGetOK, error)

	StorageProxyMetricsRangeGet(params *StorageProxyMetricsRangeGetParams) (*StorageProxyMetricsRangeGetOK, error)

	StorageProxyMetricsRangeHistogramGet(params *StorageProxyMetricsRangeHistogramGetParams) (*StorageProxyMetricsRangeHistogramGetOK, error)

	StorageProxyMetricsRangeMovingAverageHistogramGet(params *StorageProxyMetricsRangeMovingAverageHistogramGetParams) (*StorageProxyMetricsRangeMovingAverageHistogramGetOK, error)

	StorageProxyMetricsRangeTimeoutsGet(params *StorageProxyMetricsRangeTimeoutsGetParams) (*StorageProxyMetricsRangeTimeoutsGetOK, error)

	StorageProxyMetricsRangeTimeoutsRatesGet(params *StorageProxyMetricsRangeTimeoutsRatesGetParams) (*StorageProxyMetricsRangeTimeoutsRatesGetOK, error)

	StorageProxyMetricsRangeUnavailablesGet(params *StorageProxyMetricsRangeUnavailablesGetParams) (*StorageProxyMetricsRangeUnavailablesGetOK, error)

	StorageProxyMetricsRangeUnavailablesRatesGet(params *StorageProxyMetricsRangeUnavailablesRatesGetParams) (*StorageProxyMetricsRangeUnavailablesRatesGetOK, error)

	StorageProxyMetricsReadEstimatedHistogramGet(params *StorageProxyMetricsReadEstimatedHistogramGetParams) (*StorageProxyMetricsReadEstimatedHistogramGetOK, error)

	StorageProxyMetricsReadGet(params *StorageProxyMetricsReadGetParams) (*StorageProxyMetricsReadGetOK, error)

	StorageProxyMetricsReadHistogramGet(params *StorageProxyMetricsReadHistogramGetParams) (*StorageProxyMetricsReadHistogramGetOK, error)

	StorageProxyMetricsReadMovingAverageHistogramGet(params *StorageProxyMetricsReadMovingAverageHistogramGetParams) (*StorageProxyMetricsReadMovingAverageHistogramGetOK, error)

	StorageProxyMetricsReadTimeoutsGet(params *StorageProxyMetricsReadTimeoutsGetParams) (*StorageProxyMetricsReadTimeoutsGetOK, error)

	StorageProxyMetricsReadTimeoutsRatesGet(params *StorageProxyMetricsReadTimeoutsRatesGetParams) (*StorageProxyMetricsReadTimeoutsRatesGetOK, error)

	StorageProxyMetricsReadUnavailablesGet(params *StorageProxyMetricsReadUnavailablesGetParams) (*StorageProxyMetricsReadUnavailablesGetOK, error)

	StorageProxyMetricsReadUnavailablesRatesGet(params *StorageProxyMetricsReadUnavailablesRatesGetParams) (*StorageProxyMetricsReadUnavailablesRatesGetOK, error)

	StorageProxyMetricsWriteEstimatedHistogramGet(params *StorageProxyMetricsWriteEstimatedHistogramGetParams) (*StorageProxyMetricsWriteEstimatedHistogramGetOK, error)

	StorageProxyMetricsWriteGet(params *StorageProxyMetricsWriteGetParams) (*StorageProxyMetricsWriteGetOK, error)

	StorageProxyMetricsWriteHistogramGet(params *StorageProxyMetricsWriteHistogramGetParams) (*StorageProxyMetricsWriteHistogramGetOK, error)

	StorageProxyMetricsWriteMovingAverageHistogramGet(params *StorageProxyMetricsWriteMovingAverageHistogramGetParams) (*StorageProxyMetricsWriteMovingAverageHistogramGetOK, error)

	StorageProxyMetricsWriteTimeoutsGet(params *StorageProxyMetricsWriteTimeoutsGetParams) (*StorageProxyMetricsWriteTimeoutsGetOK, error)

	StorageProxyMetricsWriteTimeoutsRatesGet(params *StorageProxyMetricsWriteTimeoutsRatesGetParams) (*StorageProxyMetricsWriteTimeoutsRatesGetOK, error)

	StorageProxyMetricsWriteUnavailablesGet(params *StorageProxyMetricsWriteUnavailablesGetParams) (*StorageProxyMetricsWriteUnavailablesGetOK, error)

	StorageProxyMetricsWriteUnavailablesRatesGet(params *StorageProxyMetricsWriteUnavailablesRatesGetParams) (*StorageProxyMetricsWriteUnavailablesRatesGetOK, error)

	StorageProxyRangeRPCTimeoutGet(params *StorageProxyRangeRPCTimeoutGetParams) (*StorageProxyRangeRPCTimeoutGetOK, error)

	StorageProxyRangeRPCTimeoutPost(params *StorageProxyRangeRPCTimeoutPostParams) (*StorageProxyRangeRPCTimeoutPostOK, error)

	StorageProxyReadRepairAttemptedGet(params *StorageProxyReadRepairAttemptedGetParams) (*StorageProxyReadRepairAttemptedGetOK, error)

	StorageProxyReadRepairRepairedBackgroundGet(params *StorageProxyReadRepairRepairedBackgroundGetParams) (*StorageProxyReadRepairRepairedBackgroundGetOK, error)

	StorageProxyReadRepairRepairedBlockingGet(params *StorageProxyReadRepairRepairedBlockingGetParams) (*StorageProxyReadRepairRepairedBlockingGetOK, error)

	StorageProxyReadRPCTimeoutGet(params *StorageProxyReadRPCTimeoutGetParams) (*StorageProxyReadRPCTimeoutGetOK, error)

	StorageProxyReadRPCTimeoutPost(params *StorageProxyReadRPCTimeoutPostParams) (*StorageProxyReadRPCTimeoutPostOK, error)

	StorageProxyReloadTriggerClassesPost(params *StorageProxyReloadTriggerClassesPostParams) (*StorageProxyReloadTriggerClassesPostOK, error)

	StorageProxyRPCTimeoutGet(params *StorageProxyRPCTimeoutGetParams) (*StorageProxyRPCTimeoutGetOK, error)

	StorageProxyRPCTimeoutPost(params *StorageProxyRPCTimeoutPostParams) (*StorageProxyRPCTimeoutPostOK, error)

	StorageProxySchemaVersionsGet(params *StorageProxySchemaVersionsGetParams) (*StorageProxySchemaVersionsGetOK, error)

	StorageProxyTotalHintsGet(params *StorageProxyTotalHintsGetParams) (*StorageProxyTotalHintsGetOK, error)

	StorageProxyTruncateRPCTimeoutGet(params *StorageProxyTruncateRPCTimeoutGetParams) (*StorageProxyTruncateRPCTimeoutGetOK, error)

	StorageProxyTruncateRPCTimeoutPost(params *StorageProxyTruncateRPCTimeoutPostParams) (*StorageProxyTruncateRPCTimeoutPostOK, error)

	StorageProxyWriteRPCTimeoutGet(params *StorageProxyWriteRPCTimeoutGetParams) (*StorageProxyWriteRPCTimeoutGetOK, error)

	StorageProxyWriteRPCTimeoutPost(params *StorageProxyWriteRPCTimeoutPostParams) (*StorageProxyWriteRPCTimeoutPostOK, error)

	StorageServiceActiveRepairGet(params *StorageServiceActiveRepairGetParams) (*StorageServiceActiveRepairGetOK, error)

	StorageServiceAutoCompactionByKeyspaceDelete(params *StorageServiceAutoCompactionByKeyspaceDeleteParams) (*StorageServiceAutoCompactionByKeyspaceDeleteOK, error)

	StorageServiceAutoCompactionByKeyspacePost(params *StorageServiceAutoCompactionByKeyspacePostParams) (*StorageServiceAutoCompactionByKeyspacePostOK, error)

	StorageServiceBatchSizeFailureThresholdGet(params *StorageServiceBatchSizeFailureThresholdGetParams) (*StorageServiceBatchSizeFailureThresholdGetOK, error)

	StorageServiceBatchSizeFailureThresholdPost(params *StorageServiceBatchSizeFailureThresholdPostParams) (*StorageServiceBatchSizeFailureThresholdPostOK, error)

	StorageServiceBulkLoadAsyncByPathGet(params *StorageServiceBulkLoadAsyncByPathGetParams) (*StorageServiceBulkLoadAsyncByPathGetOK, error)

	StorageServiceBulkLoadByPathPost(params *StorageServiceBulkLoadByPathPostParams) (*StorageServiceBulkLoadByPathPostOK, error)

	StorageServiceClusterNameGet(params *StorageServiceClusterNameGetParams) (*StorageServiceClusterNameGetOK, error)

	StorageServiceCommitlogGet(params *StorageServiceCommitlogGetParams) (*StorageServiceCommitlogGetOK, error)

	StorageServiceCompactionThroughputGet(params *StorageServiceCompactionThroughputGetParams) (*StorageServiceCompactionThroughputGetOK, error)

	StorageServiceCompactionThroughputPost(params *StorageServiceCompactionThroughputPostParams) (*StorageServiceCompactionThroughputPostOK, error)

	StorageServiceDataFileLocationsGet(params *StorageServiceDataFileLocationsGetParams) (*StorageServiceDataFileLocationsGetOK, error)

	StorageServiceDecommissionPost(params *StorageServiceDecommissionPostParams) (*StorageServiceDecommissionPostOK, error)

	StorageServiceDeliverHintsPost(params *StorageServiceDeliverHintsPostParams) (*StorageServiceDeliverHintsPostOK, error)

	StorageServiceDescribeRingByKeyspaceGet(params *StorageServiceDescribeRingByKeyspaceGetParams) (*StorageServiceDescribeRingByKeyspaceGetOK, error)

	StorageServiceDrainGet(params *StorageServiceDrainGetParams) (*StorageServiceDrainGetOK, error)

	StorageServiceDrainPost(params *StorageServiceDrainPostParams) (*StorageServiceDrainPostOK, error)

	StorageServiceForceRemoveCompletionPost(params *StorageServiceForceRemoveCompletionPostParams) (*StorageServiceForceRemoveCompletionPostOK, error)

	StorageServiceForceTerminatePost(params *StorageServiceForceTerminatePostParams) (*StorageServiceForceTerminatePostOK, error)

	StorageServiceForceTerminateRepairPost(params *StorageServiceForceTerminateRepairPostParams) (*StorageServiceForceTerminateRepairPostOK, error)

	StorageServiceGenerationNumberGet(params *StorageServiceGenerationNumberGetParams) (*StorageServiceGenerationNumberGetOK, error)

	StorageServiceGossipingDelete(params *StorageServiceGossipingDeleteParams) (*StorageServiceGossipingDeleteOK, error)

	StorageServiceGossipingGet(params *StorageServiceGossipingGetParams) (*StorageServiceGossipingGetOK, error)

	StorageServiceGossipingPost(params *StorageServiceGossipingPostParams) (*StorageServiceGossipingPostOK, error)

	StorageServiceHintedHandoffPost(params *StorageServiceHintedHandoffPostParams) (*StorageServiceHintedHandoffPostOK, error)

	StorageServiceHostIDGet(params *StorageServiceHostIDGetParams) (*StorageServiceHostIDGetOK, error)

	StorageServiceHostidLocalGet(params *StorageServiceHostidLocalGetParams) (*StorageServiceHostidLocalGetOK, error)

	StorageServiceIncrementalBackupsGet(params *StorageServiceIncrementalBackupsGetParams) (*StorageServiceIncrementalBackupsGetOK, error)

	StorageServiceIncrementalBackupsPost(params *StorageServiceIncrementalBackupsPostParams) (*StorageServiceIncrementalBackupsPostOK, error)

	StorageServiceIsInitializedGet(params *StorageServiceIsInitializedGetParams) (*StorageServiceIsInitializedGetOK, error)

	StorageServiceIsStartingGet(params *StorageServiceIsStartingGetParams) (*StorageServiceIsStartingGetOK, error)

	StorageServiceJoinRingGet(params *StorageServiceJoinRingGetParams) (*StorageServiceJoinRingGetOK, error)

	StorageServiceJoinRingPost(params *StorageServiceJoinRingPostParams) (*StorageServiceJoinRingPostOK, error)

	StorageServiceKeyspaceCleanupByKeyspacePost(params *StorageServiceKeyspaceCleanupByKeyspacePostParams) (*StorageServiceKeyspaceCleanupByKeyspacePostOK, error)

	StorageServiceKeyspaceCompactionByKeyspacePost(params *StorageServiceKeyspaceCompactionByKeyspacePostParams) (*StorageServiceKeyspaceCompactionByKeyspacePostOK, error)

	StorageServiceKeyspaceFlushByKeyspacePost(params *StorageServiceKeyspaceFlushByKeyspacePostParams) (*StorageServiceKeyspaceFlushByKeyspacePostOK, error)

	StorageServiceKeyspaceScrubByKeyspaceGet(params *StorageServiceKeyspaceScrubByKeyspaceGetParams) (*StorageServiceKeyspaceScrubByKeyspaceGetOK, error)

	StorageServiceKeyspaceUpgradeSstablesByKeyspaceGet(params *StorageServiceKeyspaceUpgradeSstablesByKeyspaceGetParams) (*StorageServiceKeyspaceUpgradeSstablesByKeyspaceGetOK, error)

	StorageServiceKeyspacesGet(params *StorageServiceKeyspacesGetParams) (*StorageServiceKeyspacesGetOK, error)

	StorageServiceLoadGet(params *StorageServiceLoadGetParams) (*StorageServiceLoadGetOK, error)

	StorageServiceLoadMapGet(params *StorageServiceLoadMapGetParams) (*StorageServiceLoadMapGetOK, error)

	StorageServiceLoggingLevelGet(params *StorageServiceLoggingLevelGetParams) (*StorageServiceLoggingLevelGetOK, error)

	StorageServiceLoggingLevelPost(params *StorageServiceLoggingLevelPostParams) (*StorageServiceLoggingLevelPostOK, error)

	StorageServiceMetricsExceptionsGet(params *StorageServiceMetricsExceptionsGetParams) (*StorageServiceMetricsExceptionsGetOK, error)

	StorageServiceMetricsHintsInProgressGet(params *StorageServiceMetricsHintsInProgressGetParams) (*StorageServiceMetricsHintsInProgressGetOK, error)

	StorageServiceMetricsLoadGet(params *StorageServiceMetricsLoadGetParams) (*StorageServiceMetricsLoadGetOK, error)

	StorageServiceMetricsTotalHintsGet(params *StorageServiceMetricsTotalHintsGetParams) (*StorageServiceMetricsTotalHintsGetOK, error)

	StorageServiceMovePost(params *StorageServiceMovePostParams) (*StorageServiceMovePostOK, error)

	StorageServiceNativeTransportDelete(params *StorageServiceNativeTransportDeleteParams) (*StorageServiceNativeTransportDeleteOK, error)

	StorageServiceNativeTransportGet(params *StorageServiceNativeTransportGetParams) (*StorageServiceNativeTransportGetOK, error)

	StorageServiceNativeTransportPost(params *StorageServiceNativeTransportPostParams) (*StorageServiceNativeTransportPostOK, error)

	StorageServiceNaturalEndpointsByKeyspaceGet(params *StorageServiceNaturalEndpointsByKeyspaceGetParams) (*StorageServiceNaturalEndpointsByKeyspaceGetOK, error)

	StorageServiceNodesJoiningGet(params *StorageServiceNodesJoiningGetParams) (*StorageServiceNodesJoiningGetOK, error)

	StorageServiceNodesLeavingGet(params *StorageServiceNodesLeavingGetParams) (*StorageServiceNodesLeavingGetOK, error)

	StorageServiceNodesMovingGet(params *StorageServiceNodesMovingGetParams) (*StorageServiceNodesMovingGetOK, error)

	StorageServiceOperationModeGet(params *StorageServiceOperationModeGetParams) (*StorageServiceOperationModeGetOK, error)

	StorageServiceOwnershipByKeyspaceGet(params *StorageServiceOwnershipByKeyspaceGetParams) (*StorageServiceOwnershipByKeyspaceGetOK, error)

	StorageServiceOwnershipGet(params *StorageServiceOwnershipGetParams) (*StorageServiceOwnershipGetOK, error)

	StorageServicePartitionerNameGet(params *StorageServicePartitionerNameGetParams) (*StorageServicePartitionerNameGetOK, error)

	StorageServicePendingRangeByKeyspaceGet(params *StorageServicePendingRangeByKeyspaceGetParams) (*StorageServicePendingRangeByKeyspaceGetOK, error)

	StorageServiceRangeToEndpointMapByKeyspaceGet(params *StorageServiceRangeToEndpointMapByKeyspaceGetParams) (*StorageServiceRangeToEndpointMapByKeyspaceGetOK, error)

	StorageServiceRebuildPost(params *StorageServiceRebuildPostParams) (*StorageServiceRebuildPostOK, error)

	StorageServiceReleaseVersionGet(params *StorageServiceReleaseVersionGetParams) (*StorageServiceReleaseVersionGetOK, error)

	StorageServiceRelocalSchemaPost(params *StorageServiceRelocalSchemaPostParams) (*StorageServiceRelocalSchemaPostOK, error)

	StorageServiceRemovalStatusGet(params *StorageServiceRemovalStatusGetParams) (*StorageServiceRemovalStatusGetOK, error)

	StorageServiceRemoveNodePost(params *StorageServiceRemoveNodePostParams) (*StorageServiceRemoveNodePostOK, error)

	StorageServiceRepairAsyncByKeyspaceGet(params *StorageServiceRepairAsyncByKeyspaceGetParams) (*StorageServiceRepairAsyncByKeyspaceGetOK, error)

	StorageServiceRepairAsyncByKeyspacePost(params *StorageServiceRepairAsyncByKeyspacePostParams) (*StorageServiceRepairAsyncByKeyspacePostOK, error)

	StorageServiceRepairStatus(params *StorageServiceRepairStatusParams) (*StorageServiceRepairStatusOK, error)

	StorageServiceRescheduleFailedDeletionsPost(params *StorageServiceRescheduleFailedDeletionsPostParams) (*StorageServiceRescheduleFailedDeletionsPostOK, error)

	StorageServiceRPCServerDelete(params *StorageServiceRPCServerDeleteParams) (*StorageServiceRPCServerDeleteOK, error)

	StorageServiceRPCServerGet(params *StorageServiceRPCServerGetParams) (*StorageServiceRPCServerGetOK, error)

	StorageServiceRPCServerPost(params *StorageServiceRPCServerPostParams) (*StorageServiceRPCServerPostOK, error)

	StorageServiceSampleKeyRangeGet(params *StorageServiceSampleKeyRangeGetParams) (*StorageServiceSampleKeyRangeGetOK, error)

	StorageServiceSavedCachesLocationGet(params *StorageServiceSavedCachesLocationGetParams) (*StorageServiceSavedCachesLocationGetOK, error)

	StorageServiceSchemaVersionGet(params *StorageServiceSchemaVersionGetParams) (*StorageServiceSchemaVersionGetOK, error)

	StorageServiceScyllaReleaseVersionGet(params *StorageServiceScyllaReleaseVersionGetParams) (*StorageServiceScyllaReleaseVersionGetOK, error)

	StorageServiceSlowQueryGet(params *StorageServiceSlowQueryGetParams) (*StorageServiceSlowQueryGetOK, error)

	StorageServiceSlowQueryPost(params *StorageServiceSlowQueryPostParams) (*StorageServiceSlowQueryPostOK, error)

	StorageServiceSnapshotsDelete(params *StorageServiceSnapshotsDeleteParams) (*StorageServiceSnapshotsDeleteOK, error)

	StorageServiceSnapshotsGet(params *StorageServiceSnapshotsGetParams) (*StorageServiceSnapshotsGetOK, error)

	StorageServiceSnapshotsPost(params *StorageServiceSnapshotsPostParams) (*StorageServiceSnapshotsPostOK, error)

	StorageServiceSnapshotsSizeTrueGet(params *StorageServiceSnapshotsSizeTrueGetParams) (*StorageServiceSnapshotsSizeTrueGetOK, error)

	StorageServiceSstablesByKeyspacePost(params *StorageServiceSstablesByKeyspacePostParams) (*StorageServiceSstablesByKeyspacePostOK, error)

	StorageServiceStopDaemonPost(params *StorageServiceStopDaemonPostParams) (*StorageServiceStopDaemonPostOK, error)

	StorageServiceStreamThroughputGet(params *StorageServiceStreamThroughputGetParams) (*StorageServiceStreamThroughputGetOK, error)

	StorageServiceStreamThroughputPost(params *StorageServiceStreamThroughputPostParams) (*StorageServiceStreamThroughputPostOK, error)

	StorageServiceTabletsBalancingPost(params *StorageServiceTabletsBalancingPostParams) (*StorageServiceTabletsBalancingPostOK, error)

	StorageServiceTokensByEndpointGet(params *StorageServiceTokensByEndpointGetParams) (*StorageServiceTokensByEndpointGetOK, error)

	StorageServiceTokensEndpointGet(params *StorageServiceTokensEndpointGetParams) (*StorageServiceTokensEndpointGetOK, error)

	StorageServiceTokensGet(params *StorageServiceTokensGetParams) (*StorageServiceTokensGetOK, error)

	StorageServiceTombstoneFailureThresholdGet(params *StorageServiceTombstoneFailureThresholdGetParams) (*StorageServiceTombstoneFailureThresholdGetOK, error)

	StorageServiceTombstoneFailureThresholdPost(params *StorageServiceTombstoneFailureThresholdPostParams) (*StorageServiceTombstoneFailureThresholdPostOK, error)

	StorageServiceTombstoneWarnThresholdGet(params *StorageServiceTombstoneWarnThresholdGetParams) (*StorageServiceTombstoneWarnThresholdGetOK, error)

	StorageServiceTombstoneWarnThresholdPost(params *StorageServiceTombstoneWarnThresholdPostParams) (*StorageServiceTombstoneWarnThresholdPostOK, error)

	StorageServiceTraceProbabilityGet(params *StorageServiceTraceProbabilityGetParams) (*StorageServiceTraceProbabilityGetOK, error)

	StorageServiceTraceProbabilityPost(params *StorageServiceTraceProbabilityPostParams) (*StorageServiceTraceProbabilityPostOK, error)

	StorageServiceTruncateByKeyspacePost(params *StorageServiceTruncateByKeyspacePostParams) (*StorageServiceTruncateByKeyspacePostOK, error)

	StorageServiceUpdateSnitchPost(params *StorageServiceUpdateSnitchPostParams) (*StorageServiceUpdateSnitchPostOK, error)

	StorageServiceViewBuildStatusesByKeyspaceAndViewGet(params *StorageServiceViewBuildStatusesByKeyspaceAndViewGetParams) (*StorageServiceViewBuildStatusesByKeyspaceAndViewGetOK, error)

	StreamManagerGet(params *StreamManagerGetParams) (*StreamManagerGetOK, error)

	StreamManagerMetricsIncomingByPeerGet(params *StreamManagerMetricsIncomingByPeerGetParams) (*StreamManagerMetricsIncomingByPeerGetOK, error)

	StreamManagerMetricsIncomingGet(params *StreamManagerMetricsIncomingGetParams) (*StreamManagerMetricsIncomingGetOK, error)

	StreamManagerMetricsOutboundGet(params *StreamManagerMetricsOutboundGetParams) (*StreamManagerMetricsOutboundGetOK, error)

	StreamManagerMetricsOutgoingByPeerGet(params *StreamManagerMetricsOutgoingByPeerGetParams) (*StreamManagerMetricsOutgoingByPeerGetOK, error)

	StreamManagerMetricsOutgoingGet(params *StreamManagerMetricsOutgoingGetParams) (*StreamManagerMetricsOutgoingGetOK, error)

	SystemLoggerByNameGet(params *SystemLoggerByNameGetParams) (*SystemLoggerByNameGetOK, error)

	SystemLoggerByNamePost(params *SystemLoggerByNamePostParams) (*SystemLoggerByNamePostOK, error)

	SystemLoggerGet(params *SystemLoggerGetParams) (*SystemLoggerGetOK, error)

	SystemLoggerPost(params *SystemLoggerPostParams) (*SystemLoggerPostOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CacheServiceCounterCacheCapacityPost sets counter cache capacity in mb

set counter cache capacity in mb
*/
func (a *Client) CacheServiceCounterCacheCapacityPost(params *CacheServiceCounterCacheCapacityPostParams) (*CacheServiceCounterCacheCapacityPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceCounterCacheCapacityPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceCounterCacheCapacityPost",
		Method:             "POST",
		PathPattern:        "/cache_service/counter_cache_capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceCounterCacheCapacityPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceCounterCacheCapacityPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceCounterCacheCapacityPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceCounterCacheKeysToSaveGet gets counter cache keys to save

get counter cache keys to save
*/
func (a *Client) CacheServiceCounterCacheKeysToSaveGet(params *CacheServiceCounterCacheKeysToSaveGetParams) (*CacheServiceCounterCacheKeysToSaveGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceCounterCacheKeysToSaveGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceCounterCacheKeysToSaveGet",
		Method:             "GET",
		PathPattern:        "/cache_service/counter_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceCounterCacheKeysToSaveGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceCounterCacheKeysToSaveGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceCounterCacheKeysToSaveGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceCounterCacheKeysToSavePost sets counter cache keys to save

set counter cache keys to save
*/
func (a *Client) CacheServiceCounterCacheKeysToSavePost(params *CacheServiceCounterCacheKeysToSavePostParams) (*CacheServiceCounterCacheKeysToSavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceCounterCacheKeysToSavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceCounterCacheKeysToSavePost",
		Method:             "POST",
		PathPattern:        "/cache_service/counter_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceCounterCacheKeysToSavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceCounterCacheKeysToSavePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceCounterCacheKeysToSavePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceCounterCacheSavePeriodGet gets counter cache save period in seconds

get counter cache save period in seconds
*/
func (a *Client) CacheServiceCounterCacheSavePeriodGet(params *CacheServiceCounterCacheSavePeriodGetParams) (*CacheServiceCounterCacheSavePeriodGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceCounterCacheSavePeriodGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceCounterCacheSavePeriodGet",
		Method:             "GET",
		PathPattern:        "/cache_service/counter_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceCounterCacheSavePeriodGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceCounterCacheSavePeriodGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceCounterCacheSavePeriodGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceCounterCacheSavePeriodPost sets counter cache save period in seconds

set counter cache save period in seconds
*/
func (a *Client) CacheServiceCounterCacheSavePeriodPost(params *CacheServiceCounterCacheSavePeriodPostParams) (*CacheServiceCounterCacheSavePeriodPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceCounterCacheSavePeriodPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceCounterCacheSavePeriodPost",
		Method:             "POST",
		PathPattern:        "/cache_service/counter_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceCounterCacheSavePeriodPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceCounterCacheSavePeriodPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceCounterCacheSavePeriodPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceInvalidateCounterCachePost invalidates counter cache

invalidate counter cache
*/
func (a *Client) CacheServiceInvalidateCounterCachePost(params *CacheServiceInvalidateCounterCachePostParams) (*CacheServiceInvalidateCounterCachePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceInvalidateCounterCachePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceInvalidateCounterCachePost",
		Method:             "POST",
		PathPattern:        "/cache_service/invalidate_counter_cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceInvalidateCounterCachePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceInvalidateCounterCachePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceInvalidateCounterCachePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceInvalidateKeyCachePost invalidates key cache

invalidate the key cache; for use after invalidating row cache
*/
func (a *Client) CacheServiceInvalidateKeyCachePost(params *CacheServiceInvalidateKeyCachePostParams) (*CacheServiceInvalidateKeyCachePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceInvalidateKeyCachePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceInvalidateKeyCachePost",
		Method:             "POST",
		PathPattern:        "/cache_service/invalidate_key_cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceInvalidateKeyCachePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceInvalidateKeyCachePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceInvalidateKeyCachePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceKeyCacheCapacityPost sets key cache capacity in mb

set key cache capacity in mb
*/
func (a *Client) CacheServiceKeyCacheCapacityPost(params *CacheServiceKeyCacheCapacityPostParams) (*CacheServiceKeyCacheCapacityPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceKeyCacheCapacityPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceKeyCacheCapacityPost",
		Method:             "POST",
		PathPattern:        "/cache_service/key_cache_capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceKeyCacheCapacityPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceKeyCacheCapacityPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceKeyCacheCapacityPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceKeyCacheKeysToSaveGet gets key cache keys to save

get key cache keys to save
*/
func (a *Client) CacheServiceKeyCacheKeysToSaveGet(params *CacheServiceKeyCacheKeysToSaveGetParams) (*CacheServiceKeyCacheKeysToSaveGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceKeyCacheKeysToSaveGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceKeyCacheKeysToSaveGet",
		Method:             "GET",
		PathPattern:        "/cache_service/key_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceKeyCacheKeysToSaveGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceKeyCacheKeysToSaveGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceKeyCacheKeysToSaveGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceKeyCacheKeysToSavePost sets key cache keys to save

set key cache keys to save
*/
func (a *Client) CacheServiceKeyCacheKeysToSavePost(params *CacheServiceKeyCacheKeysToSavePostParams) (*CacheServiceKeyCacheKeysToSavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceKeyCacheKeysToSavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceKeyCacheKeysToSavePost",
		Method:             "POST",
		PathPattern:        "/cache_service/key_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceKeyCacheKeysToSavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceKeyCacheKeysToSavePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceKeyCacheKeysToSavePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceKeyCacheSavePeriodGet gets key cache save period in seconds

get key cache save period in seconds
*/
func (a *Client) CacheServiceKeyCacheSavePeriodGet(params *CacheServiceKeyCacheSavePeriodGetParams) (*CacheServiceKeyCacheSavePeriodGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceKeyCacheSavePeriodGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceKeyCacheSavePeriodGet",
		Method:             "GET",
		PathPattern:        "/cache_service/key_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceKeyCacheSavePeriodGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceKeyCacheSavePeriodGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceKeyCacheSavePeriodGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceKeyCacheSavePeriodPost sets key cache save period in seconds

set key cache save period in seconds
*/
func (a *Client) CacheServiceKeyCacheSavePeriodPost(params *CacheServiceKeyCacheSavePeriodPostParams) (*CacheServiceKeyCacheSavePeriodPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceKeyCacheSavePeriodPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceKeyCacheSavePeriodPost",
		Method:             "POST",
		PathPattern:        "/cache_service/key_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceKeyCacheSavePeriodPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceKeyCacheSavePeriodPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceKeyCacheSavePeriodPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterCapacityGet gets counter capacity

Get counter capacity
*/
func (a *Client) CacheServiceMetricsCounterCapacityGet(params *CacheServiceMetricsCounterCapacityGetParams) (*CacheServiceMetricsCounterCapacityGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterCapacityGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterCapacityGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterCapacityGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterCapacityGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterCapacityGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterEntriesGet gets counter entries

Get counter entries
*/
func (a *Client) CacheServiceMetricsCounterEntriesGet(params *CacheServiceMetricsCounterEntriesGetParams) (*CacheServiceMetricsCounterEntriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterEntriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterEntriesGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterEntriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterEntriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterEntriesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterHitRateGet gets counter hit rate

Get counter hit rate
*/
func (a *Client) CacheServiceMetricsCounterHitRateGet(params *CacheServiceMetricsCounterHitRateGetParams) (*CacheServiceMetricsCounterHitRateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterHitRateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterHitRateGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/hit_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterHitRateGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterHitRateGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterHitRateGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterHitsGet gets counter hits

Get counter hits
*/
func (a *Client) CacheServiceMetricsCounterHitsGet(params *CacheServiceMetricsCounterHitsGetParams) (*CacheServiceMetricsCounterHitsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterHitsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterHitsGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/hits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterHitsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterHitsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterHitsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterHitsMovingAvrageGet gets counter hits moving avrage

Get counter hits moving avrage
*/
func (a *Client) CacheServiceMetricsCounterHitsMovingAvrageGet(params *CacheServiceMetricsCounterHitsMovingAvrageGetParams) (*CacheServiceMetricsCounterHitsMovingAvrageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterHitsMovingAvrageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterHitsMovingAvrageGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/hits_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterHitsMovingAvrageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterHitsMovingAvrageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterHitsMovingAvrageGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterRequestsGet gets counter requests

Get counter requests
*/
func (a *Client) CacheServiceMetricsCounterRequestsGet(params *CacheServiceMetricsCounterRequestsGetParams) (*CacheServiceMetricsCounterRequestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterRequestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterRequestsGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterRequestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterRequestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterRequestsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterRequestsMovingAvrageGet gets counter requests moving avrage

Get counter requests moving avrage
*/
func (a *Client) CacheServiceMetricsCounterRequestsMovingAvrageGet(params *CacheServiceMetricsCounterRequestsMovingAvrageGetParams) (*CacheServiceMetricsCounterRequestsMovingAvrageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterRequestsMovingAvrageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterRequestsMovingAvrageGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/requests_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterRequestsMovingAvrageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterRequestsMovingAvrageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterRequestsMovingAvrageGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsCounterSizeGet gets counter size

Get counter cache waited size
*/
func (a *Client) CacheServiceMetricsCounterSizeGet(params *CacheServiceMetricsCounterSizeGetParams) (*CacheServiceMetricsCounterSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsCounterSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsCounterSizeGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsCounterSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsCounterSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsCounterSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeyCapacityGet gets key capacity

Get key capacity
*/
func (a *Client) CacheServiceMetricsKeyCapacityGet(params *CacheServiceMetricsKeyCapacityGetParams) (*CacheServiceMetricsKeyCapacityGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeyCapacityGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeyCapacityGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeyCapacityGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeyCapacityGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeyCapacityGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeyEntriesGet gets key entries

Get key entries
*/
func (a *Client) CacheServiceMetricsKeyEntriesGet(params *CacheServiceMetricsKeyEntriesGetParams) (*CacheServiceMetricsKeyEntriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeyEntriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeyEntriesGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeyEntriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeyEntriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeyEntriesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeyHitRateGet gets key hit rate

Get key hit rate
*/
func (a *Client) CacheServiceMetricsKeyHitRateGet(params *CacheServiceMetricsKeyHitRateGetParams) (*CacheServiceMetricsKeyHitRateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeyHitRateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeyHitRateGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/hit_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeyHitRateGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeyHitRateGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeyHitRateGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeyHitsGet gets key hits

Get key hits
*/
func (a *Client) CacheServiceMetricsKeyHitsGet(params *CacheServiceMetricsKeyHitsGetParams) (*CacheServiceMetricsKeyHitsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeyHitsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeyHitsGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/hits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeyHitsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeyHitsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeyHitsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeyHitsMovingAvrageGet gets key hits moving avrage

Get key hits moving avrage
*/
func (a *Client) CacheServiceMetricsKeyHitsMovingAvrageGet(params *CacheServiceMetricsKeyHitsMovingAvrageGetParams) (*CacheServiceMetricsKeyHitsMovingAvrageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeyHitsMovingAvrageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeyHitsMovingAvrageGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/hits_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeyHitsMovingAvrageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeyHitsMovingAvrageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeyHitsMovingAvrageGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeyRequestsGet gets key requests

Get key requests
*/
func (a *Client) CacheServiceMetricsKeyRequestsGet(params *CacheServiceMetricsKeyRequestsGetParams) (*CacheServiceMetricsKeyRequestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeyRequestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeyRequestsGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeyRequestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeyRequestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeyRequestsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeyRequestsMovingAvrageGet gets key requests moving avrage

Get key requests moving avrage
*/
func (a *Client) CacheServiceMetricsKeyRequestsMovingAvrageGet(params *CacheServiceMetricsKeyRequestsMovingAvrageGetParams) (*CacheServiceMetricsKeyRequestsMovingAvrageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeyRequestsMovingAvrageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeyRequestsMovingAvrageGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/requests_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeyRequestsMovingAvrageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeyRequestsMovingAvrageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeyRequestsMovingAvrageGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsKeySizeGet gets key size

Get key cache waited size
*/
func (a *Client) CacheServiceMetricsKeySizeGet(params *CacheServiceMetricsKeySizeGetParams) (*CacheServiceMetricsKeySizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsKeySizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsKeySizeGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsKeySizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsKeySizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsKeySizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowCapacityGet gets row capacity

Get row capacity
*/
func (a *Client) CacheServiceMetricsRowCapacityGet(params *CacheServiceMetricsRowCapacityGetParams) (*CacheServiceMetricsRowCapacityGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowCapacityGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowCapacityGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowCapacityGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowCapacityGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowCapacityGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowEntriesGet gets row entries

Get row entries
*/
func (a *Client) CacheServiceMetricsRowEntriesGet(params *CacheServiceMetricsRowEntriesGetParams) (*CacheServiceMetricsRowEntriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowEntriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowEntriesGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowEntriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowEntriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowEntriesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowHitRateGet gets row hit rate

Get row hit rate
*/
func (a *Client) CacheServiceMetricsRowHitRateGet(params *CacheServiceMetricsRowHitRateGetParams) (*CacheServiceMetricsRowHitRateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowHitRateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowHitRateGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/hit_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowHitRateGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowHitRateGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowHitRateGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowHitsGet gets row hits

Get row hits
*/
func (a *Client) CacheServiceMetricsRowHitsGet(params *CacheServiceMetricsRowHitsGetParams) (*CacheServiceMetricsRowHitsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowHitsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowHitsGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/hits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowHitsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowHitsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowHitsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowHitsMovingAvrageGet gets row hits moving avrage

Get row hits moving avrage
*/
func (a *Client) CacheServiceMetricsRowHitsMovingAvrageGet(params *CacheServiceMetricsRowHitsMovingAvrageGetParams) (*CacheServiceMetricsRowHitsMovingAvrageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowHitsMovingAvrageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowHitsMovingAvrageGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/hits_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowHitsMovingAvrageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowHitsMovingAvrageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowHitsMovingAvrageGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowRequestsGet gets row requests

Get row requests
*/
func (a *Client) CacheServiceMetricsRowRequestsGet(params *CacheServiceMetricsRowRequestsGetParams) (*CacheServiceMetricsRowRequestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowRequestsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowRequestsGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowRequestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowRequestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowRequestsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowRequestsMovingAvrageGet gets row requests moving avrage

Get row requests moving avrage
*/
func (a *Client) CacheServiceMetricsRowRequestsMovingAvrageGet(params *CacheServiceMetricsRowRequestsMovingAvrageGetParams) (*CacheServiceMetricsRowRequestsMovingAvrageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowRequestsMovingAvrageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowRequestsMovingAvrageGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/requests_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowRequestsMovingAvrageGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowRequestsMovingAvrageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowRequestsMovingAvrageGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceMetricsRowSizeGet gets row size

Get row cache waited size
*/
func (a *Client) CacheServiceMetricsRowSizeGet(params *CacheServiceMetricsRowSizeGetParams) (*CacheServiceMetricsRowSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceMetricsRowSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceMetricsRowSizeGet",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceMetricsRowSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceMetricsRowSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceMetricsRowSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceRowCacheCapacityPost sets row cache capacity in mb

set row cache capacity in mb
*/
func (a *Client) CacheServiceRowCacheCapacityPost(params *CacheServiceRowCacheCapacityPostParams) (*CacheServiceRowCacheCapacityPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceRowCacheCapacityPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceRowCacheCapacityPost",
		Method:             "POST",
		PathPattern:        "/cache_service/row_cache_capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceRowCacheCapacityPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceRowCacheCapacityPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceRowCacheCapacityPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceRowCacheKeysToSaveGet gets row cache keys to save

get row cache keys to save
*/
func (a *Client) CacheServiceRowCacheKeysToSaveGet(params *CacheServiceRowCacheKeysToSaveGetParams) (*CacheServiceRowCacheKeysToSaveGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceRowCacheKeysToSaveGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceRowCacheKeysToSaveGet",
		Method:             "GET",
		PathPattern:        "/cache_service/row_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceRowCacheKeysToSaveGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceRowCacheKeysToSaveGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceRowCacheKeysToSaveGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceRowCacheKeysToSavePost sets row cache keys to save

set row cache keys to save
*/
func (a *Client) CacheServiceRowCacheKeysToSavePost(params *CacheServiceRowCacheKeysToSavePostParams) (*CacheServiceRowCacheKeysToSavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceRowCacheKeysToSavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceRowCacheKeysToSavePost",
		Method:             "POST",
		PathPattern:        "/cache_service/row_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceRowCacheKeysToSavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceRowCacheKeysToSavePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceRowCacheKeysToSavePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceRowCacheSavePeriodGet gets row cache save period in seconds

get row cache save period in seconds
*/
func (a *Client) CacheServiceRowCacheSavePeriodGet(params *CacheServiceRowCacheSavePeriodGetParams) (*CacheServiceRowCacheSavePeriodGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceRowCacheSavePeriodGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceRowCacheSavePeriodGet",
		Method:             "GET",
		PathPattern:        "/cache_service/row_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceRowCacheSavePeriodGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceRowCacheSavePeriodGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceRowCacheSavePeriodGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceRowCacheSavePeriodPost sets row cache save period in seconds

set row cache save period in seconds
*/
func (a *Client) CacheServiceRowCacheSavePeriodPost(params *CacheServiceRowCacheSavePeriodPostParams) (*CacheServiceRowCacheSavePeriodPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceRowCacheSavePeriodPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceRowCacheSavePeriodPost",
		Method:             "POST",
		PathPattern:        "/cache_service/row_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceRowCacheSavePeriodPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceRowCacheSavePeriodPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceRowCacheSavePeriodPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CacheServiceSaveCachesPost saves caches

save row and key caches
*/
func (a *Client) CacheServiceSaveCachesPost(params *CacheServiceSaveCachesPostParams) (*CacheServiceSaveCachesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheServiceSaveCachesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CacheServiceSaveCachesPost",
		Method:             "POST",
		PathPattern:        "/cache_service/save_caches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CacheServiceSaveCachesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheServiceSaveCachesPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CacheServiceSaveCachesPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectdByPluginidGet gets collectd

Get a collectd value
*/
func (a *Client) CollectdByPluginidGet(params *CollectdByPluginidGetParams) (*CollectdByPluginidGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectdByPluginidGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CollectdByPluginidGet",
		Method:             "GET",
		PathPattern:        "/collectd/{pluginid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CollectdByPluginidGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectdByPluginidGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectdByPluginidGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectdByPluginidPost enables collectd

Start reporting on one or more collectd metric
*/
func (a *Client) CollectdByPluginidPost(params *CollectdByPluginidPostParams) (*CollectdByPluginidPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectdByPluginidPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CollectdByPluginidPost",
		Method:             "POST",
		PathPattern:        "/collectd/{pluginid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CollectdByPluginidPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectdByPluginidPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectdByPluginidPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectdGet gets collectd items

Get a list of all collectd metrics and their status
*/
func (a *Client) CollectdGet(params *CollectdGetParams) (*CollectdGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectdGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CollectdGet",
		Method:             "GET",
		PathPattern:        "/collectd/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CollectdGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectdGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectdGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectdPost enables all collectd

Enable or disable all collectd metrics
*/
func (a *Client) CollectdPost(params *CollectdPostParams) (*CollectdPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectdPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CollectdPost",
		Method:             "POST",
		PathPattern:        "/collectd/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CollectdPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectdPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectdPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyAutocompactionByNameDelete disables auto compaction

Disable table auto compaction
*/
func (a *Client) ColumnFamilyAutocompactionByNameDelete(params *ColumnFamilyAutocompactionByNameDeleteParams) (*ColumnFamilyAutocompactionByNameDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyAutocompactionByNameDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyAutocompactionByNameDelete",
		Method:             "DELETE",
		PathPattern:        "/column_family/autocompaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyAutocompactionByNameDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyAutocompactionByNameDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyAutocompactionByNameDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyAutocompactionByNameGet is auto compaction enabled

check if the auto_compaction property is enabled for a given table
*/
func (a *Client) ColumnFamilyAutocompactionByNameGet(params *ColumnFamilyAutocompactionByNameGetParams) (*ColumnFamilyAutocompactionByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyAutocompactionByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyAutocompactionByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/autocompaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyAutocompactionByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyAutocompactionByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyAutocompactionByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyAutocompactionByNamePost enables auto compaction

Enable table auto compaction
*/
func (a *Client) ColumnFamilyAutocompactionByNamePost(params *ColumnFamilyAutocompactionByNamePostParams) (*ColumnFamilyAutocompactionByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyAutocompactionByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyAutocompactionByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/autocompaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyAutocompactionByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyAutocompactionByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyAutocompactionByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyBuiltIndexesByNameGet gets built indexes

Returns a list of the names of the built column indexes for current store
*/
func (a *Client) ColumnFamilyBuiltIndexesByNameGet(params *ColumnFamilyBuiltIndexesByNameGetParams) (*ColumnFamilyBuiltIndexesByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyBuiltIndexesByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyBuiltIndexesByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/built_indexes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyBuiltIndexesByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyBuiltIndexesByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyBuiltIndexesByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyCompactionByNamePost sets compaction threshold

Sets the minumum and maximum number of sstables in queue before compaction kicks off
*/
func (a *Client) ColumnFamilyCompactionByNamePost(params *ColumnFamilyCompactionByNamePostParams) (*ColumnFamilyCompactionByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyCompactionByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyCompactionByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyCompactionByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyCompactionByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyCompactionByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyCompactionStrategyByNameGet gets compaction strategy class

Gets the compaction strategy class name
*/
func (a *Client) ColumnFamilyCompactionStrategyByNameGet(params *ColumnFamilyCompactionStrategyByNameGetParams) (*ColumnFamilyCompactionStrategyByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyCompactionStrategyByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyCompactionStrategyByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/compaction_strategy/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyCompactionStrategyByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyCompactionStrategyByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyCompactionStrategyByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyCompactionStrategyByNamePost sets compaction strategy class

Sets the compaction strategy by class name
*/
func (a *Client) ColumnFamilyCompactionStrategyByNamePost(params *ColumnFamilyCompactionStrategyByNamePostParams) (*ColumnFamilyCompactionStrategyByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyCompactionStrategyByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyCompactionStrategyByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/compaction_strategy/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyCompactionStrategyByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyCompactionStrategyByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyCompactionStrategyByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyCompressionParametersByNameGet gets compression parameters

get the compression parameters
*/
func (a *Client) ColumnFamilyCompressionParametersByNameGet(params *ColumnFamilyCompressionParametersByNameGetParams) (*ColumnFamilyCompressionParametersByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyCompressionParametersByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyCompressionParametersByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/compression_parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyCompressionParametersByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyCompressionParametersByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyCompressionParametersByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyCompressionParametersByNamePost sets compression parameters

Sets the compression parameters
*/
func (a *Client) ColumnFamilyCompressionParametersByNamePost(params *ColumnFamilyCompressionParametersByNamePostParams) (*ColumnFamilyCompressionParametersByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyCompressionParametersByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyCompressionParametersByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/compression_parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyCompressionParametersByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyCompressionParametersByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyCompressionParametersByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyCrcCheckChanceByNamePost sets crc check chance

Set new crc check chance
*/
func (a *Client) ColumnFamilyCrcCheckChanceByNamePost(params *ColumnFamilyCrcCheckChanceByNamePostParams) (*ColumnFamilyCrcCheckChanceByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyCrcCheckChanceByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyCrcCheckChanceByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/crc_check_chance/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyCrcCheckChanceByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyCrcCheckChanceByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyCrcCheckChanceByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyDroppableRatioByNameGet gets droppable tombstone ratio

Get the ratio of droppable tombstones to real columns (and non-droppable tombstones)
*/
func (a *Client) ColumnFamilyDroppableRatioByNameGet(params *ColumnFamilyDroppableRatioByNameGetParams) (*ColumnFamilyDroppableRatioByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyDroppableRatioByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyDroppableRatioByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/droppable_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyDroppableRatioByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyDroppableRatioByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyDroppableRatioByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyEstimateKeysByNameGet estimates keys

Get the estimate keys
*/
func (a *Client) ColumnFamilyEstimateKeysByNameGet(params *ColumnFamilyEstimateKeysByNameGetParams) (*ColumnFamilyEstimateKeysByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyEstimateKeysByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyEstimateKeysByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/estimate_keys/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyEstimateKeysByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyEstimateKeysByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyEstimateKeysByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyGet gets column family

Get a list of all column family info
*/
func (a *Client) ColumnFamilyGet(params *ColumnFamilyGetParams) (*ColumnFamilyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyGet",
		Method:             "GET",
		PathPattern:        "/column_family/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyLoadSstableByNamePost loads new sstables

Scan through Keyspace/ColumnFamily's data directory determine which SSTables should be loaded and load them
*/
func (a *Client) ColumnFamilyLoadSstableByNamePost(params *ColumnFamilyLoadSstableByNamePostParams) (*ColumnFamilyLoadSstableByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyLoadSstableByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyLoadSstableByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/load/sstable/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyLoadSstableByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyLoadSstableByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyLoadSstableByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMajorCompactionByNamePost forces major compaction

Force a major compaction of this column family
*/
func (a *Client) ColumnFamilyMajorCompactionByNamePost(params *ColumnFamilyMajorCompactionByNamePostParams) (*ColumnFamilyMajorCompactionByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMajorCompactionByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMajorCompactionByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/major_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMajorCompactionByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMajorCompactionByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMajorCompactionByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMaximumCompactionByNameGet gets maximum compaction threshold

get the maximum number of sstables in queue before compaction kicks off
*/
func (a *Client) ColumnFamilyMaximumCompactionByNameGet(params *ColumnFamilyMaximumCompactionByNameGetParams) (*ColumnFamilyMaximumCompactionByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMaximumCompactionByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMaximumCompactionByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/maximum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMaximumCompactionByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMaximumCompactionByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMaximumCompactionByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMaximumCompactionByNamePost sets maximum compaction threshold

Sets the maximum number of sstables in queue before compaction kicks off
*/
func (a *Client) ColumnFamilyMaximumCompactionByNamePost(params *ColumnFamilyMaximumCompactionByNamePostParams) (*ColumnFamilyMaximumCompactionByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMaximumCompactionByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMaximumCompactionByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/maximum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMaximumCompactionByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMaximumCompactionByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMaximumCompactionByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGet gets cf all memtables live data size

Get all of the column family active and not memtables live data size
*/
func (a *Client) ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGet(params *ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetParams) (*ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_live_data_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsAllMemtablesLiveDataSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsAllMemtablesLiveDataSizeGet gets all cf all memtables live data size

Get all memtables active and not of all column family live data size
*/
func (a *Client) ColumnFamilyMetricsAllMemtablesLiveDataSizeGet(params *ColumnFamilyMetricsAllMemtablesLiveDataSizeGetParams) (*ColumnFamilyMetricsAllMemtablesLiveDataSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsAllMemtablesLiveDataSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsAllMemtablesLiveDataSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_live_data_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsAllMemtablesLiveDataSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsAllMemtablesLiveDataSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsAllMemtablesLiveDataSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGet gets cf all memtables off heap size

Get all of the column family active and not memtables off heap size
*/
func (a *Client) ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGet(params *ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetParams) (*ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_off_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsAllMemtablesOffHeapSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsAllMemtablesOffHeapSizeGet gets all cf all memtables off heap size

Get all memtables active and not of all column family off heap size
*/
func (a *Client) ColumnFamilyMetricsAllMemtablesOffHeapSizeGet(params *ColumnFamilyMetricsAllMemtablesOffHeapSizeGetParams) (*ColumnFamilyMetricsAllMemtablesOffHeapSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsAllMemtablesOffHeapSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsAllMemtablesOffHeapSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_off_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsAllMemtablesOffHeapSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsAllMemtablesOffHeapSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsAllMemtablesOffHeapSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGet gets cf all memtables on heap size

Get all of the column family active and not memtables on heap size
*/
func (a *Client) ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGet(params *ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetParams) (*ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_on_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsAllMemtablesOnHeapSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsAllMemtablesOnHeapSizeGet gets all cf all memtables on heap size

Get all memtables active and not of all column family on heap size
*/
func (a *Client) ColumnFamilyMetricsAllMemtablesOnHeapSizeGet(params *ColumnFamilyMetricsAllMemtablesOnHeapSizeGetParams) (*ColumnFamilyMetricsAllMemtablesOnHeapSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsAllMemtablesOnHeapSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsAllMemtablesOnHeapSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_on_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsAllMemtablesOnHeapSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsAllMemtablesOnHeapSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsAllMemtablesOnHeapSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGet gets bloom filter disk space used

Get bloom filter disk space used
*/
func (a *Client) ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGet(params *ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetParams) (*ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_disk_space_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterDiskSpaceUsedByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterDiskSpaceUsedGet gets all bloom filter disk space used

Get all bloom filter disk space used
*/
func (a *Client) ColumnFamilyMetricsBloomFilterDiskSpaceUsedGet(params *ColumnFamilyMetricsBloomFilterDiskSpaceUsedGetParams) (*ColumnFamilyMetricsBloomFilterDiskSpaceUsedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterDiskSpaceUsedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterDiskSpaceUsedGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_disk_space_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterDiskSpaceUsedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterDiskSpaceUsedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterDiskSpaceUsedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterFalsePositivesByNameGet gets bloom filter false positives

Get bloom filter false positives
*/
func (a *Client) ColumnFamilyMetricsBloomFilterFalsePositivesByNameGet(params *ColumnFamilyMetricsBloomFilterFalsePositivesByNameGetParams) (*ColumnFamilyMetricsBloomFilterFalsePositivesByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterFalsePositivesByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterFalsePositivesByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_positives/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterFalsePositivesByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterFalsePositivesByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterFalsePositivesByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterFalsePositivesGet gets all bloom filter false positives

Get all bloom filter false positives
*/
func (a *Client) ColumnFamilyMetricsBloomFilterFalsePositivesGet(params *ColumnFamilyMetricsBloomFilterFalsePositivesGetParams) (*ColumnFamilyMetricsBloomFilterFalsePositivesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterFalsePositivesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterFalsePositivesGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_positives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterFalsePositivesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterFalsePositivesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterFalsePositivesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterFalseRatioByNameGet gets bloom filter false ratio

Get bloom filter false ratio
*/
func (a *Client) ColumnFamilyMetricsBloomFilterFalseRatioByNameGet(params *ColumnFamilyMetricsBloomFilterFalseRatioByNameGetParams) (*ColumnFamilyMetricsBloomFilterFalseRatioByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterFalseRatioByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterFalseRatioByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterFalseRatioByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterFalseRatioByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterFalseRatioByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterFalseRatioGet gets all bloom filter false ratio

Get all bloom filter false ratio
*/
func (a *Client) ColumnFamilyMetricsBloomFilterFalseRatioGet(params *ColumnFamilyMetricsBloomFilterFalseRatioGetParams) (*ColumnFamilyMetricsBloomFilterFalseRatioGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterFalseRatioGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterFalseRatioGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_ratio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterFalseRatioGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterFalseRatioGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterFalseRatioGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGet gets bloom filter off heap memory used

Get bloom filter off heap memory used
*/
func (a *Client) ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGet(params *ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetParams) (*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_off_heap_memory_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGet gets all bloom filter off heap memory used

Get all bloom filter off heap memory used
*/
func (a *Client) ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGet(params *ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetParams) (*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_off_heap_memory_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsBloomFilterOffHeapMemoryUsedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasCommitByNameGet gets cas commit

Get cas commit
*/
func (a *Client) ColumnFamilyMetricsCasCommitByNameGet(params *ColumnFamilyMetricsCasCommitByNameGetParams) (*ColumnFamilyMetricsCasCommitByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasCommitByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasCommitByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_commit/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasCommitByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasCommitByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasCommitByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGet gets cas commit estimated histogram

Get cas commit
*/
func (a *Client) ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGet(params *ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_commit/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasCommitEstimatedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGet gets cas commit estimated recent histogram

Get cas commit
*/
func (a *Client) ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_commit/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasCommitEstimatedRecentHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasPrepareByNameGet gets cas prepare

Get cas prepare
*/
func (a *Client) ColumnFamilyMetricsCasPrepareByNameGet(params *ColumnFamilyMetricsCasPrepareByNameGetParams) (*ColumnFamilyMetricsCasPrepareByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasPrepareByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasPrepareByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_prepare/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasPrepareByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasPrepareByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasPrepareByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGet gets cas prepare estimated histogram

Get cas prepare
*/
func (a *Client) ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGet(params *ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_prepare/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasPrepareEstimatedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGet gets cas prepare estimated recent histogram

Get cas prepare
*/
func (a *Client) ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_prepare/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasPrepareEstimatedRecentHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasProposeByNameGet gets cas propose

Get cas propose
*/
func (a *Client) ColumnFamilyMetricsCasProposeByNameGet(params *ColumnFamilyMetricsCasProposeByNameGetParams) (*ColumnFamilyMetricsCasProposeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasProposeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasProposeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_propose/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasProposeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasProposeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasProposeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGet gets cas propose estimated histogram

Get cas propose
*/
func (a *Client) ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGet(params *ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_propose/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasProposeEstimatedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGet gets cas propose estimated recent histogram

Get cas propose
*/
func (a *Client) ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_propose/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCasProposeEstimatedRecentHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGet gets col update time delta histogram

Get col update time delta histogram
*/
func (a *Client) ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGet(params *ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetParams) (*ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/col_update_time_delta_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsColUpdateTimeDeltaHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGet gets compression metadata off heap memory used

Get compression metadata off heap memory used
*/
func (a *Client) ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGet(params *ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetParams) (*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_metadata_off_heap_memory_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGet gets all compression metadata off heap memory used

Get all compression metadata off heap memory used
*/
func (a *Client) ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGet(params *ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetParams) (*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_metadata_off_heap_memory_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCompressionMetadataOffHeapMemoryUsedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCompressionRatioByNameGet gets compression ratio

Get compression ratio
*/
func (a *Client) ColumnFamilyMetricsCompressionRatioByNameGet(params *ColumnFamilyMetricsCompressionRatioByNameGetParams) (*ColumnFamilyMetricsCompressionRatioByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCompressionRatioByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCompressionRatioByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCompressionRatioByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCompressionRatioByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCompressionRatioByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCompressionRatioGet gets all compression ratio

Get all compression ratio
*/
func (a *Client) ColumnFamilyMetricsCompressionRatioGet(params *ColumnFamilyMetricsCompressionRatioGetParams) (*ColumnFamilyMetricsCompressionRatioGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCompressionRatioGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCompressionRatioGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_ratio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCompressionRatioGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCompressionRatioGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCompressionRatioGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCoordinatorReadGet gets coordinator read latency

Get coordinator read latency
*/
func (a *Client) ColumnFamilyMetricsCoordinatorReadGet(params *ColumnFamilyMetricsCoordinatorReadGetParams) (*ColumnFamilyMetricsCoordinatorReadGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCoordinatorReadGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCoordinatorReadGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/coordinator/read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCoordinatorReadGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCoordinatorReadGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCoordinatorReadGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsCoordinatorScanGet gets coordinator scan latency

Get coordinator scan latency
*/
func (a *Client) ColumnFamilyMetricsCoordinatorScanGet(params *ColumnFamilyMetricsCoordinatorScanGetParams) (*ColumnFamilyMetricsCoordinatorScanGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsCoordinatorScanGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsCoordinatorScanGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/coordinator/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsCoordinatorScanGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsCoordinatorScanGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsCoordinatorScanGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGet gets estimated column count histogram

Get estimated column count histogram
*/
func (a *Client) ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGet(params *ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetParams) (*ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/estimated_column_count_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsEstimatedColumnCountHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsEstimatedRowCountByNameGet gets estimated row count

Get estimated row count
*/
func (a *Client) ColumnFamilyMetricsEstimatedRowCountByNameGet(params *ColumnFamilyMetricsEstimatedRowCountByNameGetParams) (*ColumnFamilyMetricsEstimatedRowCountByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsEstimatedRowCountByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsEstimatedRowCountByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/estimated_row_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsEstimatedRowCountByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsEstimatedRowCountByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsEstimatedRowCountByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGet gets estimated row size histogram

Get estimated row size histogram
*/
func (a *Client) ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGet(params *ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetParams) (*ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/estimated_row_size_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsEstimatedRowSizeHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGet gets index summary off heap memory used

Get index summary off heap memory used
*/
func (a *Client) ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGet(params *ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetParams) (*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/index_summary_off_heap_memory_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGet gets all index summary off heap memory used

Get all index summary off heap memory used
*/
func (a *Client) ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGet(params *ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetParams) (*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/index_summary_off_heap_memory_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsIndexSummaryOffHeapMemoryUsedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsKeyCacheHitRateByNameGet gets key cache hit rate

Get key cache hit rate
*/
func (a *Client) ColumnFamilyMetricsKeyCacheHitRateByNameGet(params *ColumnFamilyMetricsKeyCacheHitRateByNameGetParams) (*ColumnFamilyMetricsKeyCacheHitRateByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsKeyCacheHitRateByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsKeyCacheHitRateByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/key_cache_hit_rate/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsKeyCacheHitRateByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsKeyCacheHitRateByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsKeyCacheHitRateByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsLiveDiskSpaceUsedByNameGet gets live disk space used

Get live disk space used
*/
func (a *Client) ColumnFamilyMetricsLiveDiskSpaceUsedByNameGet(params *ColumnFamilyMetricsLiveDiskSpaceUsedByNameGetParams) (*ColumnFamilyMetricsLiveDiskSpaceUsedByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsLiveDiskSpaceUsedByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsLiveDiskSpaceUsedByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_disk_space_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsLiveDiskSpaceUsedByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsLiveDiskSpaceUsedByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsLiveDiskSpaceUsedByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsLiveDiskSpaceUsedGet gets all live disk space used

Get all live disk space used
*/
func (a *Client) ColumnFamilyMetricsLiveDiskSpaceUsedGet(params *ColumnFamilyMetricsLiveDiskSpaceUsedGetParams) (*ColumnFamilyMetricsLiveDiskSpaceUsedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsLiveDiskSpaceUsedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsLiveDiskSpaceUsedGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_disk_space_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsLiveDiskSpaceUsedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsLiveDiskSpaceUsedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsLiveDiskSpaceUsedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsLiveScannedHistogramByNameGet gets live scanned histogram

Get live scanned histogram
*/
func (a *Client) ColumnFamilyMetricsLiveScannedHistogramByNameGet(params *ColumnFamilyMetricsLiveScannedHistogramByNameGetParams) (*ColumnFamilyMetricsLiveScannedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsLiveScannedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsLiveScannedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_scanned_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsLiveScannedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsLiveScannedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsLiveScannedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsLiveSsTableCountByNameGet gets live ss table count

Get live ss table count
*/
func (a *Client) ColumnFamilyMetricsLiveSsTableCountByNameGet(params *ColumnFamilyMetricsLiveSsTableCountByNameGetParams) (*ColumnFamilyMetricsLiveSsTableCountByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsLiveSsTableCountByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsLiveSsTableCountByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_ss_table_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsLiveSsTableCountByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsLiveSsTableCountByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsLiveSsTableCountByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsLiveSsTableCountGet gets all live ss table count

Get all live ss table count
*/
func (a *Client) ColumnFamilyMetricsLiveSsTableCountGet(params *ColumnFamilyMetricsLiveSsTableCountGetParams) (*ColumnFamilyMetricsLiveSsTableCountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsLiveSsTableCountGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsLiveSsTableCountGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_ss_table_count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsLiveSsTableCountGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsLiveSsTableCountGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsLiveSsTableCountGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMaxRowSizeByNameGet gets max row size

Get max row size
*/
func (a *Client) ColumnFamilyMetricsMaxRowSizeByNameGet(params *ColumnFamilyMetricsMaxRowSizeByNameGetParams) (*ColumnFamilyMetricsMaxRowSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMaxRowSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMaxRowSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/max_row_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMaxRowSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMaxRowSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMaxRowSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMaxRowSizeGet gets all max row size

Get all max row size
*/
func (a *Client) ColumnFamilyMetricsMaxRowSizeGet(params *ColumnFamilyMetricsMaxRowSizeGetParams) (*ColumnFamilyMetricsMaxRowSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMaxRowSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMaxRowSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/max_row_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMaxRowSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMaxRowSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMaxRowSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMeanRowSizeByNameGet gets mean row size

Get mean row size
*/
func (a *Client) ColumnFamilyMetricsMeanRowSizeByNameGet(params *ColumnFamilyMetricsMeanRowSizeByNameGetParams) (*ColumnFamilyMetricsMeanRowSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMeanRowSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMeanRowSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/mean_row_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMeanRowSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMeanRowSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMeanRowSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMeanRowSizeGet gets all mean row size

Get all mean row size
*/
func (a *Client) ColumnFamilyMetricsMeanRowSizeGet(params *ColumnFamilyMetricsMeanRowSizeGetParams) (*ColumnFamilyMetricsMeanRowSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMeanRowSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMeanRowSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/mean_row_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMeanRowSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMeanRowSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMeanRowSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableColumnsCountByNameGet gets memtable columns count

get memtable columns count
*/
func (a *Client) ColumnFamilyMetricsMemtableColumnsCountByNameGet(params *ColumnFamilyMetricsMemtableColumnsCountByNameGetParams) (*ColumnFamilyMetricsMemtableColumnsCountByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableColumnsCountByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableColumnsCountByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_columns_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableColumnsCountByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableColumnsCountByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableColumnsCountByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableColumnsCountGet gets all memtable columns count

get all memtable columns count
*/
func (a *Client) ColumnFamilyMetricsMemtableColumnsCountGet(params *ColumnFamilyMetricsMemtableColumnsCountGetParams) (*ColumnFamilyMetricsMemtableColumnsCountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableColumnsCountGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableColumnsCountGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_columns_count/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableColumnsCountGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableColumnsCountGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableColumnsCountGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableLiveDataSizeByNameGet gets memtable live data size

Get the column family active memtable live data size
*/
func (a *Client) ColumnFamilyMetricsMemtableLiveDataSizeByNameGet(params *ColumnFamilyMetricsMemtableLiveDataSizeByNameGetParams) (*ColumnFamilyMetricsMemtableLiveDataSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableLiveDataSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableLiveDataSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_live_data_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableLiveDataSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableLiveDataSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableLiveDataSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableLiveDataSizeGet gets all memtable live data size

Get all active memtable of all column family live data size
*/
func (a *Client) ColumnFamilyMetricsMemtableLiveDataSizeGet(params *ColumnFamilyMetricsMemtableLiveDataSizeGetParams) (*ColumnFamilyMetricsMemtableLiveDataSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableLiveDataSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableLiveDataSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_live_data_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableLiveDataSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableLiveDataSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableLiveDataSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableOffHeapSizeByNameGet gets memtable off heap size

Get the column family active memtable off heap size
*/
func (a *Client) ColumnFamilyMetricsMemtableOffHeapSizeByNameGet(params *ColumnFamilyMetricsMemtableOffHeapSizeByNameGetParams) (*ColumnFamilyMetricsMemtableOffHeapSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableOffHeapSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableOffHeapSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_off_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableOffHeapSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableOffHeapSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableOffHeapSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableOffHeapSizeGet gets all memtable off heap size

Get all active memtable of all column family off heap size
*/
func (a *Client) ColumnFamilyMetricsMemtableOffHeapSizeGet(params *ColumnFamilyMetricsMemtableOffHeapSizeGetParams) (*ColumnFamilyMetricsMemtableOffHeapSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableOffHeapSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableOffHeapSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_off_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableOffHeapSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableOffHeapSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableOffHeapSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableOnHeapSizeByNameGet gets memtable on heap size

Get the column family active memtable on heap size
*/
func (a *Client) ColumnFamilyMetricsMemtableOnHeapSizeByNameGet(params *ColumnFamilyMetricsMemtableOnHeapSizeByNameGetParams) (*ColumnFamilyMetricsMemtableOnHeapSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableOnHeapSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableOnHeapSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_on_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableOnHeapSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableOnHeapSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableOnHeapSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableOnHeapSizeGet gets all memtable on heap size

Get all active memtable of all column family on heap size
*/
func (a *Client) ColumnFamilyMetricsMemtableOnHeapSizeGet(params *ColumnFamilyMetricsMemtableOnHeapSizeGetParams) (*ColumnFamilyMetricsMemtableOnHeapSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableOnHeapSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableOnHeapSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_on_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableOnHeapSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableOnHeapSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableOnHeapSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableSwitchCountByNameGet gets memtable switch count

Get memtable switch count
*/
func (a *Client) ColumnFamilyMetricsMemtableSwitchCountByNameGet(params *ColumnFamilyMetricsMemtableSwitchCountByNameGetParams) (*ColumnFamilyMetricsMemtableSwitchCountByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableSwitchCountByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableSwitchCountByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_switch_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableSwitchCountByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableSwitchCountByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableSwitchCountByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMemtableSwitchCountGet gets all memtable switch count

Get all memtable switch count
*/
func (a *Client) ColumnFamilyMetricsMemtableSwitchCountGet(params *ColumnFamilyMetricsMemtableSwitchCountGetParams) (*ColumnFamilyMetricsMemtableSwitchCountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMemtableSwitchCountGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMemtableSwitchCountGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_switch_count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMemtableSwitchCountGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMemtableSwitchCountGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMemtableSwitchCountGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMinRowSizeByNameGet gets min row size

Get min row size
*/
func (a *Client) ColumnFamilyMetricsMinRowSizeByNameGet(params *ColumnFamilyMetricsMinRowSizeByNameGetParams) (*ColumnFamilyMetricsMinRowSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMinRowSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMinRowSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/min_row_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMinRowSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMinRowSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMinRowSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsMinRowSizeGet gets all min row size

Get all min row size
*/
func (a *Client) ColumnFamilyMetricsMinRowSizeGet(params *ColumnFamilyMetricsMinRowSizeGetParams) (*ColumnFamilyMetricsMinRowSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsMinRowSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsMinRowSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/min_row_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsMinRowSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsMinRowSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsMinRowSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsPendingCompactionsByNameGet gets pending compactions

Get pending compactions
*/
func (a *Client) ColumnFamilyMetricsPendingCompactionsByNameGet(params *ColumnFamilyMetricsPendingCompactionsByNameGetParams) (*ColumnFamilyMetricsPendingCompactionsByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsPendingCompactionsByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsPendingCompactionsByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_compactions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsPendingCompactionsByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsPendingCompactionsByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsPendingCompactionsByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsPendingCompactionsGet gets all pending compactions

Get all pending compactions
*/
func (a *Client) ColumnFamilyMetricsPendingCompactionsGet(params *ColumnFamilyMetricsPendingCompactionsGetParams) (*ColumnFamilyMetricsPendingCompactionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsPendingCompactionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsPendingCompactionsGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_compactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsPendingCompactionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsPendingCompactionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsPendingCompactionsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsPendingFlushesByNameGet gets pending flushes

Get pending flushes
*/
func (a *Client) ColumnFamilyMetricsPendingFlushesByNameGet(params *ColumnFamilyMetricsPendingFlushesByNameGetParams) (*ColumnFamilyMetricsPendingFlushesByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsPendingFlushesByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsPendingFlushesByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_flushes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsPendingFlushesByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsPendingFlushesByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsPendingFlushesByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsPendingFlushesGet gets all pending flushes

Get all pending flushes
*/
func (a *Client) ColumnFamilyMetricsPendingFlushesGet(params *ColumnFamilyMetricsPendingFlushesGetParams) (*ColumnFamilyMetricsPendingFlushesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsPendingFlushesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsPendingFlushesGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_flushes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsPendingFlushesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsPendingFlushesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsPendingFlushesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRangeLatencyByNameGet gets range latency

Get range latency
*/
func (a *Client) ColumnFamilyMetricsRangeLatencyByNameGet(params *ColumnFamilyMetricsRangeLatencyByNameGetParams) (*ColumnFamilyMetricsRangeLatencyByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRangeLatencyByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRangeLatencyByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRangeLatencyByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRangeLatencyByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRangeLatencyByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGet gets range latency estimated histogram

Get range latency
*/
func (a *Client) ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGet(params *ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRangeLatencyEstimatedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGet gets range latency estimated recent histogram

Get range latency
*/
func (a *Client) ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRangeLatencyEstimatedRecentHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRangeLatencyGet gets all range latency

Get all range latency
*/
func (a *Client) ColumnFamilyMetricsRangeLatencyGet(params *ColumnFamilyMetricsRangeLatencyGetParams) (*ColumnFamilyMetricsRangeLatencyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRangeLatencyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRangeLatencyGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRangeLatencyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRangeLatencyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRangeLatencyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadByNameGet gets read

Get number of reads
*/
func (a *Client) ColumnFamilyMetricsReadByNameGet(params *ColumnFamilyMetricsReadByNameGetParams) (*ColumnFamilyMetricsReadByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadGet gets all read

Get number of reads from all column family, per shard
*/
func (a *Client) ColumnFamilyMetricsReadGet(params *ColumnFamilyMetricsReadGetParams) (*ColumnFamilyMetricsReadGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyByNameGet gets read latency

Get read latency
*/
func (a *Client) ColumnFamilyMetricsReadLatencyByNameGet(params *ColumnFamilyMetricsReadLatencyByNameGetParams) (*ColumnFamilyMetricsReadLatencyByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGet gets read latency estimated histogram

Get read latency
*/
func (a *Client) ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyEstimatedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGet gets read latency estimated recent histogram

Get read latency
*/
func (a *Client) ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyEstimatedRecentHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyGet gets all read latency

Get all read latency
*/
func (a *Client) ColumnFamilyMetricsReadLatencyGet(params *ColumnFamilyMetricsReadLatencyGetParams) (*ColumnFamilyMetricsReadLatencyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyHistogramByNameGet gets read latency histogram depricated

Get read latency histogram
*/
func (a *Client) ColumnFamilyMetricsReadLatencyHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyHistogramGet gets all read latency histogram depricated

Get read latency histogram from all column family
*/
func (a *Client) ColumnFamilyMetricsReadLatencyHistogramGet(params *ColumnFamilyMetricsReadLatencyHistogramGetParams) (*ColumnFamilyMetricsReadLatencyHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyHistogramGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGet gets read latency histogram

Get read latency moving avrage histogram
*/
func (a *Client) ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGet(params *ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetParams) (*ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/moving_average_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyMovingAverageHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsReadLatencyMovingAverageHistogramGet gets all read latency histogram

Get read latency moving avrage histogram from all column family
*/
func (a *Client) ColumnFamilyMetricsReadLatencyMovingAverageHistogramGet(params *ColumnFamilyMetricsReadLatencyMovingAverageHistogramGetParams) (*ColumnFamilyMetricsReadLatencyMovingAverageHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsReadLatencyMovingAverageHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsReadLatencyMovingAverageHistogramGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/moving_average_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsReadLatencyMovingAverageHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsReadLatencyMovingAverageHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsReadLatencyMovingAverageHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGet gets recent bloom filter false positives

Get recent bloom filter false positives
*/
func (a *Client) ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGet(params *ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_positives/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRecentBloomFilterFalsePositivesByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRecentBloomFilterFalsePositivesGet gets all recent bloom filter false positives

Get all recent bloom filter false positives
*/
func (a *Client) ColumnFamilyMetricsRecentBloomFilterFalsePositivesGet(params *ColumnFamilyMetricsRecentBloomFilterFalsePositivesGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalsePositivesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRecentBloomFilterFalsePositivesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRecentBloomFilterFalsePositivesGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_positives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRecentBloomFilterFalsePositivesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRecentBloomFilterFalsePositivesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRecentBloomFilterFalsePositivesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGet gets recent bloom filter false ratio

Get recent bloom filter false ratio
*/
func (a *Client) ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGet(params *ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRecentBloomFilterFalseRatioByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRecentBloomFilterFalseRatioGet gets all recent bloom filter false ratio

Get all recent bloom filter false ratio
*/
func (a *Client) ColumnFamilyMetricsRecentBloomFilterFalseRatioGet(params *ColumnFamilyMetricsRecentBloomFilterFalseRatioGetParams) (*ColumnFamilyMetricsRecentBloomFilterFalseRatioGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRecentBloomFilterFalseRatioGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRecentBloomFilterFalseRatioGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_ratio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRecentBloomFilterFalseRatioGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRecentBloomFilterFalseRatioGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRecentBloomFilterFalseRatioGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRowCacheHitByNameGet gets row cache hit

Get row cache hit
*/
func (a *Client) ColumnFamilyMetricsRowCacheHitByNameGet(params *ColumnFamilyMetricsRowCacheHitByNameGetParams) (*ColumnFamilyMetricsRowCacheHitByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRowCacheHitByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRowCacheHitByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRowCacheHitByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRowCacheHitByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRowCacheHitByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRowCacheHitGet gets all row cache hit

Get all row cache hit
*/
func (a *Client) ColumnFamilyMetricsRowCacheHitGet(params *ColumnFamilyMetricsRowCacheHitGetParams) (*ColumnFamilyMetricsRowCacheHitGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRowCacheHitGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRowCacheHitGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRowCacheHitGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRowCacheHitGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRowCacheHitGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGet gets row cache hit out of range

Get row cache hit out of range
*/
func (a *Client) ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGet(params *ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetParams) (*ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit_out_of_range/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRowCacheHitOutOfRangeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRowCacheHitOutOfRangeGet gets all row cache hit out of range

Get all row cache hit out of range
*/
func (a *Client) ColumnFamilyMetricsRowCacheHitOutOfRangeGet(params *ColumnFamilyMetricsRowCacheHitOutOfRangeGetParams) (*ColumnFamilyMetricsRowCacheHitOutOfRangeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRowCacheHitOutOfRangeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRowCacheHitOutOfRangeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit_out_of_range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRowCacheHitOutOfRangeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRowCacheHitOutOfRangeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRowCacheHitOutOfRangeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRowCacheMissByNameGet gets row cache miss

Get row cache miss
*/
func (a *Client) ColumnFamilyMetricsRowCacheMissByNameGet(params *ColumnFamilyMetricsRowCacheMissByNameGetParams) (*ColumnFamilyMetricsRowCacheMissByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRowCacheMissByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRowCacheMissByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_miss/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRowCacheMissByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRowCacheMissByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRowCacheMissByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsRowCacheMissGet gets all row cache miss

Get all row cache miss
*/
func (a *Client) ColumnFamilyMetricsRowCacheMissGet(params *ColumnFamilyMetricsRowCacheMissGetParams) (*ColumnFamilyMetricsRowCacheMissGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsRowCacheMissGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsRowCacheMissGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_miss",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsRowCacheMissGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsRowCacheMissGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsRowCacheMissGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsSnapshotsSizeByNameGet gets true snapshots size

Get true snapshots size
*/
func (a *Client) ColumnFamilyMetricsSnapshotsSizeByNameGet(params *ColumnFamilyMetricsSnapshotsSizeByNameGetParams) (*ColumnFamilyMetricsSnapshotsSizeByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsSnapshotsSizeByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsSnapshotsSizeByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/snapshots_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsSnapshotsSizeByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsSnapshotsSizeByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsSnapshotsSizeByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsSpeculativeRetriesByNameGet gets speculative retries

Get speculative retries
*/
func (a *Client) ColumnFamilyMetricsSpeculativeRetriesByNameGet(params *ColumnFamilyMetricsSpeculativeRetriesByNameGetParams) (*ColumnFamilyMetricsSpeculativeRetriesByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsSpeculativeRetriesByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsSpeculativeRetriesByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/speculative_retries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsSpeculativeRetriesByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsSpeculativeRetriesByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsSpeculativeRetriesByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsSpeculativeRetriesGet gets all speculative retries

Get all speculative retries
*/
func (a *Client) ColumnFamilyMetricsSpeculativeRetriesGet(params *ColumnFamilyMetricsSpeculativeRetriesGetParams) (*ColumnFamilyMetricsSpeculativeRetriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsSpeculativeRetriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsSpeculativeRetriesGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/speculative_retries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsSpeculativeRetriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsSpeculativeRetriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsSpeculativeRetriesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsSstablesPerReadHistogramByNameGet gets sstables per read histogram

Get sstables per read histogram
*/
func (a *Client) ColumnFamilyMetricsSstablesPerReadHistogramByNameGet(params *ColumnFamilyMetricsSstablesPerReadHistogramByNameGetParams) (*ColumnFamilyMetricsSstablesPerReadHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsSstablesPerReadHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsSstablesPerReadHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/sstables_per_read_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsSstablesPerReadHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsSstablesPerReadHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsSstablesPerReadHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsTombstoneScannedHistogramByNameGet gets tombstone scanned histogram

Get tombstone scanned histogram
*/
func (a *Client) ColumnFamilyMetricsTombstoneScannedHistogramByNameGet(params *ColumnFamilyMetricsTombstoneScannedHistogramByNameGetParams) (*ColumnFamilyMetricsTombstoneScannedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsTombstoneScannedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsTombstoneScannedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/tombstone_scanned_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsTombstoneScannedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsTombstoneScannedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsTombstoneScannedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsTotalDiskSpaceUsedByNameGet gets total disk space used

Get total disk space used
*/
func (a *Client) ColumnFamilyMetricsTotalDiskSpaceUsedByNameGet(params *ColumnFamilyMetricsTotalDiskSpaceUsedByNameGetParams) (*ColumnFamilyMetricsTotalDiskSpaceUsedByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsTotalDiskSpaceUsedByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsTotalDiskSpaceUsedByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/total_disk_space_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsTotalDiskSpaceUsedByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsTotalDiskSpaceUsedByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsTotalDiskSpaceUsedByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsTotalDiskSpaceUsedGet gets all total disk space used

Get all total disk space used
*/
func (a *Client) ColumnFamilyMetricsTotalDiskSpaceUsedGet(params *ColumnFamilyMetricsTotalDiskSpaceUsedGetParams) (*ColumnFamilyMetricsTotalDiskSpaceUsedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsTotalDiskSpaceUsedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsTotalDiskSpaceUsedGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/total_disk_space_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsTotalDiskSpaceUsedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsTotalDiskSpaceUsedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsTotalDiskSpaceUsedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsTrueSnapshotsSizeGet gets all true snapshots size

Get all true snapshots size
*/
func (a *Client) ColumnFamilyMetricsTrueSnapshotsSizeGet(params *ColumnFamilyMetricsTrueSnapshotsSizeGetParams) (*ColumnFamilyMetricsTrueSnapshotsSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsTrueSnapshotsSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsTrueSnapshotsSizeGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/true_snapshots_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsTrueSnapshotsSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsTrueSnapshotsSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsTrueSnapshotsSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWaitingOnFreeMemtableGet gets waiting on free memtable space

Get waiting on free memtable space
*/
func (a *Client) ColumnFamilyMetricsWaitingOnFreeMemtableGet(params *ColumnFamilyMetricsWaitingOnFreeMemtableGetParams) (*ColumnFamilyMetricsWaitingOnFreeMemtableGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWaitingOnFreeMemtableGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWaitingOnFreeMemtableGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/waiting_on_free_memtable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWaitingOnFreeMemtableGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWaitingOnFreeMemtableGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWaitingOnFreeMemtableGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteByNameGet gets write

Get number of writes
*/
func (a *Client) ColumnFamilyMetricsWriteByNameGet(params *ColumnFamilyMetricsWriteByNameGetParams) (*ColumnFamilyMetricsWriteByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteGet gets all write

Get number of writes from all column family, per shard
*/
func (a *Client) ColumnFamilyMetricsWriteGet(params *ColumnFamilyMetricsWriteGetParams) (*ColumnFamilyMetricsWriteGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyByNameGet gets write latency

Get write latency
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyByNameGet(params *ColumnFamilyMetricsWriteLatencyByNameGetParams) (*ColumnFamilyMetricsWriteLatencyByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGet gets write latency estimated histogram

Get write latency
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyEstimatedHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGet gets write latency estimated recent histogram

Get write latency
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyEstimatedRecentHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyGet gets all write latency

Get all write latency
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyGet(params *ColumnFamilyMetricsWriteLatencyGetParams) (*ColumnFamilyMetricsWriteLatencyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyHistogramByNameGet gets write latency histogram depricated

Get write latency histogram
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyHistogramGet gets all write latency histogram depricated

Get write latency histogram of all column family
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyHistogramGet(params *ColumnFamilyMetricsWriteLatencyHistogramGetParams) (*ColumnFamilyMetricsWriteLatencyHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyHistogramGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGet gets write latency histogram

Get write latency moving average histogram
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGet(params *ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetParams) (*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/moving_average_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGet gets all write latency histogram

Get write latency moving average histogram of all column family
*/
func (a *Client) ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGet(params *ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetParams) (*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGet",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/moving_average_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMetricsWriteLatencyMovingAverageHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMinimumCompactionByNameGet gets minimum compaction threshold

get the minimum number of sstables in queue before compaction kicks off
*/
func (a *Client) ColumnFamilyMinimumCompactionByNameGet(params *ColumnFamilyMinimumCompactionByNameGetParams) (*ColumnFamilyMinimumCompactionByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMinimumCompactionByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMinimumCompactionByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/minimum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMinimumCompactionByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMinimumCompactionByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMinimumCompactionByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyMinimumCompactionByNamePost sets minimum compaction threshold

Sets the minimum number of sstables in queue before compaction kicks off
*/
func (a *Client) ColumnFamilyMinimumCompactionByNamePost(params *ColumnFamilyMinimumCompactionByNamePostParams) (*ColumnFamilyMinimumCompactionByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyMinimumCompactionByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyMinimumCompactionByNamePost",
		Method:             "POST",
		PathPattern:        "/column_family/minimum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyMinimumCompactionByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyMinimumCompactionByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyMinimumCompactionByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyNameGet gets column family name

Get a list of all column family names
*/
func (a *Client) ColumnFamilyNameGet(params *ColumnFamilyNameGetParams) (*ColumnFamilyNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilyNameKeyspaceGet gets column family name keyspace

Get a list of the key space names
*/
func (a *Client) ColumnFamilyNameKeyspaceGet(params *ColumnFamilyNameKeyspaceGetParams) (*ColumnFamilyNameKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilyNameKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilyNameKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/column_family/name/keyspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilyNameKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilyNameKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilyNameKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilySstablesByKeyByNameGet gets sstables for key

Returns a list of sstable filenames that contain the given partition key on this node
*/
func (a *Client) ColumnFamilySstablesByKeyByNameGet(params *ColumnFamilySstablesByKeyByNameGetParams) (*ColumnFamilySstablesByKeyByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilySstablesByKeyByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilySstablesByKeyByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/sstables/by_key/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilySstablesByKeyByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilySstablesByKeyByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilySstablesByKeyByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilySstablesPerLevelByNameGet gets sstable count per level

sstable count for each level. empty unless leveled compaction is used
*/
func (a *Client) ColumnFamilySstablesPerLevelByNameGet(params *ColumnFamilySstablesPerLevelByNameGetParams) (*ColumnFamilySstablesPerLevelByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilySstablesPerLevelByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilySstablesPerLevelByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/sstables/per_level/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilySstablesPerLevelByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilySstablesPerLevelByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilySstablesPerLevelByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColumnFamilySstablesUnleveledByNameGet gets unleveled sstables

the number of SSTables in L0.  Always return 0 if Leveled compaction is not enabled.
*/
func (a *Client) ColumnFamilySstablesUnleveledByNameGet(params *ColumnFamilySstablesUnleveledByNameGetParams) (*ColumnFamilySstablesUnleveledByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColumnFamilySstablesUnleveledByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ColumnFamilySstablesUnleveledByNameGet",
		Method:             "GET",
		PathPattern:        "/column_family/sstables/unleveled/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ColumnFamilySstablesUnleveledByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColumnFamilySstablesUnleveledByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColumnFamilySstablesUnleveledByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitLogMetricsWaitingOnCommitGet gets waiting on commit

Get waiting on commit
*/
func (a *Client) CommitLogMetricsWaitingOnCommitGet(params *CommitLogMetricsWaitingOnCommitGetParams) (*CommitLogMetricsWaitingOnCommitGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitLogMetricsWaitingOnCommitGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitLogMetricsWaitingOnCommitGet",
		Method:             "GET",
		PathPattern:        "/commit_log/metrics/waiting_on_commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitLogMetricsWaitingOnCommitGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitLogMetricsWaitingOnCommitGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitLogMetricsWaitingOnCommitGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitLogMetricsWaitingOnSegmentAllocationGet gets waiting on segment allocation

Get waiting on segment allocation
*/
func (a *Client) CommitLogMetricsWaitingOnSegmentAllocationGet(params *CommitLogMetricsWaitingOnSegmentAllocationGetParams) (*CommitLogMetricsWaitingOnSegmentAllocationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitLogMetricsWaitingOnSegmentAllocationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitLogMetricsWaitingOnSegmentAllocationGet",
		Method:             "GET",
		PathPattern:        "/commit_log/metrics/waiting_on_segment_allocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitLogMetricsWaitingOnSegmentAllocationGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitLogMetricsWaitingOnSegmentAllocationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitLogMetricsWaitingOnSegmentAllocationGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitlogMetricsCompletedTasksGet gets completed tasks

Get completed tasks
*/
func (a *Client) CommitlogMetricsCompletedTasksGet(params *CommitlogMetricsCompletedTasksGetParams) (*CommitlogMetricsCompletedTasksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitlogMetricsCompletedTasksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitlogMetricsCompletedTasksGet",
		Method:             "GET",
		PathPattern:        "/commitlog/metrics/completed_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitlogMetricsCompletedTasksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitlogMetricsCompletedTasksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitlogMetricsCompletedTasksGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitlogMetricsPendingTasksGet gets pending tasks

Get pending tasks
*/
func (a *Client) CommitlogMetricsPendingTasksGet(params *CommitlogMetricsPendingTasksGetParams) (*CommitlogMetricsPendingTasksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitlogMetricsPendingTasksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitlogMetricsPendingTasksGet",
		Method:             "GET",
		PathPattern:        "/commitlog/metrics/pending_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitlogMetricsPendingTasksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitlogMetricsPendingTasksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitlogMetricsPendingTasksGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitlogMetricsTotalCommitLogSizeGet gets total commit log size

Get total commit log size
*/
func (a *Client) CommitlogMetricsTotalCommitLogSizeGet(params *CommitlogMetricsTotalCommitLogSizeGetParams) (*CommitlogMetricsTotalCommitLogSizeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitlogMetricsTotalCommitLogSizeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitlogMetricsTotalCommitLogSizeGet",
		Method:             "GET",
		PathPattern:        "/commitlog/metrics/total_commit_log_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitlogMetricsTotalCommitLogSizeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitlogMetricsTotalCommitLogSizeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitlogMetricsTotalCommitLogSizeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitlogRecoverByPathPost commitlogs recover

Recover a single file
*/
func (a *Client) CommitlogRecoverByPathPost(params *CommitlogRecoverByPathPostParams) (*CommitlogRecoverByPathPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitlogRecoverByPathPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitlogRecoverByPathPost",
		Method:             "POST",
		PathPattern:        "/commitlog/recover/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitlogRecoverByPathPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitlogRecoverByPathPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitlogRecoverByPathPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitlogSegmentsActiveGet gets active segment names

file names (not full paths) of active commit log segments (segments containing unflushed data)
*/
func (a *Client) CommitlogSegmentsActiveGet(params *CommitlogSegmentsActiveGetParams) (*CommitlogSegmentsActiveGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitlogSegmentsActiveGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitlogSegmentsActiveGet",
		Method:             "GET",
		PathPattern:        "/commitlog/segments/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitlogSegmentsActiveGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitlogSegmentsActiveGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitlogSegmentsActiveGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CommitlogSegmentsArchivingGet gets archiving segment names

Returns files which are pending for archival attempt. Does NOT include failed archive attempts
*/
func (a *Client) CommitlogSegmentsArchivingGet(params *CommitlogSegmentsArchivingGetParams) (*CommitlogSegmentsArchivingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitlogSegmentsArchivingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommitlogSegmentsArchivingGet",
		Method:             "GET",
		PathPattern:        "/commitlog/segments/archiving",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitlogSegmentsArchivingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitlogSegmentsArchivingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitlogSegmentsArchivingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerCompactionHistoryGet gets compaction history

get List of the compaction history
*/
func (a *Client) CompactionManagerCompactionHistoryGet(params *CompactionManagerCompactionHistoryGetParams) (*CompactionManagerCompactionHistoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerCompactionHistoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerCompactionHistoryGet",
		Method:             "GET",
		PathPattern:        "/compaction_manager/compaction_history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerCompactionHistoryGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerCompactionHistoryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerCompactionHistoryGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerCompactionInfoGet gets compaction info

get a list of all active compaction info
*/
func (a *Client) CompactionManagerCompactionInfoGet(params *CompactionManagerCompactionInfoGetParams) (*CompactionManagerCompactionInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerCompactionInfoGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerCompactionInfoGet",
		Method:             "GET",
		PathPattern:        "/compaction_manager/compaction_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerCompactionInfoGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerCompactionInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerCompactionInfoGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerCompactionsGet gets compactions

get List of running compactions
*/
func (a *Client) CompactionManagerCompactionsGet(params *CompactionManagerCompactionsGetParams) (*CompactionManagerCompactionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerCompactionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerCompactionsGet",
		Method:             "GET",
		PathPattern:        "/compaction_manager/compactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerCompactionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerCompactionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerCompactionsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerForceUserDefinedCompactionPost forces user defined compaction

Triggers the compaction of user specified sstables. You can specify files from various keyspaces and columnfamilies. If you do so, user defined compaction is performed several times to the groups of files in the same keyspace/columnfamily. must contain keyspace and columnfamily name in path(for 2.1+) or file name itself.
*/
func (a *Client) CompactionManagerForceUserDefinedCompactionPost(params *CompactionManagerForceUserDefinedCompactionPostParams) (*CompactionManagerForceUserDefinedCompactionPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerForceUserDefinedCompactionPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerForceUserDefinedCompactionPost",
		Method:             "POST",
		PathPattern:        "/compaction_manager/force_user_defined_compaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerForceUserDefinedCompactionPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerForceUserDefinedCompactionPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerForceUserDefinedCompactionPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerMetricsBytesCompactedGet gets bytes compacted

Get bytes compacted
*/
func (a *Client) CompactionManagerMetricsBytesCompactedGet(params *CompactionManagerMetricsBytesCompactedGetParams) (*CompactionManagerMetricsBytesCompactedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerMetricsBytesCompactedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerMetricsBytesCompactedGet",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/bytes_compacted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerMetricsBytesCompactedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerMetricsBytesCompactedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerMetricsBytesCompactedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerMetricsCompletedTasksGet gets completed tasks1

Get completed tasks
*/
func (a *Client) CompactionManagerMetricsCompletedTasksGet(params *CompactionManagerMetricsCompletedTasksGetParams) (*CompactionManagerMetricsCompletedTasksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerMetricsCompletedTasksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerMetricsCompletedTasksGet",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/completed_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerMetricsCompletedTasksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerMetricsCompletedTasksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerMetricsCompletedTasksGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerMetricsPendingTasksGet gets pending tasks1

Get pending tasks
*/
func (a *Client) CompactionManagerMetricsPendingTasksGet(params *CompactionManagerMetricsPendingTasksGetParams) (*CompactionManagerMetricsPendingTasksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerMetricsPendingTasksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerMetricsPendingTasksGet",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/pending_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerMetricsPendingTasksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerMetricsPendingTasksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerMetricsPendingTasksGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerMetricsTotalCompactionsCompletedGet gets total compactions completed

Get total compactions completed
*/
func (a *Client) CompactionManagerMetricsTotalCompactionsCompletedGet(params *CompactionManagerMetricsTotalCompactionsCompletedGetParams) (*CompactionManagerMetricsTotalCompactionsCompletedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerMetricsTotalCompactionsCompletedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerMetricsTotalCompactionsCompletedGet",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/total_compactions_completed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerMetricsTotalCompactionsCompletedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerMetricsTotalCompactionsCompletedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerMetricsTotalCompactionsCompletedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CompactionManagerStopCompactionPost stops compaction

Stop all running compaction-like tasks having the provided type
*/
func (a *Client) CompactionManagerStopCompactionPost(params *CompactionManagerStopCompactionPostParams) (*CompactionManagerStopCompactionPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompactionManagerStopCompactionPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompactionManagerStopCompactionPost",
		Method:             "POST",
		PathPattern:        "/compaction_manager/stop_compaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompactionManagerStopCompactionPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompactionManagerStopCompactionPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompactionManagerStopCompactionPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorCountEndpointDownGet gets down endpoint count

Get count down endpoint
*/
func (a *Client) FailureDetectorCountEndpointDownGet(params *FailureDetectorCountEndpointDownGetParams) (*FailureDetectorCountEndpointDownGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorCountEndpointDownGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorCountEndpointDownGet",
		Method:             "GET",
		PathPattern:        "/failure_detector/count/endpoint/down",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorCountEndpointDownGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorCountEndpointDownGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorCountEndpointDownGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorCountEndpointUpGet gets up endpoint count

Get count up endpoint
*/
func (a *Client) FailureDetectorCountEndpointUpGet(params *FailureDetectorCountEndpointUpGetParams) (*FailureDetectorCountEndpointUpGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorCountEndpointUpGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorCountEndpointUpGet",
		Method:             "GET",
		PathPattern:        "/failure_detector/count/endpoint/up",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorCountEndpointUpGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorCountEndpointUpGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorCountEndpointUpGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorEndpointPhiValuesGet gets endpoint phi values

Get end point phi values
*/
func (a *Client) FailureDetectorEndpointPhiValuesGet(params *FailureDetectorEndpointPhiValuesGetParams) (*FailureDetectorEndpointPhiValuesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorEndpointPhiValuesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorEndpointPhiValuesGet",
		Method:             "GET",
		PathPattern:        "/failure_detector/endpoint_phi_values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorEndpointPhiValuesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorEndpointPhiValuesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorEndpointPhiValuesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorEndpointsGet gets all endpoint states

Get all endpoint states
*/
func (a *Client) FailureDetectorEndpointsGet(params *FailureDetectorEndpointsGetParams) (*FailureDetectorEndpointsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorEndpointsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorEndpointsGet",
		Method:             "GET",
		PathPattern:        "/failure_detector/endpoints/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorEndpointsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorEndpointsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorEndpointsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorEndpointsStatesByAddrGet gets endpoint state

Get endpoint states
*/
func (a *Client) FailureDetectorEndpointsStatesByAddrGet(params *FailureDetectorEndpointsStatesByAddrGetParams) (*FailureDetectorEndpointsStatesByAddrGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorEndpointsStatesByAddrGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorEndpointsStatesByAddrGet",
		Method:             "GET",
		PathPattern:        "/failure_detector/endpoints/states/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorEndpointsStatesByAddrGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorEndpointsStatesByAddrGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorEndpointsStatesByAddrGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorPhiGet gets phi convict threshold

Get the phi convict threshold
*/
func (a *Client) FailureDetectorPhiGet(params *FailureDetectorPhiGetParams) (*FailureDetectorPhiGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorPhiGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorPhiGet",
		Method:             "GET",
		PathPattern:        "/failure_detector/phi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorPhiGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorPhiGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorPhiGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorPhiPost sets phi convict threshold

Set the phi convict threshold
*/
func (a *Client) FailureDetectorPhiPost(params *FailureDetectorPhiPostParams) (*FailureDetectorPhiPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorPhiPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorPhiPost",
		Method:             "POST",
		PathPattern:        "/failure_detector/phi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorPhiPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorPhiPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorPhiPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailureDetectorSimpleStatesGet gets simple states

Get simple_states
*/
func (a *Client) FailureDetectorSimpleStatesGet(params *FailureDetectorSimpleStatesGetParams) (*FailureDetectorSimpleStatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureDetectorSimpleStatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FailureDetectorSimpleStatesGet",
		Method:             "GET",
		PathPattern:        "/failure_detector/simple_states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FailureDetectorSimpleStatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailureDetectorSimpleStatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FailureDetectorSimpleStatesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GossiperAssassinateByAddrPost assassinates endpoint

Assassinate an end point
*/
func (a *Client) GossiperAssassinateByAddrPost(params *GossiperAssassinateByAddrPostParams) (*GossiperAssassinateByAddrPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGossiperAssassinateByAddrPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GossiperAssassinateByAddrPost",
		Method:             "POST",
		PathPattern:        "/gossiper/assassinate/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GossiperAssassinateByAddrPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GossiperAssassinateByAddrPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GossiperAssassinateByAddrPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GossiperDowntimeByAddrGet gets endpoint downtime

Get the downtime of an end point
*/
func (a *Client) GossiperDowntimeByAddrGet(params *GossiperDowntimeByAddrGetParams) (*GossiperDowntimeByAddrGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGossiperDowntimeByAddrGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GossiperDowntimeByAddrGet",
		Method:             "GET",
		PathPattern:        "/gossiper/downtime/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GossiperDowntimeByAddrGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GossiperDowntimeByAddrGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GossiperDowntimeByAddrGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GossiperEndpointDownGet gets down endpoint

Get the addreses of the down endpoints
*/
func (a *Client) GossiperEndpointDownGet(params *GossiperEndpointDownGetParams) (*GossiperEndpointDownGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGossiperEndpointDownGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GossiperEndpointDownGet",
		Method:             "GET",
		PathPattern:        "/gossiper/endpoint/down/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GossiperEndpointDownGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GossiperEndpointDownGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GossiperEndpointDownGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GossiperEndpointLiveGet gets live endpoint

Get the addreses of live endpoints
*/
func (a *Client) GossiperEndpointLiveGet(params *GossiperEndpointLiveGetParams) (*GossiperEndpointLiveGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGossiperEndpointLiveGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GossiperEndpointLiveGet",
		Method:             "GET",
		PathPattern:        "/gossiper/endpoint/live/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GossiperEndpointLiveGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GossiperEndpointLiveGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GossiperEndpointLiveGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GossiperGenerationNumberByAddrGet gets current generation number

Returns files which are pending for archival attempt. Does NOT include failed archive attempts
*/
func (a *Client) GossiperGenerationNumberByAddrGet(params *GossiperGenerationNumberByAddrGetParams) (*GossiperGenerationNumberByAddrGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGossiperGenerationNumberByAddrGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GossiperGenerationNumberByAddrGet",
		Method:             "GET",
		PathPattern:        "/gossiper/generation_number/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GossiperGenerationNumberByAddrGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GossiperGenerationNumberByAddrGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GossiperGenerationNumberByAddrGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GossiperHeartBeatVersionByAddrGet gets current heart beat version

Get heart beat version for a node
*/
func (a *Client) GossiperHeartBeatVersionByAddrGet(params *GossiperHeartBeatVersionByAddrGetParams) (*GossiperHeartBeatVersionByAddrGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGossiperHeartBeatVersionByAddrGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GossiperHeartBeatVersionByAddrGet",
		Method:             "GET",
		PathPattern:        "/gossiper/heart_beat_version/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GossiperHeartBeatVersionByAddrGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GossiperHeartBeatVersionByAddrGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GossiperHeartBeatVersionByAddrGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HintedHandoffHintsDelete truncates all hints

Truncate all the hints
*/
func (a *Client) HintedHandoffHintsDelete(params *HintedHandoffHintsDeleteParams) (*HintedHandoffHintsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHintedHandoffHintsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HintedHandoffHintsDelete",
		Method:             "DELETE",
		PathPattern:        "/hinted_handoff/hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HintedHandoffHintsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HintedHandoffHintsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HintedHandoffHintsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HintedHandoffHintsGet lists endpoints pending hints

List all the endpoints that this node has hints for.
*/
func (a *Client) HintedHandoffHintsGet(params *HintedHandoffHintsGetParams) (*HintedHandoffHintsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHintedHandoffHintsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HintedHandoffHintsGet",
		Method:             "GET",
		PathPattern:        "/hinted_handoff/hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HintedHandoffHintsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HintedHandoffHintsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HintedHandoffHintsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HintedHandoffMetricsCreateHintByAddrGet gets create hint count

Get create hint count
*/
func (a *Client) HintedHandoffMetricsCreateHintByAddrGet(params *HintedHandoffMetricsCreateHintByAddrGetParams) (*HintedHandoffMetricsCreateHintByAddrGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHintedHandoffMetricsCreateHintByAddrGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HintedHandoffMetricsCreateHintByAddrGet",
		Method:             "GET",
		PathPattern:        "/hinted_handoff/metrics/create_hint/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HintedHandoffMetricsCreateHintByAddrGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HintedHandoffMetricsCreateHintByAddrGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HintedHandoffMetricsCreateHintByAddrGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HintedHandoffMetricsNotStoredHintsByAddrGet gets not stored hints count

Get not stored hints count
*/
func (a *Client) HintedHandoffMetricsNotStoredHintsByAddrGet(params *HintedHandoffMetricsNotStoredHintsByAddrGetParams) (*HintedHandoffMetricsNotStoredHintsByAddrGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHintedHandoffMetricsNotStoredHintsByAddrGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HintedHandoffMetricsNotStoredHintsByAddrGet",
		Method:             "GET",
		PathPattern:        "/hinted_handoff/metrics/not_stored_hints/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HintedHandoffMetricsNotStoredHintsByAddrGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HintedHandoffMetricsNotStoredHintsByAddrGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HintedHandoffMetricsNotStoredHintsByAddrGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HintedHandoffPausePost pauses hints delivery

pause hints delivery
*/
func (a *Client) HintedHandoffPausePost(params *HintedHandoffPausePostParams) (*HintedHandoffPausePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHintedHandoffPausePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HintedHandoffPausePost",
		Method:             "POST",
		PathPattern:        "/hinted_handoff/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HintedHandoffPausePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HintedHandoffPausePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HintedHandoffPausePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HintedHandoffSchedulePost schedules hint delivery

force hint delivery to an endpoint
*/
func (a *Client) HintedHandoffSchedulePost(params *HintedHandoffSchedulePostParams) (*HintedHandoffSchedulePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHintedHandoffSchedulePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HintedHandoffSchedulePost",
		Method:             "POST",
		PathPattern:        "/hinted_handoff/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HintedHandoffSchedulePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HintedHandoffSchedulePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HintedHandoffSchedulePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LsaCompactPost lsas compact

Force compaction of all regions
*/
func (a *Client) LsaCompactPost(params *LsaCompactPostParams) (*LsaCompactPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLsaCompactPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LsaCompactPost",
		Method:             "POST",
		PathPattern:        "/lsa/compact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LsaCompactPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LsaCompactPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LsaCompactPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesDroppedByVerGet gets dropped messages by ver

Get the number of dropped messages per verb
*/
func (a *Client) MessagingServiceMessagesDroppedByVerGet(params *MessagingServiceMessagesDroppedByVerGetParams) (*MessagingServiceMessagesDroppedByVerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesDroppedByVerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesDroppedByVerGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/dropped_by_ver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesDroppedByVerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesDroppedByVerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesDroppedByVerGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesDroppedGet gets dropped messages

Get the number of messages that were dropped before sending
*/
func (a *Client) MessagingServiceMessagesDroppedGet(params *MessagingServiceMessagesDroppedGetParams) (*MessagingServiceMessagesDroppedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesDroppedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesDroppedGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/dropped",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesDroppedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesDroppedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesDroppedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesExceptionGet gets exception messages

Get the number of messages return with an exception
*/
func (a *Client) MessagingServiceMessagesExceptionGet(params *MessagingServiceMessagesExceptionGetParams) (*MessagingServiceMessagesExceptionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesExceptionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesExceptionGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/exception",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesExceptionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesExceptionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesExceptionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesPendingGet gets pending messages

Get the number of pending messages
*/
func (a *Client) MessagingServiceMessagesPendingGet(params *MessagingServiceMessagesPendingGetParams) (*MessagingServiceMessagesPendingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesPendingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesPendingGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesPendingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesPendingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesPendingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesRepliedGet gets completed messages

Get the number of replied messages
*/
func (a *Client) MessagingServiceMessagesRepliedGet(params *MessagingServiceMessagesRepliedGetParams) (*MessagingServiceMessagesRepliedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesRepliedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesRepliedGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/replied",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesRepliedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesRepliedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesRepliedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesRespondCompletedGet gets respond completed messages

Get the number of completed respond messages
*/
func (a *Client) MessagingServiceMessagesRespondCompletedGet(params *MessagingServiceMessagesRespondCompletedGetParams) (*MessagingServiceMessagesRespondCompletedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesRespondCompletedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesRespondCompletedGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/respond_completed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesRespondCompletedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesRespondCompletedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesRespondCompletedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesRespondPendingGet gets respond pending messages

Get the number of messages waiting for respond
*/
func (a *Client) MessagingServiceMessagesRespondPendingGet(params *MessagingServiceMessagesRespondPendingGetParams) (*MessagingServiceMessagesRespondPendingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesRespondPendingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesRespondPendingGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/respond_pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesRespondPendingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesRespondPendingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesRespondPendingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesSentGet gets sent messages

Get the number of sent messages
*/
func (a *Client) MessagingServiceMessagesSentGet(params *MessagingServiceMessagesSentGetParams) (*MessagingServiceMessagesSentGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesSentGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesSentGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/sent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesSentGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesSentGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesSentGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceMessagesTimeoutGet gets timeout messages

Get the number of timeout messages
*/
func (a *Client) MessagingServiceMessagesTimeoutGet(params *MessagingServiceMessagesTimeoutGetParams) (*MessagingServiceMessagesTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceMessagesTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceMessagesTimeoutGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceMessagesTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceMessagesTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceMessagesTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MessagingServiceVersionGet gets version

Get the version number
*/
func (a *Client) MessagingServiceVersionGet(params *MessagingServiceVersionGetParams) (*MessagingServiceVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagingServiceVersionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MessagingServiceVersionGet",
		Method:             "GET",
		PathPattern:        "/messaging_service/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagingServiceVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MessagingServiceVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MessagingServiceVersionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SnitchDatacenterGet gets datacenter

Provides the Datacenter name depending on the respective snitch used, given the hostname/ip
*/
func (a *Client) SnitchDatacenterGet(params *SnitchDatacenterGetParams) (*SnitchDatacenterGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnitchDatacenterGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SnitchDatacenterGet",
		Method:             "GET",
		PathPattern:        "/snitch/datacenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SnitchDatacenterGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SnitchDatacenterGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SnitchDatacenterGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SnitchNameGet gets snitch name

Provides the snitch name of the cluster
*/
func (a *Client) SnitchNameGet(params *SnitchNameGetParams) (*SnitchNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnitchNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SnitchNameGet",
		Method:             "GET",
		PathPattern:        "/snitch/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SnitchNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SnitchNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SnitchNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SnitchRackGet gets rack

Provides the Rack name depending on the respective snitch used, given the host name/ip
*/
func (a *Client) SnitchRackGet(params *SnitchRackGetParams) (*SnitchRackGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnitchRackGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SnitchRackGet",
		Method:             "GET",
		PathPattern:        "/snitch/rack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SnitchRackGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SnitchRackGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SnitchRackGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyCasContentionTimeoutGet gets cas contention timeout

Get CAS contention timeout in seconds
*/
func (a *Client) StorageProxyCasContentionTimeoutGet(params *StorageProxyCasContentionTimeoutGetParams) (*StorageProxyCasContentionTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyCasContentionTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyCasContentionTimeoutGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/cas_contention_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyCasContentionTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyCasContentionTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyCasContentionTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyCasContentionTimeoutPost sets cas contention timeout

Set CAS contention timeout
*/
func (a *Client) StorageProxyCasContentionTimeoutPost(params *StorageProxyCasContentionTimeoutPostParams) (*StorageProxyCasContentionTimeoutPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyCasContentionTimeoutPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyCasContentionTimeoutPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/cas_contention_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyCasContentionTimeoutPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyCasContentionTimeoutPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyCasContentionTimeoutPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyCounterWriteRPCTimeoutGet gets counter write rpc timeout

Get counter write rpc timeout in seconds
*/
func (a *Client) StorageProxyCounterWriteRPCTimeoutGet(params *StorageProxyCounterWriteRPCTimeoutGetParams) (*StorageProxyCounterWriteRPCTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyCounterWriteRPCTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyCounterWriteRpcTimeoutGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/counter_write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyCounterWriteRPCTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyCounterWriteRPCTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyCounterWriteRPCTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyCounterWriteRPCTimeoutPost sets counter write rpc timeout

Set counter write rpc timeout
*/
func (a *Client) StorageProxyCounterWriteRPCTimeoutPost(params *StorageProxyCounterWriteRPCTimeoutPostParams) (*StorageProxyCounterWriteRPCTimeoutPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyCounterWriteRPCTimeoutPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyCounterWriteRpcTimeoutPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/counter_write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyCounterWriteRPCTimeoutPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyCounterWriteRPCTimeoutPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyCounterWriteRPCTimeoutPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyHintedHandoffEnabledByDcGet gets hinted handoff enabled by dc

Get the hinted handoff enabled by dc
*/
func (a *Client) StorageProxyHintedHandoffEnabledByDcGet(params *StorageProxyHintedHandoffEnabledByDcGetParams) (*StorageProxyHintedHandoffEnabledByDcGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyHintedHandoffEnabledByDcGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyHintedHandoffEnabledByDcGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled_by_dc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyHintedHandoffEnabledByDcGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyHintedHandoffEnabledByDcGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyHintedHandoffEnabledByDcGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyHintedHandoffEnabledByDcPost sets hinted handoff enabled by dc list

Set the hinted handoff enabled by dc
*/
func (a *Client) StorageProxyHintedHandoffEnabledByDcPost(params *StorageProxyHintedHandoffEnabledByDcPostParams) (*StorageProxyHintedHandoffEnabledByDcPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyHintedHandoffEnabledByDcPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyHintedHandoffEnabledByDcPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled_by_dc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyHintedHandoffEnabledByDcPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyHintedHandoffEnabledByDcPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyHintedHandoffEnabledByDcPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyHintedHandoffEnabledGet gets hinted handoff enabled

Return true if hinted handoff enabled
*/
func (a *Client) StorageProxyHintedHandoffEnabledGet(params *StorageProxyHintedHandoffEnabledGetParams) (*StorageProxyHintedHandoffEnabledGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyHintedHandoffEnabledGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyHintedHandoffEnabledGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyHintedHandoffEnabledGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyHintedHandoffEnabledGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyHintedHandoffEnabledGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyHintedHandoffEnabledPost sets hinted handoff enabled

Set hinted handoff status
*/
func (a *Client) StorageProxyHintedHandoffEnabledPost(params *StorageProxyHintedHandoffEnabledPostParams) (*StorageProxyHintedHandoffEnabledPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyHintedHandoffEnabledPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyHintedHandoffEnabledPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyHintedHandoffEnabledPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyHintedHandoffEnabledPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyHintedHandoffEnabledPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyHintsInProgressGet gets hints in progress

get hints in progress
*/
func (a *Client) StorageProxyHintsInProgressGet(params *StorageProxyHintsInProgressGetParams) (*StorageProxyHintsInProgressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyHintsInProgressGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyHintsInProgressGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyHintsInProgressGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyHintsInProgressGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyHintsInProgressGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMaxHintWindowGet gets max hint window

Get the max hint window
*/
func (a *Client) StorageProxyMaxHintWindowGet(params *StorageProxyMaxHintWindowGetParams) (*StorageProxyMaxHintWindowGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMaxHintWindowGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMaxHintWindowGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/max_hint_window",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMaxHintWindowGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMaxHintWindowGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMaxHintWindowGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMaxHintWindowPost sets max hint window

Set the max hint window
*/
func (a *Client) StorageProxyMaxHintWindowPost(params *StorageProxyMaxHintWindowPostParams) (*StorageProxyMaxHintWindowPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMaxHintWindowPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMaxHintWindowPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/max_hint_window",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMaxHintWindowPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMaxHintWindowPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMaxHintWindowPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMaxHintsInProgressGet gets max hints in progress

Get max hints in progress
*/
func (a *Client) StorageProxyMaxHintsInProgressGet(params *StorageProxyMaxHintsInProgressGetParams) (*StorageProxyMaxHintsInProgressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMaxHintsInProgressGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMaxHintsInProgressGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/max_hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMaxHintsInProgressGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMaxHintsInProgressGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMaxHintsInProgressGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMaxHintsInProgressPost sets max hints in progress

Set max hints in progress
*/
func (a *Client) StorageProxyMaxHintsInProgressPost(params *StorageProxyMaxHintsInProgressPostParams) (*StorageProxyMaxHintsInProgressPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMaxHintsInProgressPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMaxHintsInProgressPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/max_hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMaxHintsInProgressPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMaxHintsInProgressPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMaxHintsInProgressPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasReadConditionNotMetGet gets cas read metrics condition not met

Get cas read metrics
*/
func (a *Client) StorageProxyMetricsCasReadConditionNotMetGet(params *StorageProxyMetricsCasReadConditionNotMetGetParams) (*StorageProxyMetricsCasReadConditionNotMetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasReadConditionNotMetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasReadConditionNotMetGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/condition_not_met",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasReadConditionNotMetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasReadConditionNotMetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasReadConditionNotMetGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasReadContentionGet gets cas read metrics contention

Get cas read metrics
*/
func (a *Client) StorageProxyMetricsCasReadContentionGet(params *StorageProxyMetricsCasReadContentionGetParams) (*StorageProxyMetricsCasReadContentionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasReadContentionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasReadContentionGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/contention",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasReadContentionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasReadContentionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasReadContentionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasReadTimeoutsGet gets cas read timeouts

Get CAS read timeout
*/
func (a *Client) StorageProxyMetricsCasReadTimeoutsGet(params *StorageProxyMetricsCasReadTimeoutsGetParams) (*StorageProxyMetricsCasReadTimeoutsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasReadTimeoutsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasReadTimeoutsGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasReadTimeoutsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasReadTimeoutsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasReadTimeoutsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasReadUnavailablesGet gets cas read unavailables

Get CAS read unavailables
*/
func (a *Client) StorageProxyMetricsCasReadUnavailablesGet(params *StorageProxyMetricsCasReadUnavailablesGetParams) (*StorageProxyMetricsCasReadUnavailablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasReadUnavailablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasReadUnavailablesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasReadUnavailablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasReadUnavailablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasReadUnavailablesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasReadUnfinishedCommitGet gets cas read metrics unfinished commit

Get cas read metrics
*/
func (a *Client) StorageProxyMetricsCasReadUnfinishedCommitGet(params *StorageProxyMetricsCasReadUnfinishedCommitGetParams) (*StorageProxyMetricsCasReadUnfinishedCommitGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasReadUnfinishedCommitGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasReadUnfinishedCommitGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/unfinished_commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasReadUnfinishedCommitGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasReadUnfinishedCommitGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasReadUnfinishedCommitGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasWriteConditionNotMetGet gets cas write metrics condition not met

Get cas write metrics
*/
func (a *Client) StorageProxyMetricsCasWriteConditionNotMetGet(params *StorageProxyMetricsCasWriteConditionNotMetGetParams) (*StorageProxyMetricsCasWriteConditionNotMetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasWriteConditionNotMetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasWriteConditionNotMetGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/condition_not_met",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasWriteConditionNotMetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasWriteConditionNotMetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasWriteConditionNotMetGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasWriteContentionGet gets cas write metrics contention

Get cas write metrics
*/
func (a *Client) StorageProxyMetricsCasWriteContentionGet(params *StorageProxyMetricsCasWriteContentionGetParams) (*StorageProxyMetricsCasWriteContentionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasWriteContentionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasWriteContentionGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/contention",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasWriteContentionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasWriteContentionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasWriteContentionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasWriteTimeoutsGet gets cas write timeouts

Get CAS write timeout
*/
func (a *Client) StorageProxyMetricsCasWriteTimeoutsGet(params *StorageProxyMetricsCasWriteTimeoutsGetParams) (*StorageProxyMetricsCasWriteTimeoutsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasWriteTimeoutsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasWriteTimeoutsGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasWriteTimeoutsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasWriteTimeoutsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasWriteTimeoutsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasWriteUnavailablesGet gets cas write unavailables

Get CAS write unavailables
*/
func (a *Client) StorageProxyMetricsCasWriteUnavailablesGet(params *StorageProxyMetricsCasWriteUnavailablesGetParams) (*StorageProxyMetricsCasWriteUnavailablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasWriteUnavailablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasWriteUnavailablesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasWriteUnavailablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasWriteUnavailablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasWriteUnavailablesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsCasWriteUnfinishedCommitGet gets cas write metrics unfinished commit

Get cas write metrics
*/
func (a *Client) StorageProxyMetricsCasWriteUnfinishedCommitGet(params *StorageProxyMetricsCasWriteUnfinishedCommitGetParams) (*StorageProxyMetricsCasWriteUnfinishedCommitGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsCasWriteUnfinishedCommitGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsCasWriteUnfinishedCommitGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/unfinished_commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsCasWriteUnfinishedCommitGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsCasWriteUnfinishedCommitGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsCasWriteUnfinishedCommitGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeEstimatedHistogramGet gets range estimated histogram

Get range estimated latency
*/
func (a *Client) StorageProxyMetricsRangeEstimatedHistogramGet(params *StorageProxyMetricsRangeEstimatedHistogramGetParams) (*StorageProxyMetricsRangeEstimatedHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeEstimatedHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeEstimatedHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/estimated_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeEstimatedHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeEstimatedHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeEstimatedHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeGet gets range latency

Get range latency
*/
func (a *Client) StorageProxyMetricsRangeGet(params *StorageProxyMetricsRangeGetParams) (*StorageProxyMetricsRangeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeHistogramGet gets range metrics latency histogram depricated

Get range metrics
*/
func (a *Client) StorageProxyMetricsRangeHistogramGet(params *StorageProxyMetricsRangeHistogramGetParams) (*StorageProxyMetricsRangeHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeMovingAverageHistogramGet gets range metrics latency histogram

Get range metrics rate and histogram
*/
func (a *Client) StorageProxyMetricsRangeMovingAverageHistogramGet(params *StorageProxyMetricsRangeMovingAverageHistogramGetParams) (*StorageProxyMetricsRangeMovingAverageHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeMovingAverageHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeMovingAverageHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/moving_average_histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeMovingAverageHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeMovingAverageHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeMovingAverageHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeTimeoutsGet gets range metrics timeouts

Get range metrics
*/
func (a *Client) StorageProxyMetricsRangeTimeoutsGet(params *StorageProxyMetricsRangeTimeoutsGetParams) (*StorageProxyMetricsRangeTimeoutsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeTimeoutsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeTimeoutsGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeTimeoutsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeTimeoutsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeTimeoutsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeTimeoutsRatesGet gets range metrics timeouts rates

Get range metrics rates
*/
func (a *Client) StorageProxyMetricsRangeTimeoutsRatesGet(params *StorageProxyMetricsRangeTimeoutsRatesGetParams) (*StorageProxyMetricsRangeTimeoutsRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeTimeoutsRatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeTimeoutsRatesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/timeouts_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeTimeoutsRatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeTimeoutsRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeTimeoutsRatesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeUnavailablesGet gets range metrics unavailables

Get range metrics
*/
func (a *Client) StorageProxyMetricsRangeUnavailablesGet(params *StorageProxyMetricsRangeUnavailablesGetParams) (*StorageProxyMetricsRangeUnavailablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeUnavailablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeUnavailablesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeUnavailablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeUnavailablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeUnavailablesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsRangeUnavailablesRatesGet gets range metrics unavailables rates

Get range metrics rates
*/
func (a *Client) StorageProxyMetricsRangeUnavailablesRatesGet(params *StorageProxyMetricsRangeUnavailablesRatesGetParams) (*StorageProxyMetricsRangeUnavailablesRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsRangeUnavailablesRatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsRangeUnavailablesRatesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/unavailables_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsRangeUnavailablesRatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsRangeUnavailablesRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsRangeUnavailablesRatesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadEstimatedHistogramGet gets read estimated histogram

Get read estimated latency
*/
func (a *Client) StorageProxyMetricsReadEstimatedHistogramGet(params *StorageProxyMetricsReadEstimatedHistogramGetParams) (*StorageProxyMetricsReadEstimatedHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadEstimatedHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadEstimatedHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/estimated_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadEstimatedHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadEstimatedHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadEstimatedHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadGet gets read latency

Get read latency
*/
func (a *Client) StorageProxyMetricsReadGet(params *StorageProxyMetricsReadGetParams) (*StorageProxyMetricsReadGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadHistogramGet gets read metrics latency histogram depricated

Get read metrics
*/
func (a *Client) StorageProxyMetricsReadHistogramGet(params *StorageProxyMetricsReadHistogramGetParams) (*StorageProxyMetricsReadHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadMovingAverageHistogramGet gets read metrics latency histogram

Get read metrics
*/
func (a *Client) StorageProxyMetricsReadMovingAverageHistogramGet(params *StorageProxyMetricsReadMovingAverageHistogramGetParams) (*StorageProxyMetricsReadMovingAverageHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadMovingAverageHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadMovingAverageHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/moving_average_histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadMovingAverageHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadMovingAverageHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadMovingAverageHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadTimeoutsGet gets read metrics timeouts

Get read metrics
*/
func (a *Client) StorageProxyMetricsReadTimeoutsGet(params *StorageProxyMetricsReadTimeoutsGetParams) (*StorageProxyMetricsReadTimeoutsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadTimeoutsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadTimeoutsGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadTimeoutsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadTimeoutsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadTimeoutsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadTimeoutsRatesGet gets read metrics timeouts rates

Get read metrics rates
*/
func (a *Client) StorageProxyMetricsReadTimeoutsRatesGet(params *StorageProxyMetricsReadTimeoutsRatesGetParams) (*StorageProxyMetricsReadTimeoutsRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadTimeoutsRatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadTimeoutsRatesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/timeouts_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadTimeoutsRatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadTimeoutsRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadTimeoutsRatesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadUnavailablesGet gets read metrics unavailables

Get read metrics
*/
func (a *Client) StorageProxyMetricsReadUnavailablesGet(params *StorageProxyMetricsReadUnavailablesGetParams) (*StorageProxyMetricsReadUnavailablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadUnavailablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadUnavailablesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadUnavailablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadUnavailablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadUnavailablesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsReadUnavailablesRatesGet gets read metrics unavailables rates

Get read metrics rates
*/
func (a *Client) StorageProxyMetricsReadUnavailablesRatesGet(params *StorageProxyMetricsReadUnavailablesRatesGetParams) (*StorageProxyMetricsReadUnavailablesRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsReadUnavailablesRatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsReadUnavailablesRatesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/unavailables_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsReadUnavailablesRatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsReadUnavailablesRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsReadUnavailablesRatesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteEstimatedHistogramGet gets write estimated histogram

Get write estimated latency
*/
func (a *Client) StorageProxyMetricsWriteEstimatedHistogramGet(params *StorageProxyMetricsWriteEstimatedHistogramGetParams) (*StorageProxyMetricsWriteEstimatedHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteEstimatedHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteEstimatedHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/estimated_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteEstimatedHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteEstimatedHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteEstimatedHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteGet gets write latency

Get write latency
*/
func (a *Client) StorageProxyMetricsWriteGet(params *StorageProxyMetricsWriteGetParams) (*StorageProxyMetricsWriteGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteHistogramGet gets write metrics latency histogram depricated

Get write metrics
*/
func (a *Client) StorageProxyMetricsWriteHistogramGet(params *StorageProxyMetricsWriteHistogramGetParams) (*StorageProxyMetricsWriteHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteMovingAverageHistogramGet gets write metrics latency histogram

Get write metrics
*/
func (a *Client) StorageProxyMetricsWriteMovingAverageHistogramGet(params *StorageProxyMetricsWriteMovingAverageHistogramGetParams) (*StorageProxyMetricsWriteMovingAverageHistogramGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteMovingAverageHistogramGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteMovingAverageHistogramGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/moving_average_histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteMovingAverageHistogramGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteMovingAverageHistogramGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteMovingAverageHistogramGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteTimeoutsGet gets write metrics timeouts

Get write metrics
*/
func (a *Client) StorageProxyMetricsWriteTimeoutsGet(params *StorageProxyMetricsWriteTimeoutsGetParams) (*StorageProxyMetricsWriteTimeoutsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteTimeoutsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteTimeoutsGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteTimeoutsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteTimeoutsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteTimeoutsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteTimeoutsRatesGet gets write metrics timeouts rates

Get write metrics rates
*/
func (a *Client) StorageProxyMetricsWriteTimeoutsRatesGet(params *StorageProxyMetricsWriteTimeoutsRatesGetParams) (*StorageProxyMetricsWriteTimeoutsRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteTimeoutsRatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteTimeoutsRatesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/timeouts_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteTimeoutsRatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteTimeoutsRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteTimeoutsRatesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteUnavailablesGet gets write metrics unavailables

Get write metrics
*/
func (a *Client) StorageProxyMetricsWriteUnavailablesGet(params *StorageProxyMetricsWriteUnavailablesGetParams) (*StorageProxyMetricsWriteUnavailablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteUnavailablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteUnavailablesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteUnavailablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteUnavailablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteUnavailablesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyMetricsWriteUnavailablesRatesGet gets write metrics unavailables rates

Get write metrics rates
*/
func (a *Client) StorageProxyMetricsWriteUnavailablesRatesGet(params *StorageProxyMetricsWriteUnavailablesRatesGetParams) (*StorageProxyMetricsWriteUnavailablesRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyMetricsWriteUnavailablesRatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyMetricsWriteUnavailablesRatesGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/unavailables_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyMetricsWriteUnavailablesRatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyMetricsWriteUnavailablesRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyMetricsWriteUnavailablesRatesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyRangeRPCTimeoutGet gets range rpc timeout

Get range rpc timeout in seconds
*/
func (a *Client) StorageProxyRangeRPCTimeoutGet(params *StorageProxyRangeRPCTimeoutGetParams) (*StorageProxyRangeRPCTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyRangeRPCTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyRangeRpcTimeoutGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/range_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyRangeRPCTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyRangeRPCTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyRangeRPCTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyRangeRPCTimeoutPost sets range rpc timeout

Set range rpc timeout
*/
func (a *Client) StorageProxyRangeRPCTimeoutPost(params *StorageProxyRangeRPCTimeoutPostParams) (*StorageProxyRangeRPCTimeoutPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyRangeRPCTimeoutPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyRangeRpcTimeoutPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/range_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyRangeRPCTimeoutPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyRangeRPCTimeoutPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyRangeRPCTimeoutPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyReadRepairAttemptedGet gets read repair attempted

Get read repair attempted
*/
func (a *Client) StorageProxyReadRepairAttemptedGet(params *StorageProxyReadRepairAttemptedGetParams) (*StorageProxyReadRepairAttemptedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyReadRepairAttemptedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyReadRepairAttemptedGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_repair_attempted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyReadRepairAttemptedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyReadRepairAttemptedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyReadRepairAttemptedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyReadRepairRepairedBackgroundGet gets read repair repaired background

Get read repair repaired background
*/
func (a *Client) StorageProxyReadRepairRepairedBackgroundGet(params *StorageProxyReadRepairRepairedBackgroundGetParams) (*StorageProxyReadRepairRepairedBackgroundGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyReadRepairRepairedBackgroundGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyReadRepairRepairedBackgroundGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_repair_repaired_background",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyReadRepairRepairedBackgroundGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyReadRepairRepairedBackgroundGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyReadRepairRepairedBackgroundGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyReadRepairRepairedBlockingGet gets read repair repaired blocking

Get read repair repaired blocking
*/
func (a *Client) StorageProxyReadRepairRepairedBlockingGet(params *StorageProxyReadRepairRepairedBlockingGetParams) (*StorageProxyReadRepairRepairedBlockingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyReadRepairRepairedBlockingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyReadRepairRepairedBlockingGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_repair_repaired_blocking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyReadRepairRepairedBlockingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyReadRepairRepairedBlockingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyReadRepairRepairedBlockingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyReadRPCTimeoutGet gets read rpc timeout

Get the read RPC timeout in seconds
*/
func (a *Client) StorageProxyReadRPCTimeoutGet(params *StorageProxyReadRPCTimeoutGetParams) (*StorageProxyReadRPCTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyReadRPCTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyReadRpcTimeoutGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyReadRPCTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyReadRPCTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyReadRPCTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyReadRPCTimeoutPost sets read rpc timeout

Set the read RPC timeout
*/
func (a *Client) StorageProxyReadRPCTimeoutPost(params *StorageProxyReadRPCTimeoutPostParams) (*StorageProxyReadRPCTimeoutPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyReadRPCTimeoutPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyReadRpcTimeoutPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/read_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyReadRPCTimeoutPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyReadRPCTimeoutPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyReadRPCTimeoutPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyReloadTriggerClassesPost reloads trigger classes

Reload trigger classes
*/
func (a *Client) StorageProxyReloadTriggerClassesPost(params *StorageProxyReloadTriggerClassesPostParams) (*StorageProxyReloadTriggerClassesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyReloadTriggerClassesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyReloadTriggerClassesPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/reload_trigger_classes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyReloadTriggerClassesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyReloadTriggerClassesPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyReloadTriggerClassesPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyRPCTimeoutGet gets rpc timeout

Get the RPC timeout in seconds
*/
func (a *Client) StorageProxyRPCTimeoutGet(params *StorageProxyRPCTimeoutGetParams) (*StorageProxyRPCTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyRPCTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyRpcTimeoutGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyRPCTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyRPCTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyRPCTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyRPCTimeoutPost sets rpc timeout

Set the RPC timeout
*/
func (a *Client) StorageProxyRPCTimeoutPost(params *StorageProxyRPCTimeoutPostParams) (*StorageProxyRPCTimeoutPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyRPCTimeoutPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyRpcTimeoutPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyRPCTimeoutPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyRPCTimeoutPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyRPCTimeoutPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxySchemaVersionsGet gets schema versions

Get a map of the schema versions
*/
func (a *Client) StorageProxySchemaVersionsGet(params *StorageProxySchemaVersionsGetParams) (*StorageProxySchemaVersionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxySchemaVersionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxySchemaVersionsGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/schema_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxySchemaVersionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxySchemaVersionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxySchemaVersionsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyTotalHintsGet gets total hints

Get total hints
*/
func (a *Client) StorageProxyTotalHintsGet(params *StorageProxyTotalHintsGetParams) (*StorageProxyTotalHintsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyTotalHintsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyTotalHintsGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/total_hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyTotalHintsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyTotalHintsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyTotalHintsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyTruncateRPCTimeoutGet gets truncate rpc timeout

Get truncate rpc timeout in seconds
*/
func (a *Client) StorageProxyTruncateRPCTimeoutGet(params *StorageProxyTruncateRPCTimeoutGetParams) (*StorageProxyTruncateRPCTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyTruncateRPCTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyTruncateRpcTimeoutGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/truncate_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyTruncateRPCTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyTruncateRPCTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyTruncateRPCTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyTruncateRPCTimeoutPost sets truncate rpc timeout

Set truncate rpc timeout
*/
func (a *Client) StorageProxyTruncateRPCTimeoutPost(params *StorageProxyTruncateRPCTimeoutPostParams) (*StorageProxyTruncateRPCTimeoutPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyTruncateRPCTimeoutPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyTruncateRpcTimeoutPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/truncate_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyTruncateRPCTimeoutPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyTruncateRPCTimeoutPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyTruncateRPCTimeoutPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyWriteRPCTimeoutGet gets write rpc timeout

Get the write RPC timeout in seconds
*/
func (a *Client) StorageProxyWriteRPCTimeoutGet(params *StorageProxyWriteRPCTimeoutGetParams) (*StorageProxyWriteRPCTimeoutGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyWriteRPCTimeoutGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyWriteRpcTimeoutGet",
		Method:             "GET",
		PathPattern:        "/storage_proxy/write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyWriteRPCTimeoutGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyWriteRPCTimeoutGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyWriteRPCTimeoutGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageProxyWriteRPCTimeoutPost sets write rpc timeout

Set the write RPC timeout
*/
func (a *Client) StorageProxyWriteRPCTimeoutPost(params *StorageProxyWriteRPCTimeoutPostParams) (*StorageProxyWriteRPCTimeoutPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageProxyWriteRPCTimeoutPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageProxyWriteRpcTimeoutPost",
		Method:             "POST",
		PathPattern:        "/storage_proxy/write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageProxyWriteRPCTimeoutPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageProxyWriteRPCTimeoutPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageProxyWriteRPCTimeoutPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceActiveRepairGet gets active repair async

Return an array with the ids of the currently active repairs
*/
func (a *Client) StorageServiceActiveRepairGet(params *StorageServiceActiveRepairGetParams) (*StorageServiceActiveRepairGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceActiveRepairGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceActiveRepairGet",
		Method:             "GET",
		PathPattern:        "/storage_service/active_repair/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceActiveRepairGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceActiveRepairGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceActiveRepairGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceAutoCompactionByKeyspaceDelete disables auto compaction

Disable auto compaction
*/
func (a *Client) StorageServiceAutoCompactionByKeyspaceDelete(params *StorageServiceAutoCompactionByKeyspaceDeleteParams) (*StorageServiceAutoCompactionByKeyspaceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceAutoCompactionByKeyspaceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceAutoCompactionByKeyspaceDelete",
		Method:             "DELETE",
		PathPattern:        "/storage_service/auto_compaction/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceAutoCompactionByKeyspaceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceAutoCompactionByKeyspaceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceAutoCompactionByKeyspaceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceAutoCompactionByKeyspacePost enables auto compaction

Enable auto compaction
*/
func (a *Client) StorageServiceAutoCompactionByKeyspacePost(params *StorageServiceAutoCompactionByKeyspacePostParams) (*StorageServiceAutoCompactionByKeyspacePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceAutoCompactionByKeyspacePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceAutoCompactionByKeyspacePost",
		Method:             "POST",
		PathPattern:        "/storage_service/auto_compaction/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceAutoCompactionByKeyspacePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceAutoCompactionByKeyspacePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceAutoCompactionByKeyspacePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceBatchSizeFailureThresholdGet gets batch size failure threshold

Returns the threshold for rejecting queries due to a large batch size
*/
func (a *Client) StorageServiceBatchSizeFailureThresholdGet(params *StorageServiceBatchSizeFailureThresholdGetParams) (*StorageServiceBatchSizeFailureThresholdGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceBatchSizeFailureThresholdGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceBatchSizeFailureThresholdGet",
		Method:             "GET",
		PathPattern:        "/storage_service/batch_size_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceBatchSizeFailureThresholdGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceBatchSizeFailureThresholdGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceBatchSizeFailureThresholdGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceBatchSizeFailureThresholdPost sets batch size failure threshold

Sets the threshold for rejecting queries due to a large batch size
*/
func (a *Client) StorageServiceBatchSizeFailureThresholdPost(params *StorageServiceBatchSizeFailureThresholdPostParams) (*StorageServiceBatchSizeFailureThresholdPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceBatchSizeFailureThresholdPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceBatchSizeFailureThresholdPost",
		Method:             "POST",
		PathPattern:        "/storage_service/batch_size_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceBatchSizeFailureThresholdPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceBatchSizeFailureThresholdPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceBatchSizeFailureThresholdPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceBulkLoadAsyncByPathGet bulks load async

Starts a bulk load asynchronously and returns the String representation of the planID for the new streaming session.
*/
func (a *Client) StorageServiceBulkLoadAsyncByPathGet(params *StorageServiceBulkLoadAsyncByPathGetParams) (*StorageServiceBulkLoadAsyncByPathGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceBulkLoadAsyncByPathGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceBulkLoadAsyncByPathGet",
		Method:             "GET",
		PathPattern:        "/storage_service/bulk_load_async/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceBulkLoadAsyncByPathGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceBulkLoadAsyncByPathGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceBulkLoadAsyncByPathGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceBulkLoadByPathPost bulks load

Starts a bulk load and blocks until it completes
*/
func (a *Client) StorageServiceBulkLoadByPathPost(params *StorageServiceBulkLoadByPathPostParams) (*StorageServiceBulkLoadByPathPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceBulkLoadByPathPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceBulkLoadByPathPost",
		Method:             "POST",
		PathPattern:        "/storage_service/bulk_load/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceBulkLoadByPathPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceBulkLoadByPathPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceBulkLoadByPathPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceClusterNameGet gets cluster name

Returns the name of the cluster
*/
func (a *Client) StorageServiceClusterNameGet(params *StorageServiceClusterNameGetParams) (*StorageServiceClusterNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceClusterNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceClusterNameGet",
		Method:             "GET",
		PathPattern:        "/storage_service/cluster_name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceClusterNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceClusterNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceClusterNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceCommitlogGet gets commitlog

Returns the location of the commit log files
*/
func (a *Client) StorageServiceCommitlogGet(params *StorageServiceCommitlogGetParams) (*StorageServiceCommitlogGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceCommitlogGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceCommitlogGet",
		Method:             "GET",
		PathPattern:        "/storage_service/commitlog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceCommitlogGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceCommitlogGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceCommitlogGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceCompactionThroughputGet gets compaction throughput mb per sec

get compaction throughput mb per sec
*/
func (a *Client) StorageServiceCompactionThroughputGet(params *StorageServiceCompactionThroughputGetParams) (*StorageServiceCompactionThroughputGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceCompactionThroughputGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceCompactionThroughputGet",
		Method:             "GET",
		PathPattern:        "/storage_service/compaction_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceCompactionThroughputGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceCompactionThroughputGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceCompactionThroughputGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceCompactionThroughputPost sets compaction throughput mb per sec

Set compaction throughput mb per sec
*/
func (a *Client) StorageServiceCompactionThroughputPost(params *StorageServiceCompactionThroughputPostParams) (*StorageServiceCompactionThroughputPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceCompactionThroughputPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceCompactionThroughputPost",
		Method:             "POST",
		PathPattern:        "/storage_service/compaction_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceCompactionThroughputPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceCompactionThroughputPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceCompactionThroughputPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceDataFileLocationsGet gets all data file locations

Get the list of all data file locations from conf
*/
func (a *Client) StorageServiceDataFileLocationsGet(params *StorageServiceDataFileLocationsGetParams) (*StorageServiceDataFileLocationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceDataFileLocationsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceDataFileLocationsGet",
		Method:             "GET",
		PathPattern:        "/storage_service/data_file/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceDataFileLocationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceDataFileLocationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceDataFileLocationsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceDecommissionPost decommissions

transfer this node's data to other machines and remove it from service.
*/
func (a *Client) StorageServiceDecommissionPost(params *StorageServiceDecommissionPostParams) (*StorageServiceDecommissionPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceDecommissionPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceDecommissionPost",
		Method:             "POST",
		PathPattern:        "/storage_service/decommission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceDecommissionPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceDecommissionPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceDecommissionPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceDeliverHintsPost delivers hints
*/
func (a *Client) StorageServiceDeliverHintsPost(params *StorageServiceDeliverHintsPostParams) (*StorageServiceDeliverHintsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceDeliverHintsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceDeliverHintsPost",
		Method:             "POST",
		PathPattern:        "/storage_service/deliver_hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceDeliverHintsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceDeliverHintsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceDeliverHintsPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceDescribeRingByKeyspaceGet describes ring

The TokenRange for a given keyspace
*/
func (a *Client) StorageServiceDescribeRingByKeyspaceGet(params *StorageServiceDescribeRingByKeyspaceGetParams) (*StorageServiceDescribeRingByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceDescribeRingByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceDescribeRingByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/describe_ring/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceDescribeRingByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceDescribeRingByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceDescribeRingByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceDrainGet gets drain progress

Get the progress of a drain operation
*/
func (a *Client) StorageServiceDrainGet(params *StorageServiceDrainGetParams) (*StorageServiceDrainGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceDrainGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceDrainGet",
		Method:             "GET",
		PathPattern:        "/storage_service/drain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceDrainGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceDrainGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceDrainGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceDrainPost drains

makes node unavailable for writes, flushes memtables and replays commitlog
*/
func (a *Client) StorageServiceDrainPost(params *StorageServiceDrainPostParams) (*StorageServiceDrainPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceDrainPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceDrainPost",
		Method:             "POST",
		PathPattern:        "/storage_service/drain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceDrainPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceDrainPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceDrainPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceForceRemoveCompletionPost forces remove completion

Force a remove operation to finish.
*/
func (a *Client) StorageServiceForceRemoveCompletionPost(params *StorageServiceForceRemoveCompletionPostParams) (*StorageServiceForceRemoveCompletionPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceForceRemoveCompletionPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceForceRemoveCompletionPost",
		Method:             "POST",
		PathPattern:        "/storage_service/force_remove_completion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceForceRemoveCompletionPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceForceRemoveCompletionPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceForceRemoveCompletionPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceForceTerminatePost forces terminate all repair sessions

Force terminate all repair sessions
*/
func (a *Client) StorageServiceForceTerminatePost(params *StorageServiceForceTerminatePostParams) (*StorageServiceForceTerminatePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceForceTerminatePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceForceTerminatePost",
		Method:             "POST",
		PathPattern:        "/storage_service/force_terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceForceTerminatePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceForceTerminatePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceForceTerminatePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceForceTerminateRepairPost forces terminate all repair sessions new

Force terminate all repair sessions
*/
func (a *Client) StorageServiceForceTerminateRepairPost(params *StorageServiceForceTerminateRepairPostParams) (*StorageServiceForceTerminateRepairPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceForceTerminateRepairPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceForceTerminateRepairPost",
		Method:             "POST",
		PathPattern:        "/storage_service/force_terminate_repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceForceTerminateRepairPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceForceTerminateRepairPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceForceTerminateRepairPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceGenerationNumberGet gets current generation number

Return the generation value for this node.
*/
func (a *Client) StorageServiceGenerationNumberGet(params *StorageServiceGenerationNumberGetParams) (*StorageServiceGenerationNumberGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceGenerationNumberGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceGenerationNumberGet",
		Method:             "GET",
		PathPattern:        "/storage_service/generation_number",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceGenerationNumberGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceGenerationNumberGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceGenerationNumberGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceGossipingDelete stops gossiping

allows a user to forcibly 'kill' a sick node
*/
func (a *Client) StorageServiceGossipingDelete(params *StorageServiceGossipingDeleteParams) (*StorageServiceGossipingDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceGossipingDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceGossipingDelete",
		Method:             "DELETE",
		PathPattern:        "/storage_service/gossiping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceGossipingDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceGossipingDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceGossipingDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceGossipingGet is gossip running

allows a user to see whether gossip is running or not
*/
func (a *Client) StorageServiceGossipingGet(params *StorageServiceGossipingGetParams) (*StorageServiceGossipingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceGossipingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceGossipingGet",
		Method:             "GET",
		PathPattern:        "/storage_service/gossiping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceGossipingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceGossipingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceGossipingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceGossipingPost starts gossiping

allows a user to recover a forcibly 'killed' node
*/
func (a *Client) StorageServiceGossipingPost(params *StorageServiceGossipingPostParams) (*StorageServiceGossipingPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceGossipingPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceGossipingPost",
		Method:             "POST",
		PathPattern:        "/storage_service/gossiping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceGossipingPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceGossipingPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceGossipingPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceHintedHandoffPost sets hinted handoff throttle in kb

Sets the hinted handoff throttle in kb per second, per delivery thread
*/
func (a *Client) StorageServiceHintedHandoffPost(params *StorageServiceHintedHandoffPostParams) (*StorageServiceHintedHandoffPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceHintedHandoffPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceHintedHandoffPost",
		Method:             "POST",
		PathPattern:        "/storage_service/hinted_handoff",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceHintedHandoffPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceHintedHandoffPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceHintedHandoffPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceHostIDGet gets host id map

Retrieve the mapping of endpoint to host ID
*/
func (a *Client) StorageServiceHostIDGet(params *StorageServiceHostIDGetParams) (*StorageServiceHostIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceHostIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceHostIdGet",
		Method:             "GET",
		PathPattern:        "/storage_service/host_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceHostIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceHostIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceHostIDGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceHostidLocalGet locals hostid

Returns the local host id
*/
func (a *Client) StorageServiceHostidLocalGet(params *StorageServiceHostidLocalGetParams) (*StorageServiceHostidLocalGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceHostidLocalGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceHostidLocalGet",
		Method:             "GET",
		PathPattern:        "/storage_service/hostid/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceHostidLocalGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceHostidLocalGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceHostidLocalGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceIncrementalBackupsGet is incremental backups enabled

Check if incremental backup is enabled
*/
func (a *Client) StorageServiceIncrementalBackupsGet(params *StorageServiceIncrementalBackupsGetParams) (*StorageServiceIncrementalBackupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceIncrementalBackupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceIncrementalBackupsGet",
		Method:             "GET",
		PathPattern:        "/storage_service/incremental_backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceIncrementalBackupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceIncrementalBackupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceIncrementalBackupsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceIncrementalBackupsPost sets incremental backups enabled
*/
func (a *Client) StorageServiceIncrementalBackupsPost(params *StorageServiceIncrementalBackupsPostParams) (*StorageServiceIncrementalBackupsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceIncrementalBackupsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceIncrementalBackupsPost",
		Method:             "POST",
		PathPattern:        "/storage_service/incremental_backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceIncrementalBackupsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceIncrementalBackupsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceIncrementalBackupsPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceIsInitializedGet is initialized

Determine if gossip is enable
*/
func (a *Client) StorageServiceIsInitializedGet(params *StorageServiceIsInitializedGetParams) (*StorageServiceIsInitializedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceIsInitializedGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceIsInitializedGet",
		Method:             "GET",
		PathPattern:        "/storage_service/is_initialized",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceIsInitializedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceIsInitializedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceIsInitializedGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceIsStartingGet is starting

Returns whether the storage service is starting or not
*/
func (a *Client) StorageServiceIsStartingGet(params *StorageServiceIsStartingGetParams) (*StorageServiceIsStartingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceIsStartingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceIsStartingGet",
		Method:             "GET",
		PathPattern:        "/storage_service/is_starting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceIsStartingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceIsStartingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceIsStartingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceJoinRingGet is joined
*/
func (a *Client) StorageServiceJoinRingGet(params *StorageServiceJoinRingGetParams) (*StorageServiceJoinRingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceJoinRingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceJoinRingGet",
		Method:             "GET",
		PathPattern:        "/storage_service/join_ring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceJoinRingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceJoinRingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceJoinRingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceJoinRingPost joins ring

Allows a node that have been started without joining the ring to join it
*/
func (a *Client) StorageServiceJoinRingPost(params *StorageServiceJoinRingPostParams) (*StorageServiceJoinRingPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceJoinRingPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceJoinRingPost",
		Method:             "POST",
		PathPattern:        "/storage_service/join_ring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceJoinRingPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceJoinRingPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceJoinRingPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceKeyspaceCleanupByKeyspacePost forces keyspace cleanup

Trigger a cleanup of keys on a single keyspace
*/
func (a *Client) StorageServiceKeyspaceCleanupByKeyspacePost(params *StorageServiceKeyspaceCleanupByKeyspacePostParams) (*StorageServiceKeyspaceCleanupByKeyspacePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceKeyspaceCleanupByKeyspacePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceKeyspaceCleanupByKeyspacePost",
		Method:             "POST",
		PathPattern:        "/storage_service/keyspace_cleanup/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceKeyspaceCleanupByKeyspacePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceKeyspaceCleanupByKeyspacePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceKeyspaceCleanupByKeyspacePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceKeyspaceCompactionByKeyspacePost forces keyspace compaction

Forces major compaction of a single keyspace
*/
func (a *Client) StorageServiceKeyspaceCompactionByKeyspacePost(params *StorageServiceKeyspaceCompactionByKeyspacePostParams) (*StorageServiceKeyspaceCompactionByKeyspacePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceKeyspaceCompactionByKeyspacePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceKeyspaceCompactionByKeyspacePost",
		Method:             "POST",
		PathPattern:        "/storage_service/keyspace_compaction/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceKeyspaceCompactionByKeyspacePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceKeyspaceCompactionByKeyspacePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceKeyspaceCompactionByKeyspacePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceKeyspaceFlushByKeyspacePost forces keyspace flush

Flush all memtables for the given column families, or all columnfamilies for the given keyspace if none are explicitly listed.
*/
func (a *Client) StorageServiceKeyspaceFlushByKeyspacePost(params *StorageServiceKeyspaceFlushByKeyspacePostParams) (*StorageServiceKeyspaceFlushByKeyspacePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceKeyspaceFlushByKeyspacePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceKeyspaceFlushByKeyspacePost",
		Method:             "POST",
		PathPattern:        "/storage_service/keyspace_flush/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceKeyspaceFlushByKeyspacePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceKeyspaceFlushByKeyspacePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceKeyspaceFlushByKeyspacePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceKeyspaceScrubByKeyspaceGet scrubs

Scrub (deserialize + reserialize at the latest version, skipping bad rows if any) the given keyspace. If columnFamilies array is empty, all CFs are scrubbed. Scrubbed CFs will be snapshotted first, if disableSnapshot is false
*/
func (a *Client) StorageServiceKeyspaceScrubByKeyspaceGet(params *StorageServiceKeyspaceScrubByKeyspaceGetParams) (*StorageServiceKeyspaceScrubByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceKeyspaceScrubByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceKeyspaceScrubByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/keyspace_scrub/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceKeyspaceScrubByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceKeyspaceScrubByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceKeyspaceScrubByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceKeyspaceUpgradeSstablesByKeyspaceGet upgrades sstables

Rewrite all sstables to the latest version. Unlike scrub, it doesn't skip bad rows and do not snapshot sstables first.
*/
func (a *Client) StorageServiceKeyspaceUpgradeSstablesByKeyspaceGet(params *StorageServiceKeyspaceUpgradeSstablesByKeyspaceGetParams) (*StorageServiceKeyspaceUpgradeSstablesByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceKeyspaceUpgradeSstablesByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceKeyspaceUpgradeSstablesByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/keyspace_upgrade_sstables/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceKeyspaceUpgradeSstablesByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceKeyspaceUpgradeSstablesByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceKeyspaceUpgradeSstablesByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceKeyspacesGet gets keyspaces

Get the keyspaces
*/
func (a *Client) StorageServiceKeyspacesGet(params *StorageServiceKeyspacesGetParams) (*StorageServiceKeyspacesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceKeyspacesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceKeyspacesGet",
		Method:             "GET",
		PathPattern:        "/storage_service/keyspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceKeyspacesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceKeyspacesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceKeyspacesGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceLoadGet gets load

get load value
*/
func (a *Client) StorageServiceLoadGet(params *StorageServiceLoadGetParams) (*StorageServiceLoadGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceLoadGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceLoadGet",
		Method:             "GET",
		PathPattern:        "/storage_service/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceLoadGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceLoadGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceLoadGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceLoadMapGet gets load map

load value. Keys are IP addresses
*/
func (a *Client) StorageServiceLoadMapGet(params *StorageServiceLoadMapGetParams) (*StorageServiceLoadMapGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceLoadMapGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceLoadMapGet",
		Method:             "GET",
		PathPattern:        "/storage_service/load_map",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceLoadMapGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceLoadMapGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceLoadMapGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceLoggingLevelGet gets logging levels

get the runtime logging levels
*/
func (a *Client) StorageServiceLoggingLevelGet(params *StorageServiceLoggingLevelGetParams) (*StorageServiceLoggingLevelGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceLoggingLevelGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceLoggingLevelGet",
		Method:             "GET",
		PathPattern:        "/storage_service/logging_level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceLoggingLevelGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceLoggingLevelGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceLoggingLevelGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceLoggingLevelPost sets logging level

set the logging level at runtime<br> <br> If both classQualifer and level are empty/null, it will reload the configuration to reset.<br> If classQualifer is not empty but level is empty/null, it will set the level to null for the defined classQualifer<br> If level cannot be parsed, then the level will be defaulted to DEBUG<br> <br> The logback configuration should have < jmxConfigurator /> set
*/
func (a *Client) StorageServiceLoggingLevelPost(params *StorageServiceLoggingLevelPostParams) (*StorageServiceLoggingLevelPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceLoggingLevelPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceLoggingLevelPost",
		Method:             "POST",
		PathPattern:        "/storage_service/logging_level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceLoggingLevelPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceLoggingLevelPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceLoggingLevelPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceMetricsExceptionsGet gets exceptions

Get exceptions
*/
func (a *Client) StorageServiceMetricsExceptionsGet(params *StorageServiceMetricsExceptionsGetParams) (*StorageServiceMetricsExceptionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceMetricsExceptionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceMetricsExceptionsGet",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/exceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceMetricsExceptionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceMetricsExceptionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceMetricsExceptionsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceMetricsHintsInProgressGet gets total hints in progress

Get total hints in progress
*/
func (a *Client) StorageServiceMetricsHintsInProgressGet(params *StorageServiceMetricsHintsInProgressGetParams) (*StorageServiceMetricsHintsInProgressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceMetricsHintsInProgressGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceMetricsHintsInProgressGet",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceMetricsHintsInProgressGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceMetricsHintsInProgressGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceMetricsHintsInProgressGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceMetricsLoadGet gets metrics load

Get load
*/
func (a *Client) StorageServiceMetricsLoadGet(params *StorageServiceMetricsLoadGetParams) (*StorageServiceMetricsLoadGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceMetricsLoadGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceMetricsLoadGet",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceMetricsLoadGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceMetricsLoadGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceMetricsLoadGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceMetricsTotalHintsGet gets total hints1

Get total hints
*/
func (a *Client) StorageServiceMetricsTotalHintsGet(params *StorageServiceMetricsTotalHintsGetParams) (*StorageServiceMetricsTotalHintsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceMetricsTotalHintsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceMetricsTotalHintsGet",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/total_hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceMetricsTotalHintsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceMetricsTotalHintsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceMetricsTotalHintsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceMovePost moves

This node will unload its data onto its neighbors, and bootstrap to the new token.
*/
func (a *Client) StorageServiceMovePost(params *StorageServiceMovePostParams) (*StorageServiceMovePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceMovePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceMovePost",
		Method:             "POST",
		PathPattern:        "/storage_service/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceMovePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceMovePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceMovePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceNativeTransportDelete stops native transport

Stop native transport
*/
func (a *Client) StorageServiceNativeTransportDelete(params *StorageServiceNativeTransportDeleteParams) (*StorageServiceNativeTransportDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceNativeTransportDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceNativeTransportDelete",
		Method:             "DELETE",
		PathPattern:        "/storage_service/native_transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceNativeTransportDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceNativeTransportDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceNativeTransportDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceNativeTransportGet is native transport running

Is native transport running
*/
func (a *Client) StorageServiceNativeTransportGet(params *StorageServiceNativeTransportGetParams) (*StorageServiceNativeTransportGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceNativeTransportGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceNativeTransportGet",
		Method:             "GET",
		PathPattern:        "/storage_service/native_transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceNativeTransportGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceNativeTransportGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceNativeTransportGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceNativeTransportPost starts native transport

Start native transport
*/
func (a *Client) StorageServiceNativeTransportPost(params *StorageServiceNativeTransportPostParams) (*StorageServiceNativeTransportPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceNativeTransportPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceNativeTransportPost",
		Method:             "POST",
		PathPattern:        "/storage_service/native_transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceNativeTransportPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceNativeTransportPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceNativeTransportPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceNaturalEndpointsByKeyspaceGet gets natural endpoints

This method returns the N endpoints that are responsible for storing the specified key i.e for replication. the endpoint responsible for this key
*/
func (a *Client) StorageServiceNaturalEndpointsByKeyspaceGet(params *StorageServiceNaturalEndpointsByKeyspaceGetParams) (*StorageServiceNaturalEndpointsByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceNaturalEndpointsByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceNaturalEndpointsByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/natural_endpoints/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceNaturalEndpointsByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceNaturalEndpointsByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceNaturalEndpointsByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceNodesJoiningGet gets joining nodes

Retrieve the list of nodes currently bootstrapping into the ring
*/
func (a *Client) StorageServiceNodesJoiningGet(params *StorageServiceNodesJoiningGetParams) (*StorageServiceNodesJoiningGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceNodesJoiningGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceNodesJoiningGet",
		Method:             "GET",
		PathPattern:        "/storage_service/nodes/joining",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceNodesJoiningGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceNodesJoiningGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceNodesJoiningGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceNodesLeavingGet gets leaving nodes

Retrieve the list of nodes currently leaving the ring
*/
func (a *Client) StorageServiceNodesLeavingGet(params *StorageServiceNodesLeavingGetParams) (*StorageServiceNodesLeavingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceNodesLeavingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceNodesLeavingGet",
		Method:             "GET",
		PathPattern:        "/storage_service/nodes/leaving",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceNodesLeavingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceNodesLeavingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceNodesLeavingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceNodesMovingGet gets moving nodes

Retrieve the list of nodes currently moving in the ring
*/
func (a *Client) StorageServiceNodesMovingGet(params *StorageServiceNodesMovingGetParams) (*StorageServiceNodesMovingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceNodesMovingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceNodesMovingGet",
		Method:             "GET",
		PathPattern:        "/storage_service/nodes/moving",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceNodesMovingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceNodesMovingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceNodesMovingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceOperationModeGet gets operation mode

Get the operational mode (leaving, joining, normal, decommissioned, client)
*/
func (a *Client) StorageServiceOperationModeGet(params *StorageServiceOperationModeGetParams) (*StorageServiceOperationModeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceOperationModeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceOperationModeGet",
		Method:             "GET",
		PathPattern:        "/storage_service/operation_mode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceOperationModeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceOperationModeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceOperationModeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceOwnershipByKeyspaceGet gets effective ownership

Effective ownership is % of the data each node owns given the keyspace
*/
func (a *Client) StorageServiceOwnershipByKeyspaceGet(params *StorageServiceOwnershipByKeyspaceGetParams) (*StorageServiceOwnershipByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceOwnershipByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceOwnershipByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/ownership/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceOwnershipByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceOwnershipByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceOwnershipByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceOwnershipGet gets ownership

The mapping from token -> % of cluster owned by that token
*/
func (a *Client) StorageServiceOwnershipGet(params *StorageServiceOwnershipGetParams) (*StorageServiceOwnershipGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceOwnershipGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceOwnershipGet",
		Method:             "GET",
		PathPattern:        "/storage_service/ownership/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceOwnershipGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceOwnershipGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceOwnershipGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServicePartitionerNameGet gets partitioner name

Returns the cluster partitioner
*/
func (a *Client) StorageServicePartitionerNameGet(params *StorageServicePartitionerNameGetParams) (*StorageServicePartitionerNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServicePartitionerNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServicePartitionerNameGet",
		Method:             "GET",
		PathPattern:        "/storage_service/partitioner_name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServicePartitionerNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServicePartitionerNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServicePartitionerNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServicePendingRangeByKeyspaceGet gets pending range to endpoint map

Retrieve a map of pending ranges to endpoints that describe the ring topology
*/
func (a *Client) StorageServicePendingRangeByKeyspaceGet(params *StorageServicePendingRangeByKeyspaceGetParams) (*StorageServicePendingRangeByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServicePendingRangeByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServicePendingRangeByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/pending_range/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServicePendingRangeByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServicePendingRangeByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServicePendingRangeByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRangeToEndpointMapByKeyspaceGet gets range to endpoint map

Retrieve a map of range to end points that describe the ring topology of a Cassandra cluster.
*/
func (a *Client) StorageServiceRangeToEndpointMapByKeyspaceGet(params *StorageServiceRangeToEndpointMapByKeyspaceGetParams) (*StorageServiceRangeToEndpointMapByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRangeToEndpointMapByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRangeToEndpointMapByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/range_to_endpoint_map/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRangeToEndpointMapByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRangeToEndpointMapByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRangeToEndpointMapByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRebuildPost rebuilds

Initiate a process of streaming data for which we are responsible from other nodes. It is similar to bootstrap except meant to be used on a node which is already in the cluster (typically containing no data) as an alternative to running repair.
*/
func (a *Client) StorageServiceRebuildPost(params *StorageServiceRebuildPostParams) (*StorageServiceRebuildPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRebuildPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRebuildPost",
		Method:             "POST",
		PathPattern:        "/storage_service/rebuild",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRebuildPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRebuildPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRebuildPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceReleaseVersionGet gets release version

Fetch a string representation of the Cassandra version.
*/
func (a *Client) StorageServiceReleaseVersionGet(params *StorageServiceReleaseVersionGetParams) (*StorageServiceReleaseVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceReleaseVersionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceReleaseVersionGet",
		Method:             "GET",
		PathPattern:        "/storage_service/release_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceReleaseVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceReleaseVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceReleaseVersionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRelocalSchemaPost resets local schema

Reset local schema
*/
func (a *Client) StorageServiceRelocalSchemaPost(params *StorageServiceRelocalSchemaPostParams) (*StorageServiceRelocalSchemaPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRelocalSchemaPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRelocalSchemaPost",
		Method:             "POST",
		PathPattern:        "/storage_service/relocal_schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRelocalSchemaPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRelocalSchemaPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRelocalSchemaPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRemovalStatusGet gets removal status

Get the status of a token removal.
*/
func (a *Client) StorageServiceRemovalStatusGet(params *StorageServiceRemovalStatusGetParams) (*StorageServiceRemovalStatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRemovalStatusGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRemovalStatusGet",
		Method:             "GET",
		PathPattern:        "/storage_service/removal_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRemovalStatusGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRemovalStatusGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRemovalStatusGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRemoveNodePost removes node

Removes token (and all data associated with enpoint that had it) from the ring
*/
func (a *Client) StorageServiceRemoveNodePost(params *StorageServiceRemoveNodePostParams) (*StorageServiceRemoveNodePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRemoveNodePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRemoveNodePost",
		Method:             "POST",
		PathPattern:        "/storage_service/remove_node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRemoveNodePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRemoveNodePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRemoveNodePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRepairAsyncByKeyspaceGet repairs async status

Track already running repair progress
*/
func (a *Client) StorageServiceRepairAsyncByKeyspaceGet(params *StorageServiceRepairAsyncByKeyspaceGetParams) (*StorageServiceRepairAsyncByKeyspaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRepairAsyncByKeyspaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRepairAsyncByKeyspaceGet",
		Method:             "GET",
		PathPattern:        "/storage_service/repair_async/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRepairAsyncByKeyspaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRepairAsyncByKeyspaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRepairAsyncByKeyspaceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRepairAsyncByKeyspacePost repairs async

Invoke repair asynchronously. You can track repair progress by using the get supplying id
*/
func (a *Client) StorageServiceRepairAsyncByKeyspacePost(params *StorageServiceRepairAsyncByKeyspacePostParams) (*StorageServiceRepairAsyncByKeyspacePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRepairAsyncByKeyspacePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRepairAsyncByKeyspacePost",
		Method:             "POST",
		PathPattern:        "/storage_service/repair_async/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRepairAsyncByKeyspacePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRepairAsyncByKeyspacePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRepairAsyncByKeyspacePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRepairStatus storages service repair status

Query the repair status and return when the repair is finished or timeout
*/
func (a *Client) StorageServiceRepairStatus(params *StorageServiceRepairStatusParams) (*StorageServiceRepairStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRepairStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRepairStatus",
		Method:             "GET",
		PathPattern:        "/storage_service/repair_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRepairStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRepairStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRepairStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRescheduleFailedDeletionsPost reschedules failed deletions

Reschedule failed deletions
*/
func (a *Client) StorageServiceRescheduleFailedDeletionsPost(params *StorageServiceRescheduleFailedDeletionsPostParams) (*StorageServiceRescheduleFailedDeletionsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRescheduleFailedDeletionsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRescheduleFailedDeletionsPost",
		Method:             "POST",
		PathPattern:        "/storage_service/reschedule_failed_deletions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRescheduleFailedDeletionsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRescheduleFailedDeletionsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRescheduleFailedDeletionsPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRPCServerDelete stops rpc server

Allows a user to disable thrift
*/
func (a *Client) StorageServiceRPCServerDelete(params *StorageServiceRPCServerDeleteParams) (*StorageServiceRPCServerDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRPCServerDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRpcServerDelete",
		Method:             "DELETE",
		PathPattern:        "/storage_service/rpc_server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRPCServerDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRPCServerDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRPCServerDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRPCServerGet is rpc server running

Determine if thrift is running
*/
func (a *Client) StorageServiceRPCServerGet(params *StorageServiceRPCServerGetParams) (*StorageServiceRPCServerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRPCServerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRpcServerGet",
		Method:             "GET",
		PathPattern:        "/storage_service/rpc_server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRPCServerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRPCServerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRPCServerGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceRPCServerPost starts rpc server

allows a user to reenable thrift
*/
func (a *Client) StorageServiceRPCServerPost(params *StorageServiceRPCServerPostParams) (*StorageServiceRPCServerPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceRPCServerPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceRpcServerPost",
		Method:             "POST",
		PathPattern:        "/storage_service/rpc_server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceRPCServerPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceRPCServerPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceRPCServerPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSampleKeyRangeGet samples key range

Return a List of Tokens representing a sample of keys across all ColumnFamilyStores.
*/
func (a *Client) StorageServiceSampleKeyRangeGet(params *StorageServiceSampleKeyRangeGetParams) (*StorageServiceSampleKeyRangeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSampleKeyRangeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSampleKeyRangeGet",
		Method:             "GET",
		PathPattern:        "/storage_service/sample_key_range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSampleKeyRangeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSampleKeyRangeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSampleKeyRangeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSavedCachesLocationGet gets saved caches location

Get location of the saved caches dir
*/
func (a *Client) StorageServiceSavedCachesLocationGet(params *StorageServiceSavedCachesLocationGetParams) (*StorageServiceSavedCachesLocationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSavedCachesLocationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSavedCachesLocationGet",
		Method:             "GET",
		PathPattern:        "/storage_service/saved_caches/location",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSavedCachesLocationGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSavedCachesLocationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSavedCachesLocationGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSchemaVersionGet gets schema version

Fetch a string representation of the current Schema version.
*/
func (a *Client) StorageServiceSchemaVersionGet(params *StorageServiceSchemaVersionGetParams) (*StorageServiceSchemaVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSchemaVersionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSchemaVersionGet",
		Method:             "GET",
		PathPattern:        "/storage_service/schema_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSchemaVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSchemaVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSchemaVersionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceScyllaReleaseVersionGet gets scylla release version

Fetch a string representation of the Scylla version.
*/
func (a *Client) StorageServiceScyllaReleaseVersionGet(params *StorageServiceScyllaReleaseVersionGetParams) (*StorageServiceScyllaReleaseVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceScyllaReleaseVersionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceScyllaReleaseVersionGet",
		Method:             "GET",
		PathPattern:        "/storage_service/scylla_release_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceScyllaReleaseVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceScyllaReleaseVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceScyllaReleaseVersionGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSlowQueryGet gets slow query info

Returns the slow query record configuration.
*/
func (a *Client) StorageServiceSlowQueryGet(params *StorageServiceSlowQueryGetParams) (*StorageServiceSlowQueryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSlowQueryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSlowQueryGet",
		Method:             "GET",
		PathPattern:        "/storage_service/slow_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSlowQueryGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSlowQueryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSlowQueryGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSlowQueryPost sets slow query

Set slow query parameter
*/
func (a *Client) StorageServiceSlowQueryPost(params *StorageServiceSlowQueryPostParams) (*StorageServiceSlowQueryPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSlowQueryPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSlowQueryPost",
		Method:             "POST",
		PathPattern:        "/storage_service/slow_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSlowQueryPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSlowQueryPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSlowQueryPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSnapshotsDelete dels snapshot

Remove the snapshot with the given name from the given keyspaces. If no tag is specified all snapshots will be removed
*/
func (a *Client) StorageServiceSnapshotsDelete(params *StorageServiceSnapshotsDeleteParams) (*StorageServiceSnapshotsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSnapshotsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSnapshotsDelete",
		Method:             "DELETE",
		PathPattern:        "/storage_service/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSnapshotsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSnapshotsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSnapshotsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSnapshotsGet gets snapshot details

Get the details of all the snapshot
*/
func (a *Client) StorageServiceSnapshotsGet(params *StorageServiceSnapshotsGetParams) (*StorageServiceSnapshotsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSnapshotsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSnapshotsGet",
		Method:             "GET",
		PathPattern:        "/storage_service/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSnapshotsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSnapshotsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSnapshotsGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSnapshotsPost takes snapshot

Takes the snapshot for the given keyspaces. A snapshot name must be specified.
*/
func (a *Client) StorageServiceSnapshotsPost(params *StorageServiceSnapshotsPostParams) (*StorageServiceSnapshotsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSnapshotsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSnapshotsPost",
		Method:             "POST",
		PathPattern:        "/storage_service/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSnapshotsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSnapshotsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSnapshotsPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSnapshotsSizeTrueGet trues snapshots size

Get the true size taken by all snapshots across all keyspaces.
*/
func (a *Client) StorageServiceSnapshotsSizeTrueGet(params *StorageServiceSnapshotsSizeTrueGetParams) (*StorageServiceSnapshotsSizeTrueGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSnapshotsSizeTrueGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSnapshotsSizeTrueGet",
		Method:             "GET",
		PathPattern:        "/storage_service/snapshots/size/true",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSnapshotsSizeTrueGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSnapshotsSizeTrueGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSnapshotsSizeTrueGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceSstablesByKeyspacePost loads new ss tables

Load new SSTables to the given keyspace/columnFamily
*/
func (a *Client) StorageServiceSstablesByKeyspacePost(params *StorageServiceSstablesByKeyspacePostParams) (*StorageServiceSstablesByKeyspacePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceSstablesByKeyspacePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceSstablesByKeyspacePost",
		Method:             "POST",
		PathPattern:        "/storage_service/sstables/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceSstablesByKeyspacePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceSstablesByKeyspacePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceSstablesByKeyspacePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceStopDaemonPost stops daemon

allows a user to forcibly completely stop cassandra
*/
func (a *Client) StorageServiceStopDaemonPost(params *StorageServiceStopDaemonPostParams) (*StorageServiceStopDaemonPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceStopDaemonPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceStopDaemonPost",
		Method:             "POST",
		PathPattern:        "/storage_service/stop_daemon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceStopDaemonPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceStopDaemonPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceStopDaemonPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceStreamThroughputGet gets stream throughput mb per sec

Get stream throughput mb per sec
*/
func (a *Client) StorageServiceStreamThroughputGet(params *StorageServiceStreamThroughputGetParams) (*StorageServiceStreamThroughputGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceStreamThroughputGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceStreamThroughputGet",
		Method:             "GET",
		PathPattern:        "/storage_service/stream_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceStreamThroughputGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceStreamThroughputGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceStreamThroughputGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceStreamThroughputPost sets stream throughput mb per sec

set stream throughput mb per sec
*/
func (a *Client) StorageServiceStreamThroughputPost(params *StorageServiceStreamThroughputPostParams) (*StorageServiceStreamThroughputPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceStreamThroughputPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceStreamThroughputPost",
		Method:             "POST",
		PathPattern:        "/storage_service/stream_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceStreamThroughputPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceStreamThroughputPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceStreamThroughputPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTabletsBalancingPost tablets balancing enable

Controls tablet load-balancing
*/
func (a *Client) StorageServiceTabletsBalancingPost(params *StorageServiceTabletsBalancingPostParams) (*StorageServiceTabletsBalancingPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTabletsBalancingPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTabletsBalancingPost",
		Method:             "POST",
		PathPattern:        "/storage_service/tablets/balancing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTabletsBalancingPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTabletsBalancingPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTabletsBalancingPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTokensByEndpointGet gets node tokens

Returns a list of the tokens for or a specified node
*/
func (a *Client) StorageServiceTokensByEndpointGet(params *StorageServiceTokensByEndpointGetParams) (*StorageServiceTokensByEndpointGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTokensByEndpointGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTokensByEndpointGet",
		Method:             "GET",
		PathPattern:        "/storage_service/tokens/{endpoint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTokensByEndpointGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTokensByEndpointGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTokensByEndpointGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTokensEndpointGet gets token endpoint

Returns a list of the tokens endpoint mapping
*/
func (a *Client) StorageServiceTokensEndpointGet(params *StorageServiceTokensEndpointGetParams) (*StorageServiceTokensEndpointGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTokensEndpointGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTokensEndpointGet",
		Method:             "GET",
		PathPattern:        "/storage_service/tokens_endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTokensEndpointGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTokensEndpointGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTokensEndpointGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTokensGet gets tokens

Returns a list of the tokens for this node
*/
func (a *Client) StorageServiceTokensGet(params *StorageServiceTokensGetParams) (*StorageServiceTokensGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTokensGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTokensGet",
		Method:             "GET",
		PathPattern:        "/storage_service/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTokensGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTokensGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTokensGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTombstoneFailureThresholdGet gets tombstone failure threshold
*/
func (a *Client) StorageServiceTombstoneFailureThresholdGet(params *StorageServiceTombstoneFailureThresholdGetParams) (*StorageServiceTombstoneFailureThresholdGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTombstoneFailureThresholdGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTombstoneFailureThresholdGet",
		Method:             "GET",
		PathPattern:        "/storage_service/tombstone_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTombstoneFailureThresholdGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTombstoneFailureThresholdGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTombstoneFailureThresholdGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTombstoneFailureThresholdPost sets tombstone failure threshold
*/
func (a *Client) StorageServiceTombstoneFailureThresholdPost(params *StorageServiceTombstoneFailureThresholdPostParams) (*StorageServiceTombstoneFailureThresholdPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTombstoneFailureThresholdPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTombstoneFailureThresholdPost",
		Method:             "POST",
		PathPattern:        "/storage_service/tombstone_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTombstoneFailureThresholdPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTombstoneFailureThresholdPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTombstoneFailureThresholdPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTombstoneWarnThresholdGet gets tombstone warn threshold

Returns the threshold for warning of queries with many tombstones
*/
func (a *Client) StorageServiceTombstoneWarnThresholdGet(params *StorageServiceTombstoneWarnThresholdGetParams) (*StorageServiceTombstoneWarnThresholdGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTombstoneWarnThresholdGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTombstoneWarnThresholdGet",
		Method:             "GET",
		PathPattern:        "/storage_service/tombstone_warn_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTombstoneWarnThresholdGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTombstoneWarnThresholdGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTombstoneWarnThresholdGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTombstoneWarnThresholdPost sets tombstone warn threshold

Sets the threshold for warning queries with many tombstones
*/
func (a *Client) StorageServiceTombstoneWarnThresholdPost(params *StorageServiceTombstoneWarnThresholdPostParams) (*StorageServiceTombstoneWarnThresholdPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTombstoneWarnThresholdPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTombstoneWarnThresholdPost",
		Method:             "POST",
		PathPattern:        "/storage_service/tombstone_warn_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTombstoneWarnThresholdPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTombstoneWarnThresholdPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTombstoneWarnThresholdPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTraceProbabilityGet gets trace probability

Returns the configured tracing probability.
*/
func (a *Client) StorageServiceTraceProbabilityGet(params *StorageServiceTraceProbabilityGetParams) (*StorageServiceTraceProbabilityGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTraceProbabilityGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTraceProbabilityGet",
		Method:             "GET",
		PathPattern:        "/storage_service/trace_probability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTraceProbabilityGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTraceProbabilityGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTraceProbabilityGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTraceProbabilityPost sets trace probability

Enables/Disables tracing for the whole system. Only thrift requests can start tracing currently
*/
func (a *Client) StorageServiceTraceProbabilityPost(params *StorageServiceTraceProbabilityPostParams) (*StorageServiceTraceProbabilityPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTraceProbabilityPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTraceProbabilityPost",
		Method:             "POST",
		PathPattern:        "/storage_service/trace_probability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTraceProbabilityPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTraceProbabilityPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTraceProbabilityPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceTruncateByKeyspacePost truncates

Truncates (deletes) the given columnFamily from the provided keyspace. Calling truncate results in actual deletion of all data in the cluster under the given columnFamily and it will fail unless all hosts are up. All data in the given column family will be deleted, but its definition will not be affected.
*/
func (a *Client) StorageServiceTruncateByKeyspacePost(params *StorageServiceTruncateByKeyspacePostParams) (*StorageServiceTruncateByKeyspacePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceTruncateByKeyspacePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceTruncateByKeyspacePost",
		Method:             "POST",
		PathPattern:        "/storage_service/truncate/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceTruncateByKeyspacePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceTruncateByKeyspacePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceTruncateByKeyspacePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceUpdateSnitchPost updates snitch

Change endpointsnitch class and dynamic-ness (and dynamic attributes) at runtime
*/
func (a *Client) StorageServiceUpdateSnitchPost(params *StorageServiceUpdateSnitchPostParams) (*StorageServiceUpdateSnitchPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceUpdateSnitchPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceUpdateSnitchPost",
		Method:             "POST",
		PathPattern:        "/storage_service/update_snitch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceUpdateSnitchPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceUpdateSnitchPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceUpdateSnitchPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StorageServiceViewBuildStatusesByKeyspaceAndViewGet views build statuses

Gets the progress of a materialized view build
*/
func (a *Client) StorageServiceViewBuildStatusesByKeyspaceAndViewGet(params *StorageServiceViewBuildStatusesByKeyspaceAndViewGetParams) (*StorageServiceViewBuildStatusesByKeyspaceAndViewGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageServiceViewBuildStatusesByKeyspaceAndViewGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageServiceViewBuildStatusesByKeyspaceAndViewGet",
		Method:             "GET",
		PathPattern:        "/storage_service/view_build_statuses/{keyspace}/{view}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageServiceViewBuildStatusesByKeyspaceAndViewGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageServiceViewBuildStatusesByKeyspaceAndViewGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StorageServiceViewBuildStatusesByKeyspaceAndViewGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StreamManagerGet gets current streams

Returns the current state of all ongoing streams.
*/
func (a *Client) StreamManagerGet(params *StreamManagerGetParams) (*StreamManagerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamManagerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamManagerGet",
		Method:             "GET",
		PathPattern:        "/stream_manager/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamManagerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamManagerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StreamManagerGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StreamManagerMetricsIncomingByPeerGet gets total incoming bytes

Get total incoming bytes
*/
func (a *Client) StreamManagerMetricsIncomingByPeerGet(params *StreamManagerMetricsIncomingByPeerGetParams) (*StreamManagerMetricsIncomingByPeerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamManagerMetricsIncomingByPeerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamManagerMetricsIncomingByPeerGet",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/incoming/{peer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamManagerMetricsIncomingByPeerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamManagerMetricsIncomingByPeerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StreamManagerMetricsIncomingByPeerGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StreamManagerMetricsIncomingGet gets all total incoming bytes

Get all total incoming bytes
*/
func (a *Client) StreamManagerMetricsIncomingGet(params *StreamManagerMetricsIncomingGetParams) (*StreamManagerMetricsIncomingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamManagerMetricsIncomingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamManagerMetricsIncomingGet",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/incoming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamManagerMetricsIncomingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamManagerMetricsIncomingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StreamManagerMetricsIncomingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StreamManagerMetricsOutboundGet gets all active streams outbound

Get number of active outbound streams
*/
func (a *Client) StreamManagerMetricsOutboundGet(params *StreamManagerMetricsOutboundGetParams) (*StreamManagerMetricsOutboundGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamManagerMetricsOutboundGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamManagerMetricsOutboundGet",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/outbound",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamManagerMetricsOutboundGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamManagerMetricsOutboundGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StreamManagerMetricsOutboundGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StreamManagerMetricsOutgoingByPeerGet gets total outgoing bytes

Get total outgoing bytes
*/
func (a *Client) StreamManagerMetricsOutgoingByPeerGet(params *StreamManagerMetricsOutgoingByPeerGetParams) (*StreamManagerMetricsOutgoingByPeerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamManagerMetricsOutgoingByPeerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamManagerMetricsOutgoingByPeerGet",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/outgoing/{peer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamManagerMetricsOutgoingByPeerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamManagerMetricsOutgoingByPeerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StreamManagerMetricsOutgoingByPeerGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StreamManagerMetricsOutgoingGet gets all total outgoing bytes

Get all total outgoing bytes
*/
func (a *Client) StreamManagerMetricsOutgoingGet(params *StreamManagerMetricsOutgoingGetParams) (*StreamManagerMetricsOutgoingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamManagerMetricsOutgoingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamManagerMetricsOutgoingGet",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/outgoing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamManagerMetricsOutgoingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamManagerMetricsOutgoingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StreamManagerMetricsOutgoingGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SystemLoggerByNameGet gets logger level

Get logger level
*/
func (a *Client) SystemLoggerByNameGet(params *SystemLoggerByNameGetParams) (*SystemLoggerByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemLoggerByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemLoggerByNameGet",
		Method:             "GET",
		PathPattern:        "/system/logger/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemLoggerByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemLoggerByNameGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SystemLoggerByNameGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SystemLoggerByNamePost sets logger level

Set logger level
*/
func (a *Client) SystemLoggerByNamePost(params *SystemLoggerByNamePostParams) (*SystemLoggerByNamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemLoggerByNamePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemLoggerByNamePost",
		Method:             "POST",
		PathPattern:        "/system/logger/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemLoggerByNamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemLoggerByNamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SystemLoggerByNamePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SystemLoggerGet gets all logger names

Get all logger names
*/
func (a *Client) SystemLoggerGet(params *SystemLoggerGetParams) (*SystemLoggerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemLoggerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemLoggerGet",
		Method:             "GET",
		PathPattern:        "/system/logger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemLoggerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemLoggerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SystemLoggerGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SystemLoggerPost sets all logger level

Set all logger level
*/
func (a *Client) SystemLoggerPost(params *SystemLoggerPostParams) (*SystemLoggerPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemLoggerPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemLoggerPost",
		Method:             "POST",
		PathPattern:        "/system/logger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemLoggerPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemLoggerPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SystemLoggerPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
