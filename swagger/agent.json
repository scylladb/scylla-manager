{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "Scylla Manager Agent API",
    "contact": {}
  },
  "host": "scylla-manager.magic.host",
  "basePath": "/agent",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/rclone/core/bwlimit": {
      "post": {
        "description": "This sets the bandwidth limit to that passed in",
        "summary": "Set the bandwidth limit",
        "operationId": "CoreBwlimit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "bandwidth_rate",
            "description": "bandwidth rate",
            "schema": {
              "$ref": "#/definitions/Bandwidth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "bandwidth rate",
            "schema": {
              "$ref": "#/definitions/Bandwidth"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/core/stats-reset": {
      "post": {
        "description": "Resets stats",
        "summary": "Resets all or specific stats group",
        "operationId": "CoreStatsReset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "StatsParams",
            "description": "Stats parameters",
            "schema": {
              "$ref": "#/definitions/StatsParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/core/stats-delete": {
      "post": {
        "description": "Delete stats",
        "summary": "Deletes specific stats group",
        "operationId": "CoreStatsDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "StatsParams",
            "description": "Stats parameters",
            "schema": {
              "$ref": "#/definitions/StatsParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/about": {
      "post": {
        "description": "Get usage information from the remote",
        "summary": "About remote",
        "operationId": "OperationsAbout",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "RemotePath",
            "description": "Remote path",
            "schema": {
              "$ref": "#/definitions/RemotePath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File system details",
            "schema": {
              "$ref": "#/definitions/FileSystemDetails"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/fileinfo": {
      "post": {
        "description": "Get basic file information",
        "summary": "Object info",
        "operationId": "OperationsFileInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "RemotePath",
            "description": "Remote path",
            "schema": {
              "$ref": "#/definitions/RemotePath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "schema": {
              "$ref": "#/definitions/FileInfo"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/list": {
      "post": {
        "description": "List the given remote and path",
        "summary": "List remote",
        "operationId": "OperationsList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "listOpts",
            "description": "listOpts",
            "schema": {
              "$ref": "#/definitions/ListOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of items",
            "schema": {
              "type": "object",
              "properties": {
                "list": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ListItem"
                  }
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/movefile": {
      "post": {
        "description": "Move a file from source remote to destination remote",
        "summary": "Move a file",
        "operationId": "OperationsMovefile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "_group",
            "description": "Place this operation under this stat group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "Options",
            "description": "Options",
            "schema": {
              "$ref": "#/definitions/MoveOrCopyFileOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object",
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/copyfile": {
      "post": {
        "description": "Copy a file from source remote to destination remote",
        "summary": "Copy a file",
        "operationId": "OperationsCopyfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "_group",
            "description": "Place this operation under this stat group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "Options",
            "description": "Options",
            "schema": {
              "$ref": "#/definitions/MoveOrCopyFileOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object",
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/sync/copydir": {
      "post": {
        "description": "Copy contents from path on source fs to path on destination fs",
        "summary": "Copy dir contents to directory",
        "operationId": "SyncCopyDir",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "_async",
            "description": "Async request",
            "type": "boolean",
            "required": true,
            "default": true
          },
          {
            "in": "query",
            "name": "_group",
            "description": "Place this operation under this stat group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "Options",
            "description": "Options",
            "schema": {
              "$ref": "#/definitions/MoveOrCopyFileOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job ID",
            "schema": {
              "$ref": "#/definitions/Jobid"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/sync/movedir": {
      "post": {
        "description": "Move contents from path on source fs to path on destination fs",
        "summary": "Move dir contents to directory",
        "operationId": "SyncMoveDir",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "_async",
            "description": "Async request",
            "type": "boolean",
            "required": true,
            "default": true
          },
          {
            "in": "query",
            "name": "_group",
            "description": "Place this operation under this stat group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "Options",
            "description": "Options",
            "schema": {
              "$ref": "#/definitions/MoveOrCopyFileOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job ID",
            "schema": {
              "$ref": "#/definitions/Jobid"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/sync/copypaths": {
      "post": {
        "description": "Copy provided list of paths from directory on source fs to directory on destination fs",
        "summary": "Copy paths from fsrc/remoteSrc/paths to fdst/remoteDst/paths",
        "operationId": "SyncCopyPaths",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "_async",
            "description": "Async request",
            "type": "boolean",
            "required": true,
            "default": true
          },
          {
            "in": "query",
            "name": "_group",
            "description": "Place this operation under this stat group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "Options",
            "description": "Options",
            "schema": {
              "$ref": "#/definitions/CopyPathsOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job ID",
            "schema": {
              "$ref": "#/definitions/Jobid"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/purge": {
      "post": {
        "description": "Remove a directory or container and all of its contents",
        "summary": "Purge container",
        "operationId": "OperationsPurge",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "_async",
            "description": "Async request",
            "type": "boolean",
            "required": true,
            "default": true
          },
          {
            "in": "query",
            "name": "_group",
            "description": "Place this operation under this stat group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "RemotePath",
            "description": "Remote path",
            "schema": {
              "$ref": "#/definitions/RemotePath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job ID",
            "schema": {
              "$ref": "#/definitions/Jobid"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/deletepaths": {
      "post": {
        "description": "Delete provided list of paths",
        "summary": "Delete paths",
        "operationId": "OperationsDeletepaths",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Options",
            "description": "Options",
            "schema": {
              "$ref": "#/definitions/DeletePathsOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted files count",
            "schema": {
              "properties": {
                "deletes": {
                  "type": "integer"
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/deletefile": {
      "post": {
        "description": "Remove the single file pointed to",
        "summary": "Delete file",
        "operationId": "OperationsDeletefile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "_async",
            "description": "Async request",
            "type": "boolean",
            "required": true,
            "default": true
          },
          {
            "in": "query",
            "name": "_group",
            "description": "Place this operation under this stat group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "RemotePath",
            "description": "Remote path",
            "schema": {
              "$ref": "#/definitions/RemotePath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job ID",
            "schema": {
              "$ref": "#/definitions/Jobid"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/operations/check-permissions": {
      "post": {
        "description": "Check if the fs is fully accessible",
        "summary": "Check fs",
        "operationId": "OperationsCheckPermissions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "RemotePath",
            "description": "Remote path",
            "schema": {
              "$ref": "#/definitions/RemotePath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/job/stop": {
      "post": {
        "description": "Stops job with provided ID",
        "summary": "Stop async job",
        "operationId": "JobStop",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "jobid",
            "required": true,
            "description": "jobid",
            "schema": {
              "$ref": "#/definitions/Jobid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/job/info": {
      "post": {
        "description": "Returns current, completed transfers and job stats",
        "summary": "Transfer stats about the job",
        "operationId": "JobInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "jobinfo",
            "description": "Job info params with id and long polling",
            "schema": {
              "$ref": "#/definitions/JobInfoParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated info about job transfers",
            "schema": {
              "$ref": "#/definitions/JobInfo"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/rclone/job/progress": {
      "post": {
        "description": "Returns aggregated job stats",
        "summary": "Returns aggregated job stats",
        "operationId": "JobProgress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "jobinfo",
            "description": "Job info params with id and long polling",
            "schema": {
              "$ref": "#/definitions/JobInfoParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated info about job transfers",
            "schema": {
              "$ref": "#/definitions/JobProgress"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/node_info": {
      "get": {
        "description": "Get information about Scylla node",
        "summary": "Get information about Scylla node",
        "operationId": "NodeInfo",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "node information",
            "schema": {
              "$ref": "#/definitions/NodeInfo"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/terminate": {
      "post": {
        "description": "Reload agent config",
        "summary": "Reload agent config",
        "operationId": "Reload",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Empty object",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/free_os_memory": {
      "post": {
        "description": "Run debug.FreeOSMemory on the agent",
        "summary": "Return memory to OS",
        "operationId": "FreeOSMemory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Empty object",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "default": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {}
          }
        },
        "security": []
      }
    }
  },
  "definitions": {
    "Bandwidth": {
      "title": "bandwidth rate",
      "description": "Rate at witch to rate limit bandwidth",
      "type": "object",
      "properties": {
        "rate": {
          "description": "String representation of the bandwidth rate limit (eg. 100k, 1M, ...).",
          "type": "string"
        }
      }
    },
    "Jobid": {
      "type": "object",
      "properties": {
        "jobid": {
          "description": "ID of the job",
          "type": "integer"
        }
      }
    },
    "JobInfoParams": {
      "type": "object",
      "properties": {
        "jobid": {
          "description": "ID of the job",
          "type": "integer"
        },
        "wait": {
          "description": "Duration in seconds",
          "type": "integer"
        }
      }
    },
    "Job": {
      "title": "job",
      "description": "Status information about the job",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the job",
          "type": "integer"
        },
        "duration": {
          "description": "Time in seconds that the job ran for",
          "type": "number",
          "format": "double"
        },
        "finished": {
          "description": "Job has finished execution",
          "type": "boolean"
        },
        "success": {
          "description": "True for success false otherwise",
          "type": "boolean"
        },
        "startTime": {
          "description": "Time the job started (eg 2018-10-26T18:50:20.528746884+01:00)",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "Time the job finished (eg 2018-10-26T18:50:20.528746884+01:00)",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "Error from the job or empty string for no error",
          "type": "string"
        },
        "output": {
          "description": "Output of the job as would have been returned if called synchronously",
          "type": "object"
        }
      }
    },
    "ErrorResponse": {
      "title": "error",
      "description": "Details about error response",
      "type": "object",
      "properties": {
        "path": {
          "description": "Requested path",
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "type": "integer"
        },
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "input": {
          "description": "Map of request parameters",
          "type": "object"
        }
      }
    },
    "RemotePath": {
      "type": "object",
      "properties": {
        "fs": {
          "description": "A remote name string eg. drive:",
          "type": "string"
        },
        "remote": {
          "description": "A path within that remote eg. dir",
          "type": "string"
        }
      }
    },
    "FileSystemDetails": {
      "type": "object",
      "properties": {
        "free": {
          "description": "Free space in bytes",
          "type": "integer"
        },
        "total": {
          "description": "Available space in bytes",
          "type": "integer"
        },
        "used": {
          "description": "Used space in bytes",
          "type": "integer"
        }
      }
    },
    "FileInfo": {
      "type": "object",
      "properties": {
        "modTime": {
          "description": "Modification time",
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "description": "Size in bytes",
          "type": "integer"
        }
      }
    },
    "Content": {
      "type": "object",
      "properties": {
        "Content": {
          "description": "File content",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ListOptions": {
      "type": "object",
      "required": [
        "fs",
        "remote"
      ],
      "properties": {
        "fs": {
          "description": "A remote name string eg. drive:",
          "type": "string"
        },
        "remote": {
          "description": "A path within that remote eg. dir",
          "type": "string"
        },
        "opt": {
          "description": "A path within that remote eg. dir",
          "type": "object",
          "properties": {
            "recurse": {
              "description": "Recurse into the listing",
              "type": "boolean"
            },
            "noModTime": {
              "description": "Don't read the modification time (can speed things up)",
              "type": "boolean"
            },
            "noMimeType": {
              "description": "Don't read the mime type time (can speed things up)",
              "type": "boolean"
            },
            "showEncrypted": {
              "description": "Show the encrypted names",
              "type": "boolean"
            },
            "showOrigIDs": {
              "description": "Show the ID of the underlying Object",
              "type": "boolean"
            },
            "showHash": {
              "description": "Include hashes in the output (may take longer)",
              "type": "boolean"
            },
            "dirsOnly": {
              "description": "Show only directories in the listing",
              "type": "boolean"
            },
            "filesOnly": {
              "description": "Show only files in the listing",
              "type": "boolean"
            }
          }
        },
        "newestOnly": {
          "description": "Show only the newest versions of files (no snapshot tag suffix attached)",
          "type": "boolean"
        },
        "versionedOnly": {
          "description": "Show older version of files (snapshot tag suffix attached)",
          "type": "boolean"
        }
      }
    },
    "ListItem": {
      "type": "object",
      "properties": {
        "Hashes": {
          "description": "Hash of the item",
          "type": "object"
        },
        "ID": {
          "description": "ID of the item",
          "type": "string"
        },
        "OrigID": {
          "description": "Original ID of the item",
          "type": "string"
        },
        "IsDir": {
          "description": "true if item is directory",
          "type": "boolean"
        },
        "MimeType": {
          "description": "mime type of the item",
          "type": "string"
        },
        "ModTime": {
          "description": "Modification time",
          "type": "string",
          "format": "date-time"
        },
        "Name": {
          "description": "Name of the item",
          "type": "string"
        },
        "Encrypted": {
          "description": "Encrypted name",
          "type": "string"
        },
        "Path": {
          "description": "Path of the item",
          "type": "string"
        },
        "Size": {
          "description": "Size in bytes",
          "type": "integer"
        }
      }
    },
    "MoveOrCopyFileOptions": {
      "type": "object",
      "properties": {
        "srcFs": {
          "description": "Source file system e.g. s3: or gcs:",
          "type": "string"
        },
        "srcRemote": {
          "description": "A path within that remote eg. file.txt for the source",
          "type": "string"
        },
        "dstFs": {
          "description": "Destination file system e.g. s3: or gcs:",
          "type": "string"
        },
        "dstRemote": {
          "description": "A path within that remote eg. file.txt for the destination",
          "type": "string"
        },
        "suffix": {
          "description": "A suffix which will be added to otherwise overwritten or deleted files",
          "type": "string"
        }
      }
    },
    "CopyPathsOptions": {
      "type": "object",
      "properties": {
        "srcFs": {
          "description": "Source file system e.g. s3: or gcs:",
          "type": "string"
        },
        "srcRemote": {
          "description": "A directory within that remote eg. files/ for the source",
          "type": "string"
        },
        "dstFs": {
          "description": "Destination file system e.g. s3: or gcs:",
          "type": "string"
        },
        "dstRemote": {
          "description": "A directory within that remote eg. files/ for the destination",
          "type": "string"
        },
        "paths": {
          "description": "Paths relative to srcRemote/dstRemote eg. file.txt for both source and destination",
          "type": "array",
          "items": {
            "type": "string",
            "description": "path"
          }
        }
      }
    },
    "DeletePathsOptions": {
      "type": "object",
      "properties": {
        "fs": {
          "description": "File system e.g. s3: or gcs:",
          "type": "string"
        },
        "remote": {
          "description": "A directory within that remote eg. files/",
          "type": "string"
        },
        "paths": {
          "description": "Paths relative to remote eg. file.txt",
          "type": "array",
          "items": {
            "type": "string",
            "description": "path"
          }
        }
      }
    },
    "Remote": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the remote",
          "type": "string"
        },
        "type": {
          "description": "Type of the new remote",
          "type": "string"
        },
        "parameters": {
          "description": "Additional parameters for the remote",
          "type": "object"
        }
      }
    },
    "Transfer": {
      "type": "object",
      "properties": {
        "name": {
          "description": "name of the file",
          "type": "string"
        },
        "size": {
          "description": "size of the file in bytes",
          "type": "integer"
        },
        "bytes": {
          "description": "total transferred bytes for this file",
          "type": "integer"
        },
        "checked": {
          "description": "if the transfer is only checked (skipped, deleted)",
          "type": "boolean"
        },
        "started_at": {
          "description": "time at which transfer started",
          "type": "string",
          "format": "date-time"
        },
        "completed_at": {
          "description": "time at which transfer completed ",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "string description of the error (empty if successful)",
          "type": "string"
        }
      }
    },
    "GroupList": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "group name"
          }
        }
      }
    },
    "StatsParams": {
      "type": "object",
      "properties": {
        "group": {
          "description": "group name",
          "type": "string"
        }
      }
    },
    "JobInfo": {
      "type": "object",
      "properties": {
        "job": {
          "description": "job",
          "type": "object",
          "$ref": "#/definitions/Job"
        },
        "stats": {
          "description": "Core status",
          "type": "object",
          "$ref": "#/definitions/Stats"
        },
        "transferred": {
          "description": "Completed transfers",
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Transfer"
          }
        }
      }
    },
    "JobProgress": {
      "type": "object",
      "properties": {
        "status": {
          "description": "status of the job",
          "type": "string",
          "enum": [
            "success",
            "error",
            "running",
            "not_found"
          ]
        },
        "started_at": {
          "description": "time at which job started",
          "type": "string",
          "format": "date-time"
        },
        "completed_at": {
          "description": "time at which job completed ",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "string description of the error (empty if successful)",
          "type": "string"
        },
        "uploaded": {
          "description": "number of bytes that are successfully uploaded",
          "type": "integer"
        },
        "skipped": {
          "description": "number of bytes that were skipped",
          "type": "integer"
        },
        "failed": {
          "description": "number of bytes that failed transfer",
          "type": "integer"
        }
      }
    },
    "Stats": {
      "type": "object",
      "properties": {
        "speed": {
          "description": "average speed in bytes/sec since start of the process",
          "type": "number",
          "format": "double"
        },
        "bytes": {
          "description": "total transferred bytes since the start of the process",
          "type": "integer"
        },
        "errors": {
          "description": "number of errors",
          "type": "integer"
        },
        "fatalError": {
          "description": "whether there has been at least one FatalError",
          "type": "boolean"
        },
        "retryError": {
          "description": "whether there has been at least one non-NoRetryError",
          "type": "boolean"
        },
        "checks": {
          "description": "number of checked files",
          "type": "integer"
        },
        "transfers": {
          "description": "number of transferred files",
          "type": "integer"
        },
        "deletes": {
          "description": "number of deleted files",
          "type": "integer"
        },
        "elapsedTime": {
          "description": "time in seconds since the start of the process",
          "type": "number",
          "format": "double"
        },
        "lastError": {
          "description": "last occurred error",
          "type": "string"
        },
        "transferring": {
          "description": "an array of currently active file transfers",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "bytes": {
                "description": "total transferred bytes for this file",
                "type": "integer"
              },
              "eta": {
                "description": "estimated time in seconds until file transfer completion",
                "type": "number",
                "format": "double"
              },
              "name": {
                "description": "name of the file",
                "type": "string"
              },
              "percentage": {
                "description": "progress of the file transfer in percent",
                "type": "number",
                "format": "double"
              },
              "speed": {
                "description": "speed in bytes/sec",
                "type": "number",
                "format": "double"
              },
              "speedAvg": {
                "description": "speed in bytes/sec as an exponentially weighted moving average",
                "type": "number",
                "format": "double"
              },
              "size": {
                "description": "size of the file in bytes",
                "type": "integer"
              }
            }
          }
        },
        "checking": {
          "description": "an array of names of currently active file checks",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NodeInfo": {
      "title": "node info",
      "description": "Information about Scylla node.",
      "type": "object",
      "properties": {
        "listen_address": {
          "description": "Address Scylla listens for connections from other nodes.",
          "type": "string"
        },
        "native_transport_port": {
          "description": "Port for the CQL native transport to listen for clients on.",
          "type": "string"
        },
        "native_transport_port_ssl": {
          "description": "Port for the encrypted CQL native transport to listen for clients on.",
          "type": "string"
        },
        "rpc_address": {
          "description": "Address on which Scylla is going to expect Thrift and CQL clients connections.",
          "type": "string"
        },
        "rpc_port": {
          "description": "Port for Thrift to listen for clients on.",
          "type": "string"
        },
        "broadcast_address": {
          "description": "Address that is broadcasted to tell other Scylla nodes to connect to. Related to listen_address.",
          "type": "string"
        },
        "broadcast_rpc_address": {
          "description": "Address that is broadcasted to tell the clients to connect to.",
          "type": "string"
        },
        "api_address": {
          "description": "Address for REST API requests.",
          "type": "string"
        },
        "api_port": {
          "description": "Port for REST API server.",
          "type": "string"
        },
        "prometheus_address": {
          "description": "Address for Prometheus queries.",
          "type": "string"
        },
        "prometheus_port": {
          "description": "Port for Prometheus server.",
          "type": "string"
        },
        "client_encryption_enabled": {
          "description": "Whether client encryption is enabled.",
          "type": "boolean"
        },
        "client_encryption_require_auth": {
          "description": "Whether client authorization is required.",
          "type": "boolean"
        },
        "cql_password_protected": {
          "description": "Whether CQL requires password authentication.",
          "type": "boolean"
        },
        "alternator_port": {
          "description": "Port for Alternator API server.",
          "type": "string"
        },
        "alternator_https_port": {
          "description": "Port for Alternator HTTPS API server.",
          "type": "string"
        },
        "alternator_address": {
          "description": "Address for Alternator API requests.",
          "type": "string"
        },
        "alternator_enforce_authorization": {
          "description": "Whether Alternator requires authentication.",
          "type": "boolean"
        },
        "memory_total": {
          "description": "Total available memory.",
          "type": "integer"
        },
        "uptime": {
          "description": "Uptime in seconds.",
          "type": "integer"
        },
        "cpu_count": {
          "description": "Logical CPU count.",
          "type": "integer"
        },
        "scylla_version": {
          "description": "Scylla version.",
          "type": "string"
        },
        "agent_version": {
          "description": "Scylla Manager Agent version.",
          "type": "string"
        },
        "sstable_uuid_format": {
          "description": "Whether Scylla supports uuid-like sstable naming.",
          "type": "boolean"
        },
        "consistent_cluster_management": {
          "description": "Whether Scylla uses RAFT for cluster management and DDL.",
          "type": "boolean"
        },
        "enable_tablets": {
          "description": "Whether tablets are enabled.",
          "type": "boolean"
        }
      }
    }
  },
  "tags": []
}
