// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTaskManagerUserTTLPostParams creates a new TaskManagerUserTTLPostParams object
// with the default values initialized.
func NewTaskManagerUserTTLPostParams() *TaskManagerUserTTLPostParams {
	var ()
	return &TaskManagerUserTTLPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTaskManagerUserTTLPostParamsWithTimeout creates a new TaskManagerUserTTLPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTaskManagerUserTTLPostParamsWithTimeout(timeout time.Duration) *TaskManagerUserTTLPostParams {
	var ()
	return &TaskManagerUserTTLPostParams{

		timeout: timeout,
	}
}

// NewTaskManagerUserTTLPostParamsWithContext creates a new TaskManagerUserTTLPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewTaskManagerUserTTLPostParamsWithContext(ctx context.Context) *TaskManagerUserTTLPostParams {
	var ()
	return &TaskManagerUserTTLPostParams{

		Context: ctx,
	}
}

// NewTaskManagerUserTTLPostParamsWithHTTPClient creates a new TaskManagerUserTTLPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTaskManagerUserTTLPostParamsWithHTTPClient(client *http.Client) *TaskManagerUserTTLPostParams {
	var ()
	return &TaskManagerUserTTLPostParams{
		HTTPClient: client,
	}
}

/*
TaskManagerUserTTLPostParams contains all the parameters to send to the API endpoint
for the task manager user Ttl post operation typically these are written to a http.Request
*/
type TaskManagerUserTTLPostParams struct {

	/*UserTTL
	  The number of seconds for which the task started by user will be kept in memory after it finishes

	*/
	UserTTL int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) WithTimeout(timeout time.Duration) *TaskManagerUserTTLPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) WithContext(ctx context.Context) *TaskManagerUserTTLPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) WithHTTPClient(client *http.Client) *TaskManagerUserTTLPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserTTL adds the userTTL to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) WithUserTTL(userTTL int64) *TaskManagerUserTTLPostParams {
	o.SetUserTTL(userTTL)
	return o
}

// SetUserTTL adds the userTtl to the task manager user Ttl post params
func (o *TaskManagerUserTTLPostParams) SetUserTTL(userTTL int64) {
	o.UserTTL = userTTL
}

// WriteToRequest writes these params to a swagger request
func (o *TaskManagerUserTTLPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param user_ttl
	qrUserTTL := o.UserTTL
	qUserTTL := swag.FormatInt64(qrUserTTL)
	if qUserTTL != "" {
		if err := r.SetQueryParam("user_ttl", qUserTTL); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
