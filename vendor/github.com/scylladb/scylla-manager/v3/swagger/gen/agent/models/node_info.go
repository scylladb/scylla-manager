// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeInfo node info
//
// Information about Scylla node.
//
// swagger:model NodeInfo
type NodeInfo struct {

	// Scylla Manager Agent version.
	AgentVersion string `json:"agent_version,omitempty"`

	// Address for Alternator API requests.
	AlternatorAddress string `json:"alternator_address,omitempty"`

	// Whether Alternator requires authentication.
	AlternatorEnforceAuthorization bool `json:"alternator_enforce_authorization,omitempty"`

	// Port for Alternator HTTPS API server.
	AlternatorHTTPSPort string `json:"alternator_https_port,omitempty"`

	// Port for Alternator API server.
	AlternatorPort string `json:"alternator_port,omitempty"`

	// Address for REST API requests.
	APIAddress string `json:"api_address,omitempty"`

	// Port for REST API server.
	APIPort string `json:"api_port,omitempty"`

	// Address that is broadcasted to tell other Scylla nodes to connect to. Related to listen_address.
	BroadcastAddress string `json:"broadcast_address,omitempty"`

	// Address that is broadcasted to tell the clients to connect to.
	BroadcastRPCAddress string `json:"broadcast_rpc_address,omitempty"`

	// Whether client encryption is enabled.
	ClientEncryptionEnabled bool `json:"client_encryption_enabled,omitempty"`

	// Whether client authorization is required.
	ClientEncryptionRequireAuth bool `json:"client_encryption_require_auth,omitempty"`

	// Whether Scylla uses RAFT for cluster management and DDL.
	ConsistentClusterManagement bool `json:"consistent_cluster_management,omitempty"`

	// Logical CPU count.
	CPUCount int64 `json:"cpu_count,omitempty"`

	// Whether CQL requires password authentication.
	CqlPasswordProtected bool `json:"cql_password_protected,omitempty"`

	// First entry from `data_file_directories` list from scylla config file.
	DataDirectory string `json:"data_directory,omitempty"`

	// Whether tablets are enabled.
	EnableTablets bool `json:"enable_tablets,omitempty"`

	// Address Scylla listens for connections from other nodes.
	ListenAddress string `json:"listen_address,omitempty"`

	// Total available memory.
	MemoryTotal int64 `json:"memory_total,omitempty"`

	// Port for the CQL native transport to listen for clients on.
	NativeTransportPort string `json:"native_transport_port,omitempty"`

	// Port for the encrypted CQL native transport to listen for clients on.
	NativeTransportPortSsl string `json:"native_transport_port_ssl,omitempty"`

	// Maps endpoint name to endpoint configuration encoded in json string (see https://github.com/scylladb/scylladb/blob/master/docs/dev/object_storage.md).
	ObjectStorageEndpoints map[string]ObjectStorageEndpoint `json:"object_storage_endpoints,omitempty"`

	// Address for Prometheus queries.
	PrometheusAddress string `json:"prometheus_address,omitempty"`

	// Port for Prometheus server.
	PrometheusPort string `json:"prometheus_port,omitempty"`

	// rclone backend config
	RcloneBackendConfig NodeInfoRcloneBackendConfig `json:"rclone_backend_config,omitempty"`

	// Address on which Scylla is going to expect Thrift and CQL clients connections.
	RPCAddress string `json:"rpc_address,omitempty"`

	// Port for Thrift to listen for clients on.
	RPCPort string `json:"rpc_port,omitempty"`

	// Scylla version.
	ScyllaVersion string `json:"scylla_version,omitempty"`

	// Whether Scylla supports uuid-like sstable naming.
	SstableUUIDFormat bool `json:"sstable_uuid_format,omitempty"`

	// Total disk size of the first entry from `data_file_directories` list from scylla config file. In bytes.
	StorageSize uint64 `json:"storage_size,omitempty"`

	// Uptime in seconds.
	Uptime int64 `json:"uptime,omitempty"`
}

// Validate validates this node info
func (m *NodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectStorageEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRcloneBackendConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeInfo) validateObjectStorageEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectStorageEndpoints) { // not required
		return nil
	}

	for k := range m.ObjectStorageEndpoints {

		if err := validate.Required("object_storage_endpoints"+"."+k, "body", m.ObjectStorageEndpoints[k]); err != nil {
			return err
		}
		if val, ok := m.ObjectStorageEndpoints[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *NodeInfo) validateRcloneBackendConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.RcloneBackendConfig) { // not required
		return nil
	}

	if err := m.RcloneBackendConfig.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rclone_backend_config")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeInfo) UnmarshalBinary(b []byte) error {
	var res NodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeInfoRcloneBackendConfig Subset of rclone backend configuration from 'scylla-manager-agent.yaml'.
//
// swagger:model NodeInfoRcloneBackendConfig
type NodeInfoRcloneBackendConfig struct {

	// azure
	Azure interface{} `json:"azure,omitempty"`

	// gcs
	Gcs interface{} `json:"gcs,omitempty"`

	// s3
	S3 NodeInfoRcloneBackendConfigS3 `json:"s3,omitempty"`
}

// Validate validates this node info rclone backend config
func (m *NodeInfoRcloneBackendConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateS3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeInfoRcloneBackendConfig) validateS3(formats strfmt.Registry) error {

	if swag.IsZero(m.S3) { // not required
		return nil
	}

	if err := m.S3.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rclone_backend_config" + "." + "s3")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeInfoRcloneBackendConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeInfoRcloneBackendConfig) UnmarshalBinary(b []byte) error {
	var res NodeInfoRcloneBackendConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeInfoRcloneBackendConfigS3 node info rclone backend config s3
//
// swagger:model NodeInfoRcloneBackendConfigS3
type NodeInfoRcloneBackendConfigS3 struct {

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// region
	Region string `json:"region,omitempty"`
}

// Validate validates this node info rclone backend config s3
func (m *NodeInfoRcloneBackendConfigS3) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeInfoRcloneBackendConfigS3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeInfoRcloneBackendConfigS3) UnmarshalBinary(b []byte) error {
	var res NodeInfoRcloneBackendConfigS3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
