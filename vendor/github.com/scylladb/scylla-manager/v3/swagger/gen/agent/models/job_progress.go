// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobProgress job progress
//
// swagger:model JobProgress
type JobProgress struct {

	// time at which job completed
	// Format: date-time
	CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

	// string description of the error (empty if successful)
	Error string `json:"error,omitempty"`

	// number of bytes that failed transfer
	Failed int64 `json:"failed,omitempty"`

	// number of bytes that were skipped
	Skipped int64 `json:"skipped,omitempty"`

	// time at which job started
	// Format: date-time
	StartedAt strfmt.DateTime `json:"started_at,omitempty"`

	// status of the job
	// Enum: [success error running not_found]
	Status string `json:"status,omitempty"`

	// number of bytes that are successfully uploaded
	Uploaded int64 `json:"uploaded,omitempty"`
}

// Validate validates this job progress
func (m *JobProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobProgress) validateCompletedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("completed_at", "body", "date-time", m.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobProgress) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var jobProgressTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","error","running","not_found"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobProgressTypeStatusPropEnum = append(jobProgressTypeStatusPropEnum, v)
	}
}

const (

	// JobProgressStatusSuccess captures enum value "success"
	JobProgressStatusSuccess string = "success"

	// JobProgressStatusError captures enum value "error"
	JobProgressStatusError string = "error"

	// JobProgressStatusRunning captures enum value "running"
	JobProgressStatusRunning string = "running"

	// JobProgressStatusNotFound captures enum value "not_found"
	JobProgressStatusNotFound string = "not_found"
)

// prop value enum
func (m *JobProgress) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobProgressTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobProgress) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobProgress) UnmarshalBinary(b []byte) error {
	var res JobProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
